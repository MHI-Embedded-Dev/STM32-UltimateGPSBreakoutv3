
GPS_Ultimate.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006778  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000494  08006888  08006888  00016888  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d1c  08006d1c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  08006d1c  08006d1c  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006d1c  08006d1c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d1c  08006d1c  00016d1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006d20  08006d20  00016d20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08006d24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000240  200001e0  08006f04  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000420  08006f04  00020420  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000072c7  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019af  00000000  00000000  000274d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007c8  00000000  00000000  00028e80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000720  00000000  00000000  00029648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017d4b  00000000  00000000  00029d68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008ac3  00000000  00000000  00041ab3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084b48  00000000  00000000  0004a576  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cf0be  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f8c  00000000  00000000  000cf110  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	08006870 	.word	0x08006870

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	08006870 	.word	0x08006870

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_d2iz>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d215      	bcs.n	8000a42 <__aeabi_d2iz+0x36>
 8000a16:	d511      	bpl.n	8000a3c <__aeabi_d2iz+0x30>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d912      	bls.n	8000a48 <__aeabi_d2iz+0x3c>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a32:	fa23 f002 	lsr.w	r0, r3, r2
 8000a36:	bf18      	it	ne
 8000a38:	4240      	negne	r0, r0
 8000a3a:	4770      	bx	lr
 8000a3c:	f04f 0000 	mov.w	r0, #0
 8000a40:	4770      	bx	lr
 8000a42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a46:	d105      	bne.n	8000a54 <__aeabi_d2iz+0x48>
 8000a48:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a4c:	bf08      	it	eq
 8000a4e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop

08000a5c <__aeabi_d2uiz>:
 8000a5c:	004a      	lsls	r2, r1, #1
 8000a5e:	d211      	bcs.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a64:	d211      	bcs.n	8000a8a <__aeabi_d2uiz+0x2e>
 8000a66:	d50d      	bpl.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a70:	d40e      	bmi.n	8000a90 <__aeabi_d2uiz+0x34>
 8000a72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a82:	4770      	bx	lr
 8000a84:	f04f 0000 	mov.w	r0, #0
 8000a88:	4770      	bx	lr
 8000a8a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a8e:	d102      	bne.n	8000a96 <__aeabi_d2uiz+0x3a>
 8000a90:	f04f 30ff 	mov.w	r0, #4294967295
 8000a94:	4770      	bx	lr
 8000a96:	f04f 0000 	mov.w	r0, #0
 8000a9a:	4770      	bx	lr

08000a9c <__aeabi_d2lz>:
 8000a9c:	b538      	push	{r3, r4, r5, lr}
 8000a9e:	4605      	mov	r5, r0
 8000aa0:	460c      	mov	r4, r1
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	4628      	mov	r0, r5
 8000aa8:	4621      	mov	r1, r4
 8000aaa:	f7ff ff87 	bl	80009bc <__aeabi_dcmplt>
 8000aae:	b928      	cbnz	r0, 8000abc <__aeabi_d2lz+0x20>
 8000ab0:	4628      	mov	r0, r5
 8000ab2:	4621      	mov	r1, r4
 8000ab4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ab8:	f000 b80a 	b.w	8000ad0 <__aeabi_d2ulz>
 8000abc:	4628      	mov	r0, r5
 8000abe:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000ac2:	f000 f805 	bl	8000ad0 <__aeabi_d2ulz>
 8000ac6:	4240      	negs	r0, r0
 8000ac8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000acc:	bd38      	pop	{r3, r4, r5, pc}
 8000ace:	bf00      	nop

08000ad0 <__aeabi_d2ulz>:
 8000ad0:	b5d0      	push	{r4, r6, r7, lr}
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	4b0b      	ldr	r3, [pc, #44]	; (8000b04 <__aeabi_d2ulz+0x34>)
 8000ad6:	4606      	mov	r6, r0
 8000ad8:	460f      	mov	r7, r1
 8000ada:	f7ff fcfd 	bl	80004d8 <__aeabi_dmul>
 8000ade:	f7ff ffbd 	bl	8000a5c <__aeabi_d2uiz>
 8000ae2:	4604      	mov	r4, r0
 8000ae4:	f7ff fc7e 	bl	80003e4 <__aeabi_ui2d>
 8000ae8:	2200      	movs	r2, #0
 8000aea:	4b07      	ldr	r3, [pc, #28]	; (8000b08 <__aeabi_d2ulz+0x38>)
 8000aec:	f7ff fcf4 	bl	80004d8 <__aeabi_dmul>
 8000af0:	4602      	mov	r2, r0
 8000af2:	460b      	mov	r3, r1
 8000af4:	4630      	mov	r0, r6
 8000af6:	4639      	mov	r1, r7
 8000af8:	f7ff fb36 	bl	8000168 <__aeabi_dsub>
 8000afc:	f7ff ffae 	bl	8000a5c <__aeabi_d2uiz>
 8000b00:	4621      	mov	r1, r4
 8000b02:	bdd0      	pop	{r4, r6, r7, pc}
 8000b04:	3df00000 	.word	0x3df00000
 8000b08:	41f00000 	.word	0x41f00000

08000b0c <prv_parse_number>:
 * \param[in]       gh: GPS handle
 * \param[in]       t: Text to parse. Set to `NULL` to parse current GPS term
 * \return          Parsed integer
 */
static int32_t
prv_parse_number(lwgps_t* gh, const char* t) {
 8000b0c:	b480      	push	{r7}
 8000b0e:	b085      	sub	sp, #20
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
 8000b14:	6039      	str	r1, [r7, #0]
    int32_t res = 0;
 8000b16:	2300      	movs	r3, #0
 8000b18:	60fb      	str	r3, [r7, #12]
    uint8_t minus;

    if (t == NULL) {
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d106      	bne.n	8000b2e <prv_parse_number+0x22>
        t = gh->p.term_str;
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	3371      	adds	r3, #113	; 0x71
 8000b24:	603b      	str	r3, [r7, #0]
    }
    for (; t != NULL && *t == ' '; ++t) {}      /* Strip leading spaces */
 8000b26:	e002      	b.n	8000b2e <prv_parse_number+0x22>
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	3301      	adds	r3, #1
 8000b2c:	603b      	str	r3, [r7, #0]
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d003      	beq.n	8000b3c <prv_parse_number+0x30>
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	2b20      	cmp	r3, #32
 8000b3a:	d0f5      	beq.n	8000b28 <prv_parse_number+0x1c>

    minus = (*t == '-' ? (++t, 1) : 0);
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	2b2d      	cmp	r3, #45	; 0x2d
 8000b42:	d104      	bne.n	8000b4e <prv_parse_number+0x42>
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	3301      	adds	r3, #1
 8000b48:	603b      	str	r3, [r7, #0]
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	e000      	b.n	8000b50 <prv_parse_number+0x44>
 8000b4e:	2300      	movs	r3, #0
 8000b50:	72fb      	strb	r3, [r7, #11]
    for (; t != NULL && CIN(*t); ++t) {
 8000b52:	e00d      	b.n	8000b70 <prv_parse_number+0x64>
        res = 10 * res + CTN(*t);
 8000b54:	68fa      	ldr	r2, [r7, #12]
 8000b56:	4613      	mov	r3, r2
 8000b58:	009b      	lsls	r3, r3, #2
 8000b5a:	4413      	add	r3, r2
 8000b5c:	005b      	lsls	r3, r3, #1
 8000b5e:	461a      	mov	r2, r3
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	3b30      	subs	r3, #48	; 0x30
 8000b66:	4413      	add	r3, r2
 8000b68:	60fb      	str	r3, [r7, #12]
    for (; t != NULL && CIN(*t); ++t) {
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	3301      	adds	r3, #1
 8000b6e:	603b      	str	r3, [r7, #0]
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d007      	beq.n	8000b86 <prv_parse_number+0x7a>
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	781b      	ldrb	r3, [r3, #0]
 8000b7a:	2b2f      	cmp	r3, #47	; 0x2f
 8000b7c:	d903      	bls.n	8000b86 <prv_parse_number+0x7a>
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	781b      	ldrb	r3, [r3, #0]
 8000b82:	2b39      	cmp	r3, #57	; 0x39
 8000b84:	d9e6      	bls.n	8000b54 <prv_parse_number+0x48>
    }
    return minus ? -res : res;
 8000b86:	7afb      	ldrb	r3, [r7, #11]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d002      	beq.n	8000b92 <prv_parse_number+0x86>
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	425b      	negs	r3, r3
 8000b90:	e000      	b.n	8000b94 <prv_parse_number+0x88>
 8000b92:	68fb      	ldr	r3, [r7, #12]
}
 8000b94:	4618      	mov	r0, r3
 8000b96:	3714      	adds	r7, #20
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bc80      	pop	{r7}
 8000b9c:	4770      	bx	lr

08000b9e <prv_parse_float_number>:
 * \param[in]       gh: GPS handle
 * \param[in]       t: Text to parse. Set to `NULL` to parse current GPS term
 * \return          Parsed double in \ref lwgps_float_t format
 */
static lwgps_float_t
prv_parse_float_number(lwgps_t* gh, const char* t) {
 8000b9e:	b580      	push	{r7, lr}
 8000ba0:	b084      	sub	sp, #16
 8000ba2:	af00      	add	r7, sp, #0
 8000ba4:	6078      	str	r0, [r7, #4]
 8000ba6:	6039      	str	r1, [r7, #0]
    lwgps_float_t res;

    if (t == NULL) {
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d106      	bne.n	8000bbc <prv_parse_float_number+0x1e>
        t = gh->p.term_str;
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	3371      	adds	r3, #113	; 0x71
 8000bb2:	603b      	str	r3, [r7, #0]
    }
    for (; t != NULL && *t == ' '; ++t) {}      /* Strip leading spaces */
 8000bb4:	e002      	b.n	8000bbc <prv_parse_float_number+0x1e>
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	3301      	adds	r3, #1
 8000bba:	603b      	str	r3, [r7, #0]
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d003      	beq.n	8000bca <prv_parse_float_number+0x2c>
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	2b20      	cmp	r3, #32
 8000bc8:	d0f5      	beq.n	8000bb6 <prv_parse_float_number+0x18>

#if LWGPS_CFG_DOUBLE
    res = strtod(t, NULL);                      /* Parse string to double */
 8000bca:	2100      	movs	r1, #0
 8000bcc:	6838      	ldr	r0, [r7, #0]
 8000bce:	f003 fdeb 	bl	80047a8 <strtod>
 8000bd2:	e9c7 0102 	strd	r0, r1, [r7, #8]
#else /* LWGPS_CFG_DOUBLE */
    res = strtof(t, NULL);                      /* Parse string to float */
#endif /* !LWGPS_CFG_DOUBLE */

    return FLT(res);                            /* Return casted value, based on float size */
 8000bd6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 8000bda:	4610      	mov	r0, r2
 8000bdc:	4619      	mov	r1, r3
 8000bde:	3710      	adds	r7, #16
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}

08000be4 <prv_parse_lat_long>:
 *                  NMEA output for latitude is ddmm.sss and longitude is dddmm.sss
 * \param[in]       gh: GPS handle
 * \return          Latitude/Longitude value in degrees
 */
static lwgps_float_t
prv_parse_lat_long(lwgps_t* gh) {
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b088      	sub	sp, #32
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
    lwgps_float_t ll, deg, min;

    ll = prv_parse_float_number(gh, NULL);      /* Parse value as double */
 8000bec:	2100      	movs	r1, #0
 8000bee:	6878      	ldr	r0, [r7, #4]
 8000bf0:	f7ff ffd5 	bl	8000b9e <prv_parse_float_number>
 8000bf4:	e9c7 0106 	strd	r0, r1, [r7, #24]
    deg = FLT((int)((int)ll / 100));            /* Get absolute degrees value, interested in integer part only */
 8000bf8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000bfc:	f7ff ff06 	bl	8000a0c <__aeabi_d2iz>
 8000c00:	4603      	mov	r3, r0
 8000c02:	4a1b      	ldr	r2, [pc, #108]	; (8000c70 <prv_parse_lat_long+0x8c>)
 8000c04:	fb82 1203 	smull	r1, r2, r2, r3
 8000c08:	1152      	asrs	r2, r2, #5
 8000c0a:	17db      	asrs	r3, r3, #31
 8000c0c:	1ad3      	subs	r3, r2, r3
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f7ff fbf8 	bl	8000404 <__aeabi_i2d>
 8000c14:	4602      	mov	r2, r0
 8000c16:	460b      	mov	r3, r1
 8000c18:	e9c7 2304 	strd	r2, r3, [r7, #16]
    min = ll - (deg * FLT(100));                /* Get remaining part from full number, minutes */
 8000c1c:	f04f 0200 	mov.w	r2, #0
 8000c20:	4b14      	ldr	r3, [pc, #80]	; (8000c74 <prv_parse_lat_long+0x90>)
 8000c22:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000c26:	f7ff fc57 	bl	80004d8 <__aeabi_dmul>
 8000c2a:	4602      	mov	r2, r0
 8000c2c:	460b      	mov	r3, r1
 8000c2e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000c32:	f7ff fa99 	bl	8000168 <__aeabi_dsub>
 8000c36:	4602      	mov	r2, r0
 8000c38:	460b      	mov	r3, r1
 8000c3a:	e9c7 2302 	strd	r2, r3, [r7, #8]
    ll = deg + (min / FLT(60.0));               /* Calculate latitude/longitude */
 8000c3e:	f04f 0200 	mov.w	r2, #0
 8000c42:	4b0d      	ldr	r3, [pc, #52]	; (8000c78 <prv_parse_lat_long+0x94>)
 8000c44:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000c48:	f7ff fd70 	bl	800072c <__aeabi_ddiv>
 8000c4c:	4602      	mov	r2, r0
 8000c4e:	460b      	mov	r3, r1
 8000c50:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000c54:	f7ff fa8a 	bl	800016c <__adddf3>
 8000c58:	4602      	mov	r2, r0
 8000c5a:	460b      	mov	r3, r1
 8000c5c:	e9c7 2306 	strd	r2, r3, [r7, #24]

    return ll;
 8000c60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
}
 8000c64:	4610      	mov	r0, r2
 8000c66:	4619      	mov	r1, r3
 8000c68:	3720      	adds	r7, #32
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	51eb851f 	.word	0x51eb851f
 8000c74:	40590000 	.word	0x40590000
 8000c78:	404e0000 	.word	0x404e0000

08000c7c <prv_parse_term>:
 * \brief           Parse received term
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_parse_term(lwgps_t* gh) {
 8000c7c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000c80:	b082      	sub	sp, #8
 8000c82:	af00      	add	r7, sp, #0
 8000c84:	6078      	str	r0, [r7, #4]
    if (gh->p.term_num == 0) {                  /* Check string type */
 8000c86:	6879      	ldr	r1, [r7, #4]
 8000c88:	f891 107f 	ldrb.w	r1, [r1, #127]	; 0x7f
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	d169      	bne.n	8000d64 <prv_parse_term+0xe8>
        if (0) {
#if LWGPS_CFG_STATEMENT_GPGGA
        } else if (!strncmp(gh->p.term_str, "$GPGGA", 6) || !strncmp(gh->p.term_str, "$GNGGA", 6)) {
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	3371      	adds	r3, #113	; 0x71
 8000c94:	2206      	movs	r2, #6
 8000c96:	49b6      	ldr	r1, [pc, #728]	; (8000f70 <prv_parse_term+0x2f4>)
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f002 ff65 	bl	8003b68 <strncmp>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d009      	beq.n	8000cb8 <prv_parse_term+0x3c>
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	3371      	adds	r3, #113	; 0x71
 8000ca8:	2206      	movs	r2, #6
 8000caa:	49b2      	ldr	r1, [pc, #712]	; (8000f74 <prv_parse_term+0x2f8>)
 8000cac:	4618      	mov	r0, r3
 8000cae:	f002 ff5b 	bl	8003b68 <strncmp>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d104      	bne.n	8000cc2 <prv_parse_term+0x46>
            gh->p.stat = STAT_GGA;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	2201      	movs	r2, #1
 8000cbc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 8000cc0:	e04e      	b.n	8000d60 <prv_parse_term+0xe4>
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
        } else if (!strncmp(gh->p.term_str, "$GPGSA", 6) || !strncmp(gh->p.term_str, "$GNGSA", 6)) {
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	3371      	adds	r3, #113	; 0x71
 8000cc6:	2206      	movs	r2, #6
 8000cc8:	49ab      	ldr	r1, [pc, #684]	; (8000f78 <prv_parse_term+0x2fc>)
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f002 ff4c 	bl	8003b68 <strncmp>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d009      	beq.n	8000cea <prv_parse_term+0x6e>
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	3371      	adds	r3, #113	; 0x71
 8000cda:	2206      	movs	r2, #6
 8000cdc:	49a7      	ldr	r1, [pc, #668]	; (8000f7c <prv_parse_term+0x300>)
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f002 ff42 	bl	8003b68 <strncmp>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d104      	bne.n	8000cf4 <prv_parse_term+0x78>
            gh->p.stat = STAT_GSA;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	2202      	movs	r2, #2
 8000cee:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 8000cf2:	e035      	b.n	8000d60 <prv_parse_term+0xe4>
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
        } else if (!strncmp(gh->p.term_str, "$GPGSV", 6) || !strncmp(gh->p.term_str, "$GNGSV", 6)) {
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	3371      	adds	r3, #113	; 0x71
 8000cf8:	2206      	movs	r2, #6
 8000cfa:	49a1      	ldr	r1, [pc, #644]	; (8000f80 <prv_parse_term+0x304>)
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f002 ff33 	bl	8003b68 <strncmp>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d009      	beq.n	8000d1c <prv_parse_term+0xa0>
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	3371      	adds	r3, #113	; 0x71
 8000d0c:	2206      	movs	r2, #6
 8000d0e:	499d      	ldr	r1, [pc, #628]	; (8000f84 <prv_parse_term+0x308>)
 8000d10:	4618      	mov	r0, r3
 8000d12:	f002 ff29 	bl	8003b68 <strncmp>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d104      	bne.n	8000d26 <prv_parse_term+0xaa>
            gh->p.stat = STAT_GSV;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	2203      	movs	r2, #3
 8000d20:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 8000d24:	e01c      	b.n	8000d60 <prv_parse_term+0xe4>
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
        } else if (!strncmp(gh->p.term_str, "$GPRMC", 6) || !strncmp(gh->p.term_str, "$GNRMC", 6)) {
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	3371      	adds	r3, #113	; 0x71
 8000d2a:	2206      	movs	r2, #6
 8000d2c:	4996      	ldr	r1, [pc, #600]	; (8000f88 <prv_parse_term+0x30c>)
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f002 ff1a 	bl	8003b68 <strncmp>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d009      	beq.n	8000d4e <prv_parse_term+0xd2>
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	3371      	adds	r3, #113	; 0x71
 8000d3e:	2206      	movs	r2, #6
 8000d40:	4992      	ldr	r1, [pc, #584]	; (8000f8c <prv_parse_term+0x310>)
 8000d42:	4618      	mov	r0, r3
 8000d44:	f002 ff10 	bl	8003b68 <strncmp>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d104      	bne.n	8000d58 <prv_parse_term+0xdc>
            gh->p.stat = STAT_RMC;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	2204      	movs	r2, #4
 8000d52:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 8000d56:	e003      	b.n	8000d60 <prv_parse_term+0xe4>
#if LWGPS_CFG_STATEMENT_PUBX
        } else if (!strncmp(gh->p.term_str, "$PUBX", 5)) {
            gh->p.stat = STAT_UBX;
#endif /* LWGPS_CFG_STATEMENT_PUBX */
        } else {
            gh->p.stat = STAT_UNKNOWN;          /* Invalid statement for library */
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
        }
        return 1;
 8000d60:	2301      	movs	r3, #1
 8000d62:	e21f      	b.n	80011a4 <prv_parse_term+0x528>
    }

    /* Start parsing terms */
    if (gh->p.stat == STAT_UNKNOWN) {
 8000d64:	6879      	ldr	r1, [r7, #4]
 8000d66:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 8000d6a:	2900      	cmp	r1, #0
 8000d6c:	f000 8219 	beq.w	80011a2 <prv_parse_term+0x526>
#if LWGPS_CFG_STATEMENT_GPGGA
    } else if (gh->p.stat == STAT_GGA) {        /* Process GPGGA statement */
 8000d70:	6879      	ldr	r1, [r7, #4]
 8000d72:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 8000d76:	2901      	cmp	r1, #1
 8000d78:	f040 80c1 	bne.w	8000efe <prv_parse_term+0x282>
        switch (gh->p.term_num) {
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8000d82:	3b01      	subs	r3, #1
 8000d84:	2b0a      	cmp	r3, #10
 8000d86:	f200 81ff 	bhi.w	8001188 <prv_parse_term+0x50c>
 8000d8a:	a201      	add	r2, pc, #4	; (adr r2, 8000d90 <prv_parse_term+0x114>)
 8000d8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d90:	08000dbd 	.word	0x08000dbd
 8000d94:	08000e37 	.word	0x08000e37
 8000d98:	08000e49 	.word	0x08000e49
 8000d9c:	08000e73 	.word	0x08000e73
 8000da0:	08000e85 	.word	0x08000e85
 8000da4:	08000eaf 	.word	0x08000eaf
 8000da8:	08000ec3 	.word	0x08000ec3
 8000dac:	08001189 	.word	0x08001189
 8000db0:	08000ed7 	.word	0x08000ed7
 8000db4:	08001189 	.word	0x08001189
 8000db8:	08000eeb 	.word	0x08000eeb
            case 1:                             /* Process UTC time */
                gh->p.data.gga.hours = 10 * CTN(gh->p.term_str[0]) + CTN(gh->p.term_str[1]);
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8000dc2:	3b30      	subs	r3, #48	; 0x30
 8000dc4:	b2db      	uxtb	r3, r3
 8000dc6:	461a      	mov	r2, r3
 8000dc8:	0092      	lsls	r2, r2, #2
 8000dca:	4413      	add	r3, r2
 8000dcc:	005b      	lsls	r3, r3, #1
 8000dce:	b2da      	uxtb	r2, r3
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8000dd6:	4413      	add	r3, r2
 8000dd8:	b2db      	uxtb	r3, r3
 8000dda:	3b30      	subs	r3, #48	; 0x30
 8000ddc:	b2da      	uxtb	r2, r3
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
                gh->p.data.gga.minutes = 10 * CTN(gh->p.term_str[2]) + CTN(gh->p.term_str[3]);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 8000dea:	3b30      	subs	r3, #48	; 0x30
 8000dec:	b2db      	uxtb	r3, r3
 8000dee:	461a      	mov	r2, r3
 8000df0:	0092      	lsls	r2, r2, #2
 8000df2:	4413      	add	r3, r2
 8000df4:	005b      	lsls	r3, r3, #1
 8000df6:	b2da      	uxtb	r2, r3
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8000dfe:	4413      	add	r3, r2
 8000e00:	b2db      	uxtb	r3, r3
 8000e02:	3b30      	subs	r3, #48	; 0x30
 8000e04:	b2da      	uxtb	r2, r3
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
                gh->p.data.gga.seconds = 10 * CTN(gh->p.term_str[4]) + CTN(gh->p.term_str[5]);
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8000e12:	3b30      	subs	r3, #48	; 0x30
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	461a      	mov	r2, r3
 8000e18:	0092      	lsls	r2, r2, #2
 8000e1a:	4413      	add	r3, r2
 8000e1c:	005b      	lsls	r3, r3, #1
 8000e1e:	b2da      	uxtb	r2, r3
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8000e26:	4413      	add	r3, r2
 8000e28:	b2db      	uxtb	r3, r3
 8000e2a:	3b30      	subs	r3, #48	; 0x30
 8000e2c:	b2da      	uxtb	r2, r3
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
                break;
 8000e34:	e1b5      	b.n	80011a2 <prv_parse_term+0x526>
            case 2:                             /* Latitude */
                gh->p.data.gga.latitude = prv_parse_lat_long(gh);   /* Parse latitude */
 8000e36:	6878      	ldr	r0, [r7, #4]
 8000e38:	f7ff fed4 	bl	8000be4 <prv_parse_lat_long>
 8000e3c:	4602      	mov	r2, r0
 8000e3e:	460b      	mov	r3, r1
 8000e40:	6879      	ldr	r1, [r7, #4]
 8000e42:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
                break;
 8000e46:	e1ac      	b.n	80011a2 <prv_parse_term+0x526>
            case 3:                             /* Latitude north/south information */
                if (gh->p.term_str[0] == 'S' || gh->p.term_str[0] == 's') {
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8000e4e:	2b53      	cmp	r3, #83	; 0x53
 8000e50:	d005      	beq.n	8000e5e <prv_parse_term+0x1e2>
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8000e58:	2b73      	cmp	r3, #115	; 0x73
 8000e5a:	f040 8197 	bne.w	800118c <prv_parse_term+0x510>
                    gh->p.data.gga.latitude = -gh->p.data.gga.latitude;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 8000e64:	4690      	mov	r8, r2
 8000e66:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	e9c3 8922 	strd	r8, r9, [r3, #136]	; 0x88
                }
                break;
 8000e70:	e18c      	b.n	800118c <prv_parse_term+0x510>
            case 4:                             /* Longitude */
                gh->p.data.gga.longitude = prv_parse_lat_long(gh);  /* Parse longitude */
 8000e72:	6878      	ldr	r0, [r7, #4]
 8000e74:	f7ff feb6 	bl	8000be4 <prv_parse_lat_long>
 8000e78:	4602      	mov	r2, r0
 8000e7a:	460b      	mov	r3, r1
 8000e7c:	6879      	ldr	r1, [r7, #4]
 8000e7e:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
                break;
 8000e82:	e18e      	b.n	80011a2 <prv_parse_term+0x526>
            case 5:                             /* Longitude east/west information */
                if (gh->p.term_str[0] == 'W' || gh->p.term_str[0] == 'w') {
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8000e8a:	2b57      	cmp	r3, #87	; 0x57
 8000e8c:	d005      	beq.n	8000e9a <prv_parse_term+0x21e>
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8000e94:	2b77      	cmp	r3, #119	; 0x77
 8000e96:	f040 817b 	bne.w	8001190 <prv_parse_term+0x514>
                    gh->p.data.gga.longitude = -gh->p.data.gga.longitude;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8000ea0:	4614      	mov	r4, r2
 8000ea2:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	e9c3 4524 	strd	r4, r5, [r3, #144]	; 0x90
                }
                break;
 8000eac:	e170      	b.n	8001190 <prv_parse_term+0x514>
            case 6:                             /* Fix status */
                gh->p.data.gga.fix = (uint8_t)prv_parse_number(gh, NULL);
 8000eae:	2100      	movs	r1, #0
 8000eb0:	6878      	ldr	r0, [r7, #4]
 8000eb2:	f7ff fe2b 	bl	8000b0c <prv_parse_number>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	b2da      	uxtb	r2, r3
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
                break;
 8000ec0:	e16f      	b.n	80011a2 <prv_parse_term+0x526>
            case 7:                             /* Satellites in use */
                gh->p.data.gga.sats_in_use = (uint8_t)prv_parse_number(gh, NULL);
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	6878      	ldr	r0, [r7, #4]
 8000ec6:	f7ff fe21 	bl	8000b0c <prv_parse_number>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	b2da      	uxtb	r2, r3
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
                break;
 8000ed4:	e165      	b.n	80011a2 <prv_parse_term+0x526>
            case 9:                             /* Altitude */
                gh->p.data.gga.altitude = prv_parse_float_number(gh, NULL);
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	6878      	ldr	r0, [r7, #4]
 8000eda:	f7ff fe60 	bl	8000b9e <prv_parse_float_number>
 8000ede:	4602      	mov	r2, r0
 8000ee0:	460b      	mov	r3, r1
 8000ee2:	6879      	ldr	r1, [r7, #4]
 8000ee4:	e9c1 2326 	strd	r2, r3, [r1, #152]	; 0x98
                break;
 8000ee8:	e15b      	b.n	80011a2 <prv_parse_term+0x526>
            case 11:                            /* Altitude above ellipsoid */
                gh->p.data.gga.geo_sep = prv_parse_float_number(gh, NULL);
 8000eea:	2100      	movs	r1, #0
 8000eec:	6878      	ldr	r0, [r7, #4]
 8000eee:	f7ff fe56 	bl	8000b9e <prv_parse_float_number>
 8000ef2:	4602      	mov	r2, r0
 8000ef4:	460b      	mov	r3, r1
 8000ef6:	6879      	ldr	r1, [r7, #4]
 8000ef8:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
                break;
 8000efc:	e151      	b.n	80011a2 <prv_parse_term+0x526>
            default:
                break;
        }
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
    } else if (gh->p.stat == STAT_GSA) {        /* Process GPGSA statement */
 8000efe:	6879      	ldr	r1, [r7, #4]
 8000f00:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 8000f04:	2902      	cmp	r1, #2
 8000f06:	d17d      	bne.n	8001004 <prv_parse_term+0x388>
        switch (gh->p.term_num) {
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8000f0e:	3b02      	subs	r3, #2
 8000f10:	2b0f      	cmp	r3, #15
 8000f12:	d85b      	bhi.n	8000fcc <prv_parse_term+0x350>
 8000f14:	a201      	add	r2, pc, #4	; (adr r2, 8000f1c <prv_parse_term+0x2a0>)
 8000f16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f1a:	bf00      	nop
 8000f1c:	08000f5d 	.word	0x08000f5d
 8000f20:	08000fcd 	.word	0x08000fcd
 8000f24:	08000fcd 	.word	0x08000fcd
 8000f28:	08000fcd 	.word	0x08000fcd
 8000f2c:	08000fcd 	.word	0x08000fcd
 8000f30:	08000fcd 	.word	0x08000fcd
 8000f34:	08000fcd 	.word	0x08000fcd
 8000f38:	08000fcd 	.word	0x08000fcd
 8000f3c:	08000fcd 	.word	0x08000fcd
 8000f40:	08000fcd 	.word	0x08000fcd
 8000f44:	08000fcd 	.word	0x08000fcd
 8000f48:	08000fcd 	.word	0x08000fcd
 8000f4c:	08000fcd 	.word	0x08000fcd
 8000f50:	08000f91 	.word	0x08000f91
 8000f54:	08000fa5 	.word	0x08000fa5
 8000f58:	08000fb9 	.word	0x08000fb9
            case 2:                             /* Process fix mode */
                gh->p.data.gsa.fix_mode = (uint8_t)prv_parse_number(gh, NULL);
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	6878      	ldr	r0, [r7, #4]
 8000f60:	f7ff fdd4 	bl	8000b0c <prv_parse_number>
 8000f64:	4603      	mov	r3, r0
 8000f66:	b2da      	uxtb	r2, r3
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
                break;
 8000f6e:	e118      	b.n	80011a2 <prv_parse_term+0x526>
 8000f70:	08006888 	.word	0x08006888
 8000f74:	08006890 	.word	0x08006890
 8000f78:	08006898 	.word	0x08006898
 8000f7c:	080068a0 	.word	0x080068a0
 8000f80:	080068a8 	.word	0x080068a8
 8000f84:	080068b0 	.word	0x080068b0
 8000f88:	080068b8 	.word	0x080068b8
 8000f8c:	080068c0 	.word	0x080068c0
            case 15:                            /* Process PDOP */
                gh->p.data.gsa.dop_p = prv_parse_float_number(gh, NULL);
 8000f90:	2100      	movs	r1, #0
 8000f92:	6878      	ldr	r0, [r7, #4]
 8000f94:	f7ff fe03 	bl	8000b9e <prv_parse_float_number>
 8000f98:	4602      	mov	r2, r0
 8000f9a:	460b      	mov	r3, r1
 8000f9c:	6879      	ldr	r1, [r7, #4]
 8000f9e:	e9c1 2326 	strd	r2, r3, [r1, #152]	; 0x98
                break;
 8000fa2:	e0fe      	b.n	80011a2 <prv_parse_term+0x526>
            case 16:                            /* Process HDOP */
                gh->p.data.gsa.dop_h = prv_parse_float_number(gh, NULL);
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	6878      	ldr	r0, [r7, #4]
 8000fa8:	f7ff fdf9 	bl	8000b9e <prv_parse_float_number>
 8000fac:	4602      	mov	r2, r0
 8000fae:	460b      	mov	r3, r1
 8000fb0:	6879      	ldr	r1, [r7, #4]
 8000fb2:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
                break;
 8000fb6:	e0f4      	b.n	80011a2 <prv_parse_term+0x526>
            case 17:                            /* Process VDOP */
                gh->p.data.gsa.dop_v = prv_parse_float_number(gh, NULL);
 8000fb8:	2100      	movs	r1, #0
 8000fba:	6878      	ldr	r0, [r7, #4]
 8000fbc:	f7ff fdef 	bl	8000b9e <prv_parse_float_number>
 8000fc0:	4602      	mov	r2, r0
 8000fc2:	460b      	mov	r3, r1
 8000fc4:	6879      	ldr	r1, [r7, #4]
 8000fc6:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
                break;
 8000fca:	e0ea      	b.n	80011a2 <prv_parse_term+0x526>
            default:
                /* Parse satellite IDs */
                if (gh->p.term_num >= 3 && gh->p.term_num <= 14) {
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8000fd2:	2b02      	cmp	r3, #2
 8000fd4:	f240 80de 	bls.w	8001194 <prv_parse_term+0x518>
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8000fde:	2b0e      	cmp	r3, #14
 8000fe0:	f200 80d8 	bhi.w	8001194 <prv_parse_term+0x518>
                    gh->p.data.gsa.satellites_ids[gh->p.term_num - 3] = (uint8_t)prv_parse_number(gh, NULL);
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	6878      	ldr	r0, [r7, #4]
 8000fe8:	f7ff fd90 	bl	8000b0c <prv_parse_number>
 8000fec:	4602      	mov	r2, r0
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8000ff4:	3b03      	subs	r3, #3
 8000ff6:	b2d1      	uxtb	r1, r2
 8000ff8:	687a      	ldr	r2, [r7, #4]
 8000ffa:	4413      	add	r3, r2
 8000ffc:	460a      	mov	r2, r1
 8000ffe:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
                }
                break;
 8001002:	e0c7      	b.n	8001194 <prv_parse_term+0x518>
        }
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
    } else if (gh->p.stat == STAT_GSV) {        /* Process GPGSV statement */
 8001004:	6879      	ldr	r1, [r7, #4]
 8001006:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 800100a:	2903      	cmp	r1, #3
 800100c:	d11b      	bne.n	8001046 <prv_parse_term+0x3ca>
        switch (gh->p.term_num) {
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8001014:	2b02      	cmp	r3, #2
 8001016:	d002      	beq.n	800101e <prv_parse_term+0x3a2>
 8001018:	2b03      	cmp	r3, #3
 800101a:	d00a      	beq.n	8001032 <prv_parse_term+0x3b6>
                                break;
                        }
                    }
                }
#endif /* LWGPS_CFG_STATEMENT_GPGSV_SAT_DET */
                break;
 800101c:	e0c1      	b.n	80011a2 <prv_parse_term+0x526>
                gh->p.data.gsv.stat_num = (uint8_t)prv_parse_number(gh, NULL);
 800101e:	2100      	movs	r1, #0
 8001020:	6878      	ldr	r0, [r7, #4]
 8001022:	f7ff fd73 	bl	8000b0c <prv_parse_number>
 8001026:	4603      	mov	r3, r0
 8001028:	b2da      	uxtb	r2, r3
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                break;
 8001030:	e0b7      	b.n	80011a2 <prv_parse_term+0x526>
                gh->p.data.gsv.sats_in_view = (uint8_t)prv_parse_number(gh, NULL);
 8001032:	2100      	movs	r1, #0
 8001034:	6878      	ldr	r0, [r7, #4]
 8001036:	f7ff fd69 	bl	8000b0c <prv_parse_number>
 800103a:	4603      	mov	r3, r0
 800103c:	b2da      	uxtb	r2, r3
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
                break;
 8001044:	e0ad      	b.n	80011a2 <prv_parse_term+0x526>
        }
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
    } else if (gh->p.stat == STAT_RMC) {        /* Process GPRMC statement */
 8001046:	6879      	ldr	r1, [r7, #4]
 8001048:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 800104c:	2904      	cmp	r1, #4
 800104e:	f040 80a3 	bne.w	8001198 <prv_parse_term+0x51c>
        switch (gh->p.term_num) {
 8001052:	6879      	ldr	r1, [r7, #4]
 8001054:	f891 107f 	ldrb.w	r1, [r1, #127]	; 0x7f
 8001058:	3902      	subs	r1, #2
 800105a:	2909      	cmp	r1, #9
 800105c:	f200 809e 	bhi.w	800119c <prv_parse_term+0x520>
 8001060:	a001      	add	r0, pc, #4	; (adr r0, 8001068 <prv_parse_term+0x3ec>)
 8001062:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8001066:	bf00      	nop
 8001068:	08001091 	.word	0x08001091
 800106c:	0800119d 	.word	0x0800119d
 8001070:	0800119d 	.word	0x0800119d
 8001074:	0800119d 	.word	0x0800119d
 8001078:	0800119d 	.word	0x0800119d
 800107c:	080010ab 	.word	0x080010ab
 8001080:	080010bf 	.word	0x080010bf
 8001084:	080010d3 	.word	0x080010d3
 8001088:	0800114d 	.word	0x0800114d
 800108c:	08001161 	.word	0x08001161
            case 2:                             /* Process valid status */
                gh->p.data.rmc.is_valid = (gh->p.term_str[0] == 'A');
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001096:	2b41      	cmp	r3, #65	; 0x41
 8001098:	bf0c      	ite	eq
 800109a:	2301      	moveq	r3, #1
 800109c:	2300      	movne	r3, #0
 800109e:	b2db      	uxtb	r3, r3
 80010a0:	461a      	mov	r2, r3
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
                break;
 80010a8:	e07b      	b.n	80011a2 <prv_parse_term+0x526>
            case 7:                             /* Process ground speed in knots */
                gh->p.data.rmc.speed = prv_parse_float_number(gh, NULL);
 80010aa:	2100      	movs	r1, #0
 80010ac:	6878      	ldr	r0, [r7, #4]
 80010ae:	f7ff fd76 	bl	8000b9e <prv_parse_float_number>
 80010b2:	4602      	mov	r2, r0
 80010b4:	460b      	mov	r3, r1
 80010b6:	6879      	ldr	r1, [r7, #4]
 80010b8:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
                break;
 80010bc:	e071      	b.n	80011a2 <prv_parse_term+0x526>
            case 8:                             /* Process true ground coarse */
                gh->p.data.rmc.course = prv_parse_float_number(gh, NULL);
 80010be:	2100      	movs	r1, #0
 80010c0:	6878      	ldr	r0, [r7, #4]
 80010c2:	f7ff fd6c 	bl	8000b9e <prv_parse_float_number>
 80010c6:	4602      	mov	r2, r0
 80010c8:	460b      	mov	r3, r1
 80010ca:	6879      	ldr	r1, [r7, #4]
 80010cc:	e9c1 2326 	strd	r2, r3, [r1, #152]	; 0x98
                break;
 80010d0:	e067      	b.n	80011a2 <prv_parse_term+0x526>
            case 9:                             /* Process date */
                gh->p.data.rmc.date = (uint8_t)(10 * CTN(gh->p.term_str[0]) + CTN(gh->p.term_str[1]));
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80010d8:	3b30      	subs	r3, #48	; 0x30
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	461a      	mov	r2, r3
 80010de:	0092      	lsls	r2, r2, #2
 80010e0:	4413      	add	r3, r2
 80010e2:	005b      	lsls	r3, r3, #1
 80010e4:	b2da      	uxtb	r2, r3
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 80010ec:	4413      	add	r3, r2
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	3b30      	subs	r3, #48	; 0x30
 80010f2:	b2da      	uxtb	r2, r3
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                gh->p.data.rmc.month = (uint8_t)(10 * CTN(gh->p.term_str[2]) + CTN(gh->p.term_str[3]));
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 8001100:	3b30      	subs	r3, #48	; 0x30
 8001102:	b2db      	uxtb	r3, r3
 8001104:	461a      	mov	r2, r3
 8001106:	0092      	lsls	r2, r2, #2
 8001108:	4413      	add	r3, r2
 800110a:	005b      	lsls	r3, r3, #1
 800110c:	b2da      	uxtb	r2, r3
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8001114:	4413      	add	r3, r2
 8001116:	b2db      	uxtb	r3, r3
 8001118:	3b30      	subs	r3, #48	; 0x30
 800111a:	b2da      	uxtb	r2, r3
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
                gh->p.data.rmc.year = (uint8_t)(10 * CTN(gh->p.term_str[4]) + CTN(gh->p.term_str[5]));
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8001128:	3b30      	subs	r3, #48	; 0x30
 800112a:	b2db      	uxtb	r3, r3
 800112c:	461a      	mov	r2, r3
 800112e:	0092      	lsls	r2, r2, #2
 8001130:	4413      	add	r3, r2
 8001132:	005b      	lsls	r3, r3, #1
 8001134:	b2da      	uxtb	r2, r3
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 800113c:	4413      	add	r3, r2
 800113e:	b2db      	uxtb	r3, r3
 8001140:	3b30      	subs	r3, #48	; 0x30
 8001142:	b2da      	uxtb	r2, r3
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
                break;
 800114a:	e02a      	b.n	80011a2 <prv_parse_term+0x526>
            case 10:                            /* Process magnetic variation */
                gh->p.data.rmc.variation = prv_parse_float_number(gh, NULL);
 800114c:	2100      	movs	r1, #0
 800114e:	6878      	ldr	r0, [r7, #4]
 8001150:	f7ff fd25 	bl	8000b9e <prv_parse_float_number>
 8001154:	4602      	mov	r2, r0
 8001156:	460b      	mov	r3, r1
 8001158:	6879      	ldr	r1, [r7, #4]
 800115a:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
                break;
 800115e:	e020      	b.n	80011a2 <prv_parse_term+0x526>
            case 11:                            /* Process magnetic variation east/west */
                if (gh->p.term_str[0] == 'W' || gh->p.term_str[0] == 'w') {
 8001160:	6879      	ldr	r1, [r7, #4]
 8001162:	f891 1071 	ldrb.w	r1, [r1, #113]	; 0x71
 8001166:	2957      	cmp	r1, #87	; 0x57
 8001168:	d004      	beq.n	8001174 <prv_parse_term+0x4f8>
 800116a:	6879      	ldr	r1, [r7, #4]
 800116c:	f891 1071 	ldrb.w	r1, [r1, #113]	; 0x71
 8001170:	2977      	cmp	r1, #119	; 0x77
 8001172:	d115      	bne.n	80011a0 <prv_parse_term+0x524>
                    gh->p.data.rmc.variation = -gh->p.data.rmc.variation;
 8001174:	6879      	ldr	r1, [r7, #4]
 8001176:	e9d1 0128 	ldrd	r0, r1, [r1, #160]	; 0xa0
 800117a:	4602      	mov	r2, r0
 800117c:	f081 4300 	eor.w	r3, r1, #2147483648	; 0x80000000
 8001180:	6879      	ldr	r1, [r7, #4]
 8001182:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
                }
                break;
 8001186:	e00b      	b.n	80011a0 <prv_parse_term+0x524>
                break;
 8001188:	bf00      	nop
 800118a:	e00a      	b.n	80011a2 <prv_parse_term+0x526>
                break;
 800118c:	bf00      	nop
 800118e:	e008      	b.n	80011a2 <prv_parse_term+0x526>
                break;
 8001190:	bf00      	nop
 8001192:	e006      	b.n	80011a2 <prv_parse_term+0x526>
                break;
 8001194:	bf00      	nop
 8001196:	e004      	b.n	80011a2 <prv_parse_term+0x526>
            default:
                break;
        }
#endif /* LWGPS_CFG_STATEMENT_PUBX_TIME */
#endif /* LWGPS_CFG_STATEMENT_PUBX */
    }
 8001198:	bf00      	nop
 800119a:	e002      	b.n	80011a2 <prv_parse_term+0x526>
                break;
 800119c:	bf00      	nop
 800119e:	e000      	b.n	80011a2 <prv_parse_term+0x526>
                break;
 80011a0:	bf00      	nop
    return 1;
 80011a2:	2301      	movs	r3, #1
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	3708      	adds	r7, #8
 80011a8:	46bd      	mov	sp, r7
 80011aa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80011ae:	bf00      	nop

080011b0 <prv_check_crc>:
 * \brief           Compare calculated CRC with received CRC
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_check_crc(lwgps_t* gh) {
 80011b0:	b480      	push	{r7}
 80011b2:	b085      	sub	sp, #20
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
    uint8_t crc;
    crc = (uint8_t)((CHTN(gh->p.term_str[0]) & 0x0F) << 0x04) | (CHTN(gh->p.term_str[1]) & 0x0F);   /* Convert received CRC from string (hex) to number */
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80011be:	2b2f      	cmp	r3, #47	; 0x2f
 80011c0:	d90d      	bls.n	80011de <prv_check_crc+0x2e>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80011c8:	2b39      	cmp	r3, #57	; 0x39
 80011ca:	d808      	bhi.n	80011de <prv_check_crc+0x2e>
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80011d2:	3b30      	subs	r3, #48	; 0x30
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	011b      	lsls	r3, r3, #4
 80011d8:	b2db      	uxtb	r3, r3
 80011da:	b25a      	sxtb	r2, r3
 80011dc:	e026      	b.n	800122c <prv_check_crc+0x7c>
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80011e4:	2b60      	cmp	r3, #96	; 0x60
 80011e6:	d90d      	bls.n	8001204 <prv_check_crc+0x54>
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80011ee:	2b7a      	cmp	r3, #122	; 0x7a
 80011f0:	d808      	bhi.n	8001204 <prv_check_crc+0x54>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80011f8:	3b57      	subs	r3, #87	; 0x57
 80011fa:	b2db      	uxtb	r3, r3
 80011fc:	011b      	lsls	r3, r3, #4
 80011fe:	b2db      	uxtb	r3, r3
 8001200:	b25a      	sxtb	r2, r3
 8001202:	e013      	b.n	800122c <prv_check_crc+0x7c>
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 800120a:	2b40      	cmp	r3, #64	; 0x40
 800120c:	d90d      	bls.n	800122a <prv_check_crc+0x7a>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001214:	2b5a      	cmp	r3, #90	; 0x5a
 8001216:	d808      	bhi.n	800122a <prv_check_crc+0x7a>
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 800121e:	3b37      	subs	r3, #55	; 0x37
 8001220:	b2db      	uxtb	r3, r3
 8001222:	011b      	lsls	r3, r3, #4
 8001224:	b2db      	uxtb	r3, r3
 8001226:	b25a      	sxtb	r2, r3
 8001228:	e000      	b.n	800122c <prv_check_crc+0x7c>
 800122a:	2200      	movs	r2, #0
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8001232:	2b2f      	cmp	r3, #47	; 0x2f
 8001234:	d90c      	bls.n	8001250 <prv_check_crc+0xa0>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 800123c:	2b39      	cmp	r3, #57	; 0x39
 800123e:	d807      	bhi.n	8001250 <prv_check_crc+0xa0>
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8001246:	b25b      	sxtb	r3, r3
 8001248:	f003 030f 	and.w	r3, r3, #15
 800124c:	b25b      	sxtb	r3, r3
 800124e:	e028      	b.n	80012a2 <prv_check_crc+0xf2>
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8001256:	2b60      	cmp	r3, #96	; 0x60
 8001258:	d90e      	bls.n	8001278 <prv_check_crc+0xc8>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8001260:	2b7a      	cmp	r3, #122	; 0x7a
 8001262:	d809      	bhi.n	8001278 <prv_check_crc+0xc8>
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 800126a:	3b57      	subs	r3, #87	; 0x57
 800126c:	b2db      	uxtb	r3, r3
 800126e:	b25b      	sxtb	r3, r3
 8001270:	f003 030f 	and.w	r3, r3, #15
 8001274:	b25b      	sxtb	r3, r3
 8001276:	e014      	b.n	80012a2 <prv_check_crc+0xf2>
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 800127e:	2b40      	cmp	r3, #64	; 0x40
 8001280:	d90e      	bls.n	80012a0 <prv_check_crc+0xf0>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8001288:	2b5a      	cmp	r3, #90	; 0x5a
 800128a:	d809      	bhi.n	80012a0 <prv_check_crc+0xf0>
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8001292:	3b37      	subs	r3, #55	; 0x37
 8001294:	b2db      	uxtb	r3, r3
 8001296:	b25b      	sxtb	r3, r3
 8001298:	f003 030f 	and.w	r3, r3, #15
 800129c:	b25b      	sxtb	r3, r3
 800129e:	e000      	b.n	80012a2 <prv_check_crc+0xf2>
 80012a0:	2300      	movs	r3, #0
 80012a2:	4313      	orrs	r3, r2
 80012a4:	b25b      	sxtb	r3, r3
 80012a6:	73fb      	strb	r3, [r7, #15]
    return gh->p.crc_calc == crc;               /* They must match! */
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80012ae:	7bfa      	ldrb	r2, [r7, #15]
 80012b0:	429a      	cmp	r2, r3
 80012b2:	bf0c      	ite	eq
 80012b4:	2301      	moveq	r3, #1
 80012b6:	2300      	movne	r3, #0
 80012b8:	b2db      	uxtb	r3, r3
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3714      	adds	r7, #20
 80012be:	46bd      	mov	sp, r7
 80012c0:	bc80      	pop	{r7}
 80012c2:	4770      	bx	lr

080012c4 <prv_copy_from_tmp_memory>:
 * \brief           Copy temporary memory to user memory
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_copy_from_tmp_memory(lwgps_t* gh) {
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
    if (0) {
#if LWGPS_CFG_STATEMENT_GPGGA
    } else if (gh->p.stat == STAT_GGA) {
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80012d2:	2b01      	cmp	r3, #1
 80012d4:	d136      	bne.n	8001344 <prv_copy_from_tmp_memory+0x80>
        gh->latitude = gh->p.data.gga.latitude;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 80012dc:	6879      	ldr	r1, [r7, #4]
 80012de:	e9c1 2300 	strd	r2, r3, [r1]
        gh->longitude = gh->p.data.gga.longitude;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 80012e8:	6879      	ldr	r1, [r7, #4]
 80012ea:	e9c1 2302 	strd	r2, r3, [r1, #8]
        gh->altitude = gh->p.data.gga.altitude;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 80012f4:	6879      	ldr	r1, [r7, #4]
 80012f6:	e9c1 2304 	strd	r2, r3, [r1, #16]
        gh->geo_sep = gh->p.data.gga.geo_sep;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	; 0xa0
 8001300:	6879      	ldr	r1, [r7, #4]
 8001302:	e9c1 2306 	strd	r2, r3, [r1, #24]
        gh->sats_in_use = gh->p.data.gga.sats_in_use;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	f893 20a8 	ldrb.w	r2, [r3, #168]	; 0xa8
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	f883 2020 	strb.w	r2, [r3, #32]
        gh->fix = gh->p.data.gga.fix;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	f893 20a9 	ldrb.w	r2, [r3, #169]	; 0xa9
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        gh->hours = gh->p.data.gga.hours;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	f893 20aa 	ldrb.w	r2, [r3, #170]	; 0xaa
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
        gh->minutes = gh->p.data.gga.minutes;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	f893 20ab 	ldrb.w	r2, [r3, #171]	; 0xab
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
        gh->seconds = gh->p.data.gga.seconds;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	f893 20ac 	ldrb.w	r2, [r3, #172]	; 0xac
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001342:	e061      	b.n	8001408 <prv_copy_from_tmp_memory+0x144>
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
    } else if (gh->p.stat == STAT_GSA) {
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800134a:	2b02      	cmp	r3, #2
 800134c:	d121      	bne.n	8001392 <prv_copy_from_tmp_memory+0xce>
        gh->dop_h = gh->p.data.gsa.dop_h;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 8001354:	6879      	ldr	r1, [r7, #4]
 8001356:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
        gh->dop_p = gh->p.data.gsa.dop_p;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 8001360:	6879      	ldr	r1, [r7, #4]
 8001362:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
        gh->dop_v = gh->p.data.gsa.dop_v;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 800136c:	6879      	ldr	r1, [r7, #4]
 800136e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
        gh->fix_mode = gh->p.data.gsa.fix_mode;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	f893 20a0 	ldrb.w	r2, [r3, #160]	; 0xa0
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        memcpy(gh->satellites_ids, gh->p.data.gsa.satellites_ids, sizeof(gh->satellites_ids));
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	f103 0041 	add.w	r0, r3, #65	; 0x41
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	33a1      	adds	r3, #161	; 0xa1
 8001388:	220c      	movs	r2, #12
 800138a:	4619      	mov	r1, r3
 800138c:	f002 fbd6 	bl	8003b3c <memcpy>
 8001390:	e03a      	b.n	8001408 <prv_copy_from_tmp_memory+0x144>
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
    } else if (gh->p.stat == STAT_GSV) {
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8001398:	2b03      	cmp	r3, #3
 800139a:	d106      	bne.n	80013aa <prv_copy_from_tmp_memory+0xe6>
        gh->sats_in_view = gh->p.data.gsv.sats_in_view;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 80013a8:	e02e      	b.n	8001408 <prv_copy_from_tmp_memory+0x144>
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
    } else if (gh->p.stat == STAT_RMC) {
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80013b0:	2b04      	cmp	r3, #4
 80013b2:	d129      	bne.n	8001408 <prv_copy_from_tmp_memory+0x144>
        gh->course = gh->p.data.rmc.course;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 80013ba:	6879      	ldr	r1, [r7, #4]
 80013bc:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
        gh->is_valid = gh->p.data.rmc.is_valid;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        gh->speed = gh->p.data.rmc.speed;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 80013d2:	6879      	ldr	r1, [r7, #4]
 80013d4:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
        gh->variation = gh->p.data.rmc.variation;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	; 0xa0
 80013de:	6879      	ldr	r1, [r7, #4]
 80013e0:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
        gh->date = gh->p.data.rmc.date;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f893 2089 	ldrb.w	r2, [r3, #137]	; 0x89
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        gh->month = gh->p.data.rmc.month;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	f893 208a 	ldrb.w	r2, [r3, #138]	; 0x8a
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        gh->year = gh->p.data.rmc.year;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	f893 208b 	ldrb.w	r2, [r3, #139]	; 0x8b
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
        gh->clk_bias = gh->p.data.time.clk_bias;
        gh->clk_drift = gh->p.data.time.clk_drift;
        gh->tp_gran = gh->p.data.time.tp_gran;
#endif /* LWGPS_CFG_STATEMENT_PUBX_TIME */
    }
    return 1;
 8001408:	2301      	movs	r3, #1
}
 800140a:	4618      	mov	r0, r3
 800140c:	3708      	adds	r7, #8
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}

08001412 <lwgps_init>:
 * \brief           Init GPS handle
 * \param[in]       gh: GPS handle structure
 * \return          `1` on success, `0` otherwise
 */
uint8_t
lwgps_init(lwgps_t* gh) {
 8001412:	b580      	push	{r7, lr}
 8001414:	b082      	sub	sp, #8
 8001416:	af00      	add	r7, sp, #0
 8001418:	6078      	str	r0, [r7, #4]
    memset(gh, 0x00, sizeof(*gh));              /* Reset structure */
 800141a:	22b0      	movs	r2, #176	; 0xb0
 800141c:	2100      	movs	r1, #0
 800141e:	6878      	ldr	r0, [r7, #4]
 8001420:	f002 fb9a 	bl	8003b58 <memset>
    return 1;
 8001424:	2301      	movs	r3, #1
}
 8001426:	4618      	mov	r0, r3
 8001428:	3708      	adds	r7, #8
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}

0800142e <lwgps_process>:
 */
uint8_t
#if LWGPS_CFG_STATUS || __DOXYGEN__
lwgps_process(lwgps_t* gh, const void* data, size_t len, lwgps_process_fn evt_fn) {
#else /* LWGPS_CFG_STATUS */
lwgps_process(lwgps_t* gh, const void* data, size_t len) {
 800142e:	b580      	push	{r7, lr}
 8001430:	b086      	sub	sp, #24
 8001432:	af00      	add	r7, sp, #0
 8001434:	60f8      	str	r0, [r7, #12]
 8001436:	60b9      	str	r1, [r7, #8]
 8001438:	607a      	str	r2, [r7, #4]
#endif /* !LWGPS_CFG_STATUS */
    const uint8_t* d = data;
 800143a:	68bb      	ldr	r3, [r7, #8]
 800143c:	617b      	str	r3, [r7, #20]

    for (; len > 0; ++d, --len) {               /* Process all bytes */
 800143e:	e0ad      	b.n	800159c <lwgps_process+0x16e>
        if (*d == '$') {                        /* Check for beginning of NMEA line */
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	2b24      	cmp	r3, #36	; 0x24
 8001446:	d128      	bne.n	800149a <lwgps_process+0x6c>
            memset(&gh->p, 0x00, sizeof(gh->p));/* Reset private memory */
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	3370      	adds	r3, #112	; 0x70
 800144c:	2240      	movs	r2, #64	; 0x40
 800144e:	2100      	movs	r1, #0
 8001450:	4618      	mov	r0, r3
 8001452:	f002 fb81 	bl	8003b58 <memset>
            TERM_ADD(gh, *d);                   /* Add character to term */
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800145c:	2b0b      	cmp	r3, #11
 800145e:	f200 8097 	bhi.w	8001590 <lwgps_process+0x162>
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8001468:	4619      	mov	r1, r3
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	781a      	ldrb	r2, [r3, #0]
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	440b      	add	r3, r1
 8001472:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800147c:	3301      	adds	r3, #1
 800147e:	b2da      	uxtb	r2, r3
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800148c:	461a      	mov	r2, r3
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	4413      	add	r3, r2
 8001492:	2200      	movs	r2, #0
 8001494:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 8001498:	e07a      	b.n	8001590 <lwgps_process+0x162>
        } else if (*d == ',') {                 /* Term separator character */
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	2b2c      	cmp	r3, #44	; 0x2c
 80014a0:	d11d      	bne.n	80014de <lwgps_process+0xb0>
            prv_parse_term(gh);                 /* Parse term we have currently in memory */
 80014a2:	68f8      	ldr	r0, [r7, #12]
 80014a4:	f7ff fbea 	bl	8000c7c <prv_parse_term>
            CRC_ADD(gh, *d);                    /* Add character to CRC computation */
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	f893 2081 	ldrb.w	r2, [r3, #129]	; 0x81
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	4053      	eors	r3, r2
 80014b4:	b2da      	uxtb	r2, r3
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
            TERM_NEXT(gh);                      /* Start with next term */
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	2200      	movs	r2, #0
 80014c0:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	2200      	movs	r2, #0
 80014c8:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 80014d2:	3301      	adds	r3, #1
 80014d4:	b2da      	uxtb	r2, r3
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
 80014dc:	e058      	b.n	8001590 <lwgps_process+0x162>
        } else if (*d == '*') {                 /* Start indicates end of data for CRC computation */
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	2b2a      	cmp	r3, #42	; 0x2a
 80014e4:	d117      	bne.n	8001516 <lwgps_process+0xe8>
            prv_parse_term(gh);                 /* Parse term we have currently in memory */
 80014e6:	68f8      	ldr	r0, [r7, #12]
 80014e8:	f7ff fbc8 	bl	8000c7c <prv_parse_term>
            gh->p.star = 1;                     /* STAR detected */
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	2201      	movs	r2, #1
 80014f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
            TERM_NEXT(gh);                      /* Start with next term */
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	2200      	movs	r2, #0
 80014f8:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	2200      	movs	r2, #0
 8001500:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800150a:	3301      	adds	r3, #1
 800150c:	b2da      	uxtb	r2, r3
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
 8001514:	e03c      	b.n	8001590 <lwgps_process+0x162>
        } else if (*d == '\r') {
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	2b0d      	cmp	r3, #13
 800151c:	d109      	bne.n	8001532 <lwgps_process+0x104>
            if (prv_check_crc(gh)) {            /* Check for CRC result */
 800151e:	68f8      	ldr	r0, [r7, #12]
 8001520:	f7ff fe46 	bl	80011b0 <prv_check_crc>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d032      	beq.n	8001590 <lwgps_process+0x162>
                /* CRC is OK, in theory we can copy data from statements to user data */
                prv_copy_from_tmp_memory(gh);   /* Copy memory from temporary to user memory */
 800152a:	68f8      	ldr	r0, [r7, #12]
 800152c:	f7ff feca 	bl	80012c4 <prv_copy_from_tmp_memory>
 8001530:	e02e      	b.n	8001590 <lwgps_process+0x162>
            } else if (evt_fn != NULL) {
                evt_fn(STAT_CHECKSUM_FAIL);
#endif /* LWGPS_CFG_STATUS */
            }
        } else {
            if (!gh->p.star) {                  /* Add to CRC only if star not yet detected */
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8001538:	2b00      	cmp	r3, #0
 800153a:	d109      	bne.n	8001550 <lwgps_process+0x122>
                CRC_ADD(gh, *d);                /* Add to CRC */
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	f893 2081 	ldrb.w	r2, [r3, #129]	; 0x81
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	781b      	ldrb	r3, [r3, #0]
 8001546:	4053      	eors	r3, r2
 8001548:	b2da      	uxtb	r2, r3
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
            }
            TERM_ADD(gh, *d);                   /* Add character to term */
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8001556:	2b0b      	cmp	r3, #11
 8001558:	d81a      	bhi.n	8001590 <lwgps_process+0x162>
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8001560:	4619      	mov	r1, r3
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	781a      	ldrb	r2, [r3, #0]
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	440b      	add	r3, r1
 800156a:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8001574:	3301      	adds	r3, #1
 8001576:	b2da      	uxtb	r2, r3
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8001584:	461a      	mov	r2, r3
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	4413      	add	r3, r2
 800158a:	2200      	movs	r2, #0
 800158c:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
    for (; len > 0; ++d, --len) {               /* Process all bytes */
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	3301      	adds	r3, #1
 8001594:	617b      	str	r3, [r7, #20]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	3b01      	subs	r3, #1
 800159a:	607b      	str	r3, [r7, #4]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	f47f af4e 	bne.w	8001440 <lwgps_process+0x12>
        }
    }
    return 1;
 80015a4:	2301      	movs	r3, #1
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3718      	adds	r7, #24
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
	...

080015b0 <HAL_UART_RxCpltCallback>:
uint8_t rx_buffer[128];
uint8_t rx_index = 0;
uint8_t rx_data = 0;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
	if(huart == &huart3) {
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	4a1b      	ldr	r2, [pc, #108]	; (8001628 <HAL_UART_RxCpltCallback+0x78>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d12f      	bne.n	8001620 <HAL_UART_RxCpltCallback+0x70>
		if(rx_data != '\n' && rx_index < sizeof(rx_buffer)) {
 80015c0:	4b1a      	ldr	r3, [pc, #104]	; (800162c <HAL_UART_RxCpltCallback+0x7c>)
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	2b0a      	cmp	r3, #10
 80015c6:	d010      	beq.n	80015ea <HAL_UART_RxCpltCallback+0x3a>
 80015c8:	4b19      	ldr	r3, [pc, #100]	; (8001630 <HAL_UART_RxCpltCallback+0x80>)
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	b25b      	sxtb	r3, r3
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	db0b      	blt.n	80015ea <HAL_UART_RxCpltCallback+0x3a>
			rx_buffer[rx_index++] = rx_data;
 80015d2:	4b17      	ldr	r3, [pc, #92]	; (8001630 <HAL_UART_RxCpltCallback+0x80>)
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	1c5a      	adds	r2, r3, #1
 80015d8:	b2d1      	uxtb	r1, r2
 80015da:	4a15      	ldr	r2, [pc, #84]	; (8001630 <HAL_UART_RxCpltCallback+0x80>)
 80015dc:	7011      	strb	r1, [r2, #0]
 80015de:	461a      	mov	r2, r3
 80015e0:	4b12      	ldr	r3, [pc, #72]	; (800162c <HAL_UART_RxCpltCallback+0x7c>)
 80015e2:	7819      	ldrb	r1, [r3, #0]
 80015e4:	4b13      	ldr	r3, [pc, #76]	; (8001634 <HAL_UART_RxCpltCallback+0x84>)
 80015e6:	5499      	strb	r1, [r3, r2]
 80015e8:	e00d      	b.n	8001606 <HAL_UART_RxCpltCallback+0x56>
		} else {
			lwgps_process(&gps, rx_buffer, rx_index+1);
 80015ea:	4b11      	ldr	r3, [pc, #68]	; (8001630 <HAL_UART_RxCpltCallback+0x80>)
 80015ec:	781b      	ldrb	r3, [r3, #0]
 80015ee:	3301      	adds	r3, #1
 80015f0:	461a      	mov	r2, r3
 80015f2:	4910      	ldr	r1, [pc, #64]	; (8001634 <HAL_UART_RxCpltCallback+0x84>)
 80015f4:	4810      	ldr	r0, [pc, #64]	; (8001638 <HAL_UART_RxCpltCallback+0x88>)
 80015f6:	f7ff ff1a 	bl	800142e <lwgps_process>
			rx_index = 0;
 80015fa:	4b0d      	ldr	r3, [pc, #52]	; (8001630 <HAL_UART_RxCpltCallback+0x80>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	701a      	strb	r2, [r3, #0]
			rx_data = 0;
 8001600:	4b0a      	ldr	r3, [pc, #40]	; (800162c <HAL_UART_RxCpltCallback+0x7c>)
 8001602:	2200      	movs	r2, #0
 8001604:	701a      	strb	r2, [r3, #0]
		}
		sayac++;
 8001606:	4b0d      	ldr	r3, [pc, #52]	; (800163c <HAL_UART_RxCpltCallback+0x8c>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	3301      	adds	r3, #1
 800160c:	4a0b      	ldr	r2, [pc, #44]	; (800163c <HAL_UART_RxCpltCallback+0x8c>)
 800160e:	6013      	str	r3, [r2, #0]
		gps_ok = true;
 8001610:	4b0b      	ldr	r3, [pc, #44]	; (8001640 <HAL_UART_RxCpltCallback+0x90>)
 8001612:	2201      	movs	r2, #1
 8001614:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_DMA(&huart3, &rx_data, 1);
 8001616:	2201      	movs	r2, #1
 8001618:	4904      	ldr	r1, [pc, #16]	; (800162c <HAL_UART_RxCpltCallback+0x7c>)
 800161a:	4803      	ldr	r0, [pc, #12]	; (8001628 <HAL_UART_RxCpltCallback+0x78>)
 800161c:	f001 fd5b 	bl	80030d6 <HAL_UART_Receive_DMA>
	}
}
 8001620:	bf00      	nop
 8001622:	3708      	adds	r7, #8
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	20000240 	.word	0x20000240
 800162c:	20000405 	.word	0x20000405
 8001630:	20000404 	.word	0x20000404
 8001634:	20000384 	.word	0x20000384
 8001638:	200002d0 	.word	0x200002d0
 800163c:	200002c8 	.word	0x200002c8
 8001640:	20000380 	.word	0x20000380

08001644 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001648:	f000 fb34 	bl	8001cb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800164c:	f000 f818 	bl	8001680 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001650:	f000 f8c4 	bl	80017dc <MX_GPIO_Init>
  MX_DMA_Init();
 8001654:	f000 f8a4 	bl	80017a0 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8001658:	f000 f878 	bl	800174c <MX_USART3_UART_Init>
  MX_USART1_UART_Init();
 800165c:	f000 f84c 	bl	80016f8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  lwgps_init(&gps);
 8001660:	4804      	ldr	r0, [pc, #16]	; (8001674 <main+0x30>)
 8001662:	f7ff fed6 	bl	8001412 <lwgps_init>
  HAL_UART_Receive_DMA(&huart3, &rx_data, 1);
 8001666:	2201      	movs	r2, #1
 8001668:	4903      	ldr	r1, [pc, #12]	; (8001678 <main+0x34>)
 800166a:	4804      	ldr	r0, [pc, #16]	; (800167c <main+0x38>)
 800166c:	f001 fd33 	bl	80030d6 <HAL_UART_Receive_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001670:	e7fe      	b.n	8001670 <main+0x2c>
 8001672:	bf00      	nop
 8001674:	200002d0 	.word	0x200002d0
 8001678:	20000405 	.word	0x20000405
 800167c:	20000240 	.word	0x20000240

08001680 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b090      	sub	sp, #64	; 0x40
 8001684:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001686:	f107 0318 	add.w	r3, r7, #24
 800168a:	2228      	movs	r2, #40	; 0x28
 800168c:	2100      	movs	r1, #0
 800168e:	4618      	mov	r0, r3
 8001690:	f002 fa62 	bl	8003b58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001694:	1d3b      	adds	r3, r7, #4
 8001696:	2200      	movs	r2, #0
 8001698:	601a      	str	r2, [r3, #0]
 800169a:	605a      	str	r2, [r3, #4]
 800169c:	609a      	str	r2, [r3, #8]
 800169e:	60da      	str	r2, [r3, #12]
 80016a0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016a2:	2302      	movs	r3, #2
 80016a4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016a6:	2301      	movs	r3, #1
 80016a8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016aa:	2310      	movs	r3, #16
 80016ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80016ae:	2300      	movs	r3, #0
 80016b0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016b2:	f107 0318 	add.w	r3, r7, #24
 80016b6:	4618      	mov	r0, r3
 80016b8:	f001 f8a6 	bl	8002808 <HAL_RCC_OscConfig>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80016c2:	f000 f8cb 	bl	800185c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016c6:	230f      	movs	r3, #15
 80016c8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80016ca:	2300      	movs	r3, #0
 80016cc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016ce:	2300      	movs	r3, #0
 80016d0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80016d2:	2300      	movs	r3, #0
 80016d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016d6:	2300      	movs	r3, #0
 80016d8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80016da:	1d3b      	adds	r3, r7, #4
 80016dc:	2100      	movs	r1, #0
 80016de:	4618      	mov	r0, r3
 80016e0:	f001 fb14 	bl	8002d0c <HAL_RCC_ClockConfig>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80016ea:	f000 f8b7 	bl	800185c <Error_Handler>
  }
}
 80016ee:	bf00      	nop
 80016f0:	3740      	adds	r7, #64	; 0x40
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
	...

080016f8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80016fc:	4b11      	ldr	r3, [pc, #68]	; (8001744 <MX_USART1_UART_Init+0x4c>)
 80016fe:	4a12      	ldr	r2, [pc, #72]	; (8001748 <MX_USART1_UART_Init+0x50>)
 8001700:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001702:	4b10      	ldr	r3, [pc, #64]	; (8001744 <MX_USART1_UART_Init+0x4c>)
 8001704:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001708:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800170a:	4b0e      	ldr	r3, [pc, #56]	; (8001744 <MX_USART1_UART_Init+0x4c>)
 800170c:	2200      	movs	r2, #0
 800170e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001710:	4b0c      	ldr	r3, [pc, #48]	; (8001744 <MX_USART1_UART_Init+0x4c>)
 8001712:	2200      	movs	r2, #0
 8001714:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001716:	4b0b      	ldr	r3, [pc, #44]	; (8001744 <MX_USART1_UART_Init+0x4c>)
 8001718:	2200      	movs	r2, #0
 800171a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800171c:	4b09      	ldr	r3, [pc, #36]	; (8001744 <MX_USART1_UART_Init+0x4c>)
 800171e:	220c      	movs	r2, #12
 8001720:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001722:	4b08      	ldr	r3, [pc, #32]	; (8001744 <MX_USART1_UART_Init+0x4c>)
 8001724:	2200      	movs	r2, #0
 8001726:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001728:	4b06      	ldr	r3, [pc, #24]	; (8001744 <MX_USART1_UART_Init+0x4c>)
 800172a:	2200      	movs	r2, #0
 800172c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800172e:	4805      	ldr	r0, [pc, #20]	; (8001744 <MX_USART1_UART_Init+0x4c>)
 8001730:	f001 fc84 	bl	800303c <HAL_UART_Init>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800173a:	f000 f88f 	bl	800185c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800173e:	bf00      	nop
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	200001fc 	.word	0x200001fc
 8001748:	40013800 	.word	0x40013800

0800174c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001750:	4b11      	ldr	r3, [pc, #68]	; (8001798 <MX_USART3_UART_Init+0x4c>)
 8001752:	4a12      	ldr	r2, [pc, #72]	; (800179c <MX_USART3_UART_Init+0x50>)
 8001754:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001756:	4b10      	ldr	r3, [pc, #64]	; (8001798 <MX_USART3_UART_Init+0x4c>)
 8001758:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800175c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800175e:	4b0e      	ldr	r3, [pc, #56]	; (8001798 <MX_USART3_UART_Init+0x4c>)
 8001760:	2200      	movs	r2, #0
 8001762:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001764:	4b0c      	ldr	r3, [pc, #48]	; (8001798 <MX_USART3_UART_Init+0x4c>)
 8001766:	2200      	movs	r2, #0
 8001768:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800176a:	4b0b      	ldr	r3, [pc, #44]	; (8001798 <MX_USART3_UART_Init+0x4c>)
 800176c:	2200      	movs	r2, #0
 800176e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001770:	4b09      	ldr	r3, [pc, #36]	; (8001798 <MX_USART3_UART_Init+0x4c>)
 8001772:	220c      	movs	r2, #12
 8001774:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001776:	4b08      	ldr	r3, [pc, #32]	; (8001798 <MX_USART3_UART_Init+0x4c>)
 8001778:	2200      	movs	r2, #0
 800177a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800177c:	4b06      	ldr	r3, [pc, #24]	; (8001798 <MX_USART3_UART_Init+0x4c>)
 800177e:	2200      	movs	r2, #0
 8001780:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001782:	4805      	ldr	r0, [pc, #20]	; (8001798 <MX_USART3_UART_Init+0x4c>)
 8001784:	f001 fc5a 	bl	800303c <HAL_UART_Init>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d001      	beq.n	8001792 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800178e:	f000 f865 	bl	800185c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001792:	bf00      	nop
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	20000240 	.word	0x20000240
 800179c:	40004800 	.word	0x40004800

080017a0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80017a6:	4b0c      	ldr	r3, [pc, #48]	; (80017d8 <MX_DMA_Init+0x38>)
 80017a8:	695b      	ldr	r3, [r3, #20]
 80017aa:	4a0b      	ldr	r2, [pc, #44]	; (80017d8 <MX_DMA_Init+0x38>)
 80017ac:	f043 0301 	orr.w	r3, r3, #1
 80017b0:	6153      	str	r3, [r2, #20]
 80017b2:	4b09      	ldr	r3, [pc, #36]	; (80017d8 <MX_DMA_Init+0x38>)
 80017b4:	695b      	ldr	r3, [r3, #20]
 80017b6:	f003 0301 	and.w	r3, r3, #1
 80017ba:	607b      	str	r3, [r7, #4]
 80017bc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80017be:	2200      	movs	r2, #0
 80017c0:	2100      	movs	r1, #0
 80017c2:	200d      	movs	r0, #13
 80017c4:	f000 fbaf 	bl	8001f26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80017c8:	200d      	movs	r0, #13
 80017ca:	f000 fbc8 	bl	8001f5e <HAL_NVIC_EnableIRQ>

}
 80017ce:	bf00      	nop
 80017d0:	3708      	adds	r7, #8
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	40021000 	.word	0x40021000

080017dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b086      	sub	sp, #24
 80017e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e2:	f107 0308 	add.w	r3, r7, #8
 80017e6:	2200      	movs	r2, #0
 80017e8:	601a      	str	r2, [r3, #0]
 80017ea:	605a      	str	r2, [r3, #4]
 80017ec:	609a      	str	r2, [r3, #8]
 80017ee:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017f0:	4b18      	ldr	r3, [pc, #96]	; (8001854 <MX_GPIO_Init+0x78>)
 80017f2:	699b      	ldr	r3, [r3, #24]
 80017f4:	4a17      	ldr	r2, [pc, #92]	; (8001854 <MX_GPIO_Init+0x78>)
 80017f6:	f043 0308 	orr.w	r3, r3, #8
 80017fa:	6193      	str	r3, [r2, #24]
 80017fc:	4b15      	ldr	r3, [pc, #84]	; (8001854 <MX_GPIO_Init+0x78>)
 80017fe:	699b      	ldr	r3, [r3, #24]
 8001800:	f003 0308 	and.w	r3, r3, #8
 8001804:	607b      	str	r3, [r7, #4]
 8001806:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001808:	4b12      	ldr	r3, [pc, #72]	; (8001854 <MX_GPIO_Init+0x78>)
 800180a:	699b      	ldr	r3, [r3, #24]
 800180c:	4a11      	ldr	r2, [pc, #68]	; (8001854 <MX_GPIO_Init+0x78>)
 800180e:	f043 0304 	orr.w	r3, r3, #4
 8001812:	6193      	str	r3, [r2, #24]
 8001814:	4b0f      	ldr	r3, [pc, #60]	; (8001854 <MX_GPIO_Init+0x78>)
 8001816:	699b      	ldr	r3, [r3, #24]
 8001818:	f003 0304 	and.w	r3, r3, #4
 800181c:	603b      	str	r3, [r7, #0]
 800181e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8001820:	2200      	movs	r2, #0
 8001822:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8001826:	480c      	ldr	r0, [pc, #48]	; (8001858 <MX_GPIO_Init+0x7c>)
 8001828:	f000 ffd6 	bl	80027d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB13 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 800182c:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001830:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001832:	2301      	movs	r3, #1
 8001834:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001836:	2300      	movs	r3, #0
 8001838:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800183a:	2302      	movs	r3, #2
 800183c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800183e:	f107 0308 	add.w	r3, r7, #8
 8001842:	4619      	mov	r1, r3
 8001844:	4804      	ldr	r0, [pc, #16]	; (8001858 <MX_GPIO_Init+0x7c>)
 8001846:	f000 fe43 	bl	80024d0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800184a:	bf00      	nop
 800184c:	3718      	adds	r7, #24
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	40021000 	.word	0x40021000
 8001858:	40010c00 	.word	0x40010c00

0800185c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001860:	b672      	cpsid	i
}
 8001862:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001864:	e7fe      	b.n	8001864 <Error_Handler+0x8>
	...

08001868 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001868:	b480      	push	{r7}
 800186a:	b085      	sub	sp, #20
 800186c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800186e:	4b15      	ldr	r3, [pc, #84]	; (80018c4 <HAL_MspInit+0x5c>)
 8001870:	699b      	ldr	r3, [r3, #24]
 8001872:	4a14      	ldr	r2, [pc, #80]	; (80018c4 <HAL_MspInit+0x5c>)
 8001874:	f043 0301 	orr.w	r3, r3, #1
 8001878:	6193      	str	r3, [r2, #24]
 800187a:	4b12      	ldr	r3, [pc, #72]	; (80018c4 <HAL_MspInit+0x5c>)
 800187c:	699b      	ldr	r3, [r3, #24]
 800187e:	f003 0301 	and.w	r3, r3, #1
 8001882:	60bb      	str	r3, [r7, #8]
 8001884:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001886:	4b0f      	ldr	r3, [pc, #60]	; (80018c4 <HAL_MspInit+0x5c>)
 8001888:	69db      	ldr	r3, [r3, #28]
 800188a:	4a0e      	ldr	r2, [pc, #56]	; (80018c4 <HAL_MspInit+0x5c>)
 800188c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001890:	61d3      	str	r3, [r2, #28]
 8001892:	4b0c      	ldr	r3, [pc, #48]	; (80018c4 <HAL_MspInit+0x5c>)
 8001894:	69db      	ldr	r3, [r3, #28]
 8001896:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800189a:	607b      	str	r3, [r7, #4]
 800189c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800189e:	4b0a      	ldr	r3, [pc, #40]	; (80018c8 <HAL_MspInit+0x60>)
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	60fb      	str	r3, [r7, #12]
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80018aa:	60fb      	str	r3, [r7, #12]
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80018b2:	60fb      	str	r3, [r7, #12]
 80018b4:	4a04      	ldr	r2, [pc, #16]	; (80018c8 <HAL_MspInit+0x60>)
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018ba:	bf00      	nop
 80018bc:	3714      	adds	r7, #20
 80018be:	46bd      	mov	sp, r7
 80018c0:	bc80      	pop	{r7}
 80018c2:	4770      	bx	lr
 80018c4:	40021000 	.word	0x40021000
 80018c8:	40010000 	.word	0x40010000

080018cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b08a      	sub	sp, #40	; 0x28
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d4:	f107 0318 	add.w	r3, r7, #24
 80018d8:	2200      	movs	r2, #0
 80018da:	601a      	str	r2, [r3, #0]
 80018dc:	605a      	str	r2, [r3, #4]
 80018de:	609a      	str	r2, [r3, #8]
 80018e0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a53      	ldr	r2, [pc, #332]	; (8001a34 <HAL_UART_MspInit+0x168>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d13a      	bne.n	8001962 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80018ec:	4b52      	ldr	r3, [pc, #328]	; (8001a38 <HAL_UART_MspInit+0x16c>)
 80018ee:	699b      	ldr	r3, [r3, #24]
 80018f0:	4a51      	ldr	r2, [pc, #324]	; (8001a38 <HAL_UART_MspInit+0x16c>)
 80018f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018f6:	6193      	str	r3, [r2, #24]
 80018f8:	4b4f      	ldr	r3, [pc, #316]	; (8001a38 <HAL_UART_MspInit+0x16c>)
 80018fa:	699b      	ldr	r3, [r3, #24]
 80018fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001900:	617b      	str	r3, [r7, #20]
 8001902:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001904:	4b4c      	ldr	r3, [pc, #304]	; (8001a38 <HAL_UART_MspInit+0x16c>)
 8001906:	699b      	ldr	r3, [r3, #24]
 8001908:	4a4b      	ldr	r2, [pc, #300]	; (8001a38 <HAL_UART_MspInit+0x16c>)
 800190a:	f043 0304 	orr.w	r3, r3, #4
 800190e:	6193      	str	r3, [r2, #24]
 8001910:	4b49      	ldr	r3, [pc, #292]	; (8001a38 <HAL_UART_MspInit+0x16c>)
 8001912:	699b      	ldr	r3, [r3, #24]
 8001914:	f003 0304 	and.w	r3, r3, #4
 8001918:	613b      	str	r3, [r7, #16]
 800191a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800191c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001920:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001922:	2302      	movs	r3, #2
 8001924:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001926:	2303      	movs	r3, #3
 8001928:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800192a:	f107 0318 	add.w	r3, r7, #24
 800192e:	4619      	mov	r1, r3
 8001930:	4842      	ldr	r0, [pc, #264]	; (8001a3c <HAL_UART_MspInit+0x170>)
 8001932:	f000 fdcd 	bl	80024d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001936:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800193a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800193c:	2300      	movs	r3, #0
 800193e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001940:	2300      	movs	r3, #0
 8001942:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001944:	f107 0318 	add.w	r3, r7, #24
 8001948:	4619      	mov	r1, r3
 800194a:	483c      	ldr	r0, [pc, #240]	; (8001a3c <HAL_UART_MspInit+0x170>)
 800194c:	f000 fdc0 	bl	80024d0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001950:	2200      	movs	r2, #0
 8001952:	2100      	movs	r1, #0
 8001954:	2025      	movs	r0, #37	; 0x25
 8001956:	f000 fae6 	bl	8001f26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800195a:	2025      	movs	r0, #37	; 0x25
 800195c:	f000 faff 	bl	8001f5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001960:	e064      	b.n	8001a2c <HAL_UART_MspInit+0x160>
  else if(huart->Instance==USART3)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a36      	ldr	r2, [pc, #216]	; (8001a40 <HAL_UART_MspInit+0x174>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d15f      	bne.n	8001a2c <HAL_UART_MspInit+0x160>
    __HAL_RCC_USART3_CLK_ENABLE();
 800196c:	4b32      	ldr	r3, [pc, #200]	; (8001a38 <HAL_UART_MspInit+0x16c>)
 800196e:	69db      	ldr	r3, [r3, #28]
 8001970:	4a31      	ldr	r2, [pc, #196]	; (8001a38 <HAL_UART_MspInit+0x16c>)
 8001972:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001976:	61d3      	str	r3, [r2, #28]
 8001978:	4b2f      	ldr	r3, [pc, #188]	; (8001a38 <HAL_UART_MspInit+0x16c>)
 800197a:	69db      	ldr	r3, [r3, #28]
 800197c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001980:	60fb      	str	r3, [r7, #12]
 8001982:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001984:	4b2c      	ldr	r3, [pc, #176]	; (8001a38 <HAL_UART_MspInit+0x16c>)
 8001986:	699b      	ldr	r3, [r3, #24]
 8001988:	4a2b      	ldr	r2, [pc, #172]	; (8001a38 <HAL_UART_MspInit+0x16c>)
 800198a:	f043 0308 	orr.w	r3, r3, #8
 800198e:	6193      	str	r3, [r2, #24]
 8001990:	4b29      	ldr	r3, [pc, #164]	; (8001a38 <HAL_UART_MspInit+0x16c>)
 8001992:	699b      	ldr	r3, [r3, #24]
 8001994:	f003 0308 	and.w	r3, r3, #8
 8001998:	60bb      	str	r3, [r7, #8]
 800199a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800199c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a2:	2302      	movs	r3, #2
 80019a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019a6:	2303      	movs	r3, #3
 80019a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019aa:	f107 0318 	add.w	r3, r7, #24
 80019ae:	4619      	mov	r1, r3
 80019b0:	4824      	ldr	r0, [pc, #144]	; (8001a44 <HAL_UART_MspInit+0x178>)
 80019b2:	f000 fd8d 	bl	80024d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80019b6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80019ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019bc:	2300      	movs	r3, #0
 80019be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c0:	2300      	movs	r3, #0
 80019c2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019c4:	f107 0318 	add.w	r3, r7, #24
 80019c8:	4619      	mov	r1, r3
 80019ca:	481e      	ldr	r0, [pc, #120]	; (8001a44 <HAL_UART_MspInit+0x178>)
 80019cc:	f000 fd80 	bl	80024d0 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 80019d0:	4b1d      	ldr	r3, [pc, #116]	; (8001a48 <HAL_UART_MspInit+0x17c>)
 80019d2:	4a1e      	ldr	r2, [pc, #120]	; (8001a4c <HAL_UART_MspInit+0x180>)
 80019d4:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80019d6:	4b1c      	ldr	r3, [pc, #112]	; (8001a48 <HAL_UART_MspInit+0x17c>)
 80019d8:	2200      	movs	r2, #0
 80019da:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019dc:	4b1a      	ldr	r3, [pc, #104]	; (8001a48 <HAL_UART_MspInit+0x17c>)
 80019de:	2200      	movs	r2, #0
 80019e0:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80019e2:	4b19      	ldr	r3, [pc, #100]	; (8001a48 <HAL_UART_MspInit+0x17c>)
 80019e4:	2280      	movs	r2, #128	; 0x80
 80019e6:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80019e8:	4b17      	ldr	r3, [pc, #92]	; (8001a48 <HAL_UART_MspInit+0x17c>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80019ee:	4b16      	ldr	r3, [pc, #88]	; (8001a48 <HAL_UART_MspInit+0x17c>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80019f4:	4b14      	ldr	r3, [pc, #80]	; (8001a48 <HAL_UART_MspInit+0x17c>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80019fa:	4b13      	ldr	r3, [pc, #76]	; (8001a48 <HAL_UART_MspInit+0x17c>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001a00:	4811      	ldr	r0, [pc, #68]	; (8001a48 <HAL_UART_MspInit+0x17c>)
 8001a02:	f000 fac7 	bl	8001f94 <HAL_DMA_Init>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d001      	beq.n	8001a10 <HAL_UART_MspInit+0x144>
      Error_Handler();
 8001a0c:	f7ff ff26 	bl	800185c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	4a0d      	ldr	r2, [pc, #52]	; (8001a48 <HAL_UART_MspInit+0x17c>)
 8001a14:	639a      	str	r2, [r3, #56]	; 0x38
 8001a16:	4a0c      	ldr	r2, [pc, #48]	; (8001a48 <HAL_UART_MspInit+0x17c>)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	2100      	movs	r1, #0
 8001a20:	2027      	movs	r0, #39	; 0x27
 8001a22:	f000 fa80 	bl	8001f26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001a26:	2027      	movs	r0, #39	; 0x27
 8001a28:	f000 fa99 	bl	8001f5e <HAL_NVIC_EnableIRQ>
}
 8001a2c:	bf00      	nop
 8001a2e:	3728      	adds	r7, #40	; 0x28
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	40013800 	.word	0x40013800
 8001a38:	40021000 	.word	0x40021000
 8001a3c:	40010800 	.word	0x40010800
 8001a40:	40004800 	.word	0x40004800
 8001a44:	40010c00 	.word	0x40010c00
 8001a48:	20000284 	.word	0x20000284
 8001a4c:	40020030 	.word	0x40020030

08001a50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a54:	e7fe      	b.n	8001a54 <NMI_Handler+0x4>

08001a56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a56:	b480      	push	{r7}
 8001a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a5a:	e7fe      	b.n	8001a5a <HardFault_Handler+0x4>

08001a5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a60:	e7fe      	b.n	8001a60 <MemManage_Handler+0x4>

08001a62 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a62:	b480      	push	{r7}
 8001a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a66:	e7fe      	b.n	8001a66 <BusFault_Handler+0x4>

08001a68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a6c:	e7fe      	b.n	8001a6c <UsageFault_Handler+0x4>

08001a6e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a6e:	b480      	push	{r7}
 8001a70:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a72:	bf00      	nop
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bc80      	pop	{r7}
 8001a78:	4770      	bx	lr

08001a7a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a7a:	b480      	push	{r7}
 8001a7c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a7e:	bf00      	nop
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bc80      	pop	{r7}
 8001a84:	4770      	bx	lr

08001a86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a86:	b480      	push	{r7}
 8001a88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a8a:	bf00      	nop
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bc80      	pop	{r7}
 8001a90:	4770      	bx	lr

08001a92 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a92:	b580      	push	{r7, lr}
 8001a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a96:	f000 f953 	bl	8001d40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a9a:	bf00      	nop
 8001a9c:	bd80      	pop	{r7, pc}
	...

08001aa0 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001aa4:	4802      	ldr	r0, [pc, #8]	; (8001ab0 <DMA1_Channel3_IRQHandler+0x10>)
 8001aa6:	f000 fbdf 	bl	8002268 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001aaa:	bf00      	nop
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	20000284 	.word	0x20000284

08001ab4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001ab8:	4802      	ldr	r0, [pc, #8]	; (8001ac4 <USART1_IRQHandler+0x10>)
 8001aba:	f001 fb3d 	bl	8003138 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001abe:	bf00      	nop
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	200001fc 	.word	0x200001fc

08001ac8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001acc:	4802      	ldr	r0, [pc, #8]	; (8001ad8 <USART3_IRQHandler+0x10>)
 8001ace:	f001 fb33 	bl	8003138 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001ad2:	bf00      	nop
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	20000240 	.word	0x20000240

08001adc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
  return 1;
 8001ae0:	2301      	movs	r3, #1
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bc80      	pop	{r7}
 8001ae8:	4770      	bx	lr

08001aea <_kill>:

int _kill(int pid, int sig)
{
 8001aea:	b580      	push	{r7, lr}
 8001aec:	b082      	sub	sp, #8
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	6078      	str	r0, [r7, #4]
 8001af2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001af4:	f001 fff8 	bl	8003ae8 <__errno>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2216      	movs	r2, #22
 8001afc:	601a      	str	r2, [r3, #0]
  return -1;
 8001afe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3708      	adds	r7, #8
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}

08001b0a <_exit>:

void _exit (int status)
{
 8001b0a:	b580      	push	{r7, lr}
 8001b0c:	b082      	sub	sp, #8
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b12:	f04f 31ff 	mov.w	r1, #4294967295
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f7ff ffe7 	bl	8001aea <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b1c:	e7fe      	b.n	8001b1c <_exit+0x12>

08001b1e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b1e:	b580      	push	{r7, lr}
 8001b20:	b086      	sub	sp, #24
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	60f8      	str	r0, [r7, #12]
 8001b26:	60b9      	str	r1, [r7, #8]
 8001b28:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	617b      	str	r3, [r7, #20]
 8001b2e:	e00a      	b.n	8001b46 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b30:	f3af 8000 	nop.w
 8001b34:	4601      	mov	r1, r0
 8001b36:	68bb      	ldr	r3, [r7, #8]
 8001b38:	1c5a      	adds	r2, r3, #1
 8001b3a:	60ba      	str	r2, [r7, #8]
 8001b3c:	b2ca      	uxtb	r2, r1
 8001b3e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	3301      	adds	r3, #1
 8001b44:	617b      	str	r3, [r7, #20]
 8001b46:	697a      	ldr	r2, [r7, #20]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	429a      	cmp	r2, r3
 8001b4c:	dbf0      	blt.n	8001b30 <_read+0x12>
  }

  return len;
 8001b4e:	687b      	ldr	r3, [r7, #4]
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	3718      	adds	r7, #24
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}

08001b58 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b086      	sub	sp, #24
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	60f8      	str	r0, [r7, #12]
 8001b60:	60b9      	str	r1, [r7, #8]
 8001b62:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b64:	2300      	movs	r3, #0
 8001b66:	617b      	str	r3, [r7, #20]
 8001b68:	e009      	b.n	8001b7e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	1c5a      	adds	r2, r3, #1
 8001b6e:	60ba      	str	r2, [r7, #8]
 8001b70:	781b      	ldrb	r3, [r3, #0]
 8001b72:	4618      	mov	r0, r3
 8001b74:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	3301      	adds	r3, #1
 8001b7c:	617b      	str	r3, [r7, #20]
 8001b7e:	697a      	ldr	r2, [r7, #20]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	429a      	cmp	r2, r3
 8001b84:	dbf1      	blt.n	8001b6a <_write+0x12>
  }
  return len;
 8001b86:	687b      	ldr	r3, [r7, #4]
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	3718      	adds	r7, #24
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}

08001b90 <_close>:

int _close(int file)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b98:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	370c      	adds	r7, #12
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bc80      	pop	{r7}
 8001ba4:	4770      	bx	lr

08001ba6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ba6:	b480      	push	{r7}
 8001ba8:	b083      	sub	sp, #12
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	6078      	str	r0, [r7, #4]
 8001bae:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001bb6:	605a      	str	r2, [r3, #4]
  return 0;
 8001bb8:	2300      	movs	r3, #0
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	370c      	adds	r7, #12
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bc80      	pop	{r7}
 8001bc2:	4770      	bx	lr

08001bc4 <_isatty>:

int _isatty(int file)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001bcc:	2301      	movs	r3, #1
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	370c      	adds	r7, #12
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bc80      	pop	{r7}
 8001bd6:	4770      	bx	lr

08001bd8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b085      	sub	sp, #20
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	60f8      	str	r0, [r7, #12]
 8001be0:	60b9      	str	r1, [r7, #8]
 8001be2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001be4:	2300      	movs	r3, #0
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3714      	adds	r7, #20
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bc80      	pop	{r7}
 8001bee:	4770      	bx	lr

08001bf0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b086      	sub	sp, #24
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bf8:	4a14      	ldr	r2, [pc, #80]	; (8001c4c <_sbrk+0x5c>)
 8001bfa:	4b15      	ldr	r3, [pc, #84]	; (8001c50 <_sbrk+0x60>)
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c04:	4b13      	ldr	r3, [pc, #76]	; (8001c54 <_sbrk+0x64>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d102      	bne.n	8001c12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c0c:	4b11      	ldr	r3, [pc, #68]	; (8001c54 <_sbrk+0x64>)
 8001c0e:	4a12      	ldr	r2, [pc, #72]	; (8001c58 <_sbrk+0x68>)
 8001c10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c12:	4b10      	ldr	r3, [pc, #64]	; (8001c54 <_sbrk+0x64>)
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	4413      	add	r3, r2
 8001c1a:	693a      	ldr	r2, [r7, #16]
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d207      	bcs.n	8001c30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c20:	f001 ff62 	bl	8003ae8 <__errno>
 8001c24:	4603      	mov	r3, r0
 8001c26:	220c      	movs	r2, #12
 8001c28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c2a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c2e:	e009      	b.n	8001c44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c30:	4b08      	ldr	r3, [pc, #32]	; (8001c54 <_sbrk+0x64>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c36:	4b07      	ldr	r3, [pc, #28]	; (8001c54 <_sbrk+0x64>)
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	4413      	add	r3, r2
 8001c3e:	4a05      	ldr	r2, [pc, #20]	; (8001c54 <_sbrk+0x64>)
 8001c40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c42:	68fb      	ldr	r3, [r7, #12]
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	3718      	adds	r7, #24
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	20005000 	.word	0x20005000
 8001c50:	00000400 	.word	0x00000400
 8001c54:	20000408 	.word	0x20000408
 8001c58:	20000420 	.word	0x20000420

08001c5c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c60:	bf00      	nop
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bc80      	pop	{r7}
 8001c66:	4770      	bx	lr

08001c68 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c68:	480c      	ldr	r0, [pc, #48]	; (8001c9c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001c6a:	490d      	ldr	r1, [pc, #52]	; (8001ca0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001c6c:	4a0d      	ldr	r2, [pc, #52]	; (8001ca4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001c6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c70:	e002      	b.n	8001c78 <LoopCopyDataInit>

08001c72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c76:	3304      	adds	r3, #4

08001c78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c7c:	d3f9      	bcc.n	8001c72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c7e:	4a0a      	ldr	r2, [pc, #40]	; (8001ca8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001c80:	4c0a      	ldr	r4, [pc, #40]	; (8001cac <LoopFillZerobss+0x22>)
  movs r3, #0
 8001c82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c84:	e001      	b.n	8001c8a <LoopFillZerobss>

08001c86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c88:	3204      	adds	r2, #4

08001c8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c8c:	d3fb      	bcc.n	8001c86 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001c8e:	f7ff ffe5 	bl	8001c5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c92:	f001 ff2f 	bl	8003af4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001c96:	f7ff fcd5 	bl	8001644 <main>
  bx lr
 8001c9a:	4770      	bx	lr
  ldr r0, =_sdata
 8001c9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ca0:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001ca4:	08006d24 	.word	0x08006d24
  ldr r2, =_sbss
 8001ca8:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001cac:	20000420 	.word	0x20000420

08001cb0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001cb0:	e7fe      	b.n	8001cb0 <ADC1_2_IRQHandler>
	...

08001cb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cb8:	4b08      	ldr	r3, [pc, #32]	; (8001cdc <HAL_Init+0x28>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a07      	ldr	r2, [pc, #28]	; (8001cdc <HAL_Init+0x28>)
 8001cbe:	f043 0310 	orr.w	r3, r3, #16
 8001cc2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cc4:	2003      	movs	r0, #3
 8001cc6:	f000 f923 	bl	8001f10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cca:	200f      	movs	r0, #15
 8001ccc:	f000 f808 	bl	8001ce0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cd0:	f7ff fdca 	bl	8001868 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cd4:	2300      	movs	r3, #0
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	40022000 	.word	0x40022000

08001ce0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ce8:	4b12      	ldr	r3, [pc, #72]	; (8001d34 <HAL_InitTick+0x54>)
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	4b12      	ldr	r3, [pc, #72]	; (8001d38 <HAL_InitTick+0x58>)
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cf6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f000 f93b 	bl	8001f7a <HAL_SYSTICK_Config>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d001      	beq.n	8001d0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e00e      	b.n	8001d2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2b0f      	cmp	r3, #15
 8001d12:	d80a      	bhi.n	8001d2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d14:	2200      	movs	r2, #0
 8001d16:	6879      	ldr	r1, [r7, #4]
 8001d18:	f04f 30ff 	mov.w	r0, #4294967295
 8001d1c:	f000 f903 	bl	8001f26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d20:	4a06      	ldr	r2, [pc, #24]	; (8001d3c <HAL_InitTick+0x5c>)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d26:	2300      	movs	r3, #0
 8001d28:	e000      	b.n	8001d2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	3708      	adds	r7, #8
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	20000000 	.word	0x20000000
 8001d38:	20000008 	.word	0x20000008
 8001d3c:	20000004 	.word	0x20000004

08001d40 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d44:	4b05      	ldr	r3, [pc, #20]	; (8001d5c <HAL_IncTick+0x1c>)
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	461a      	mov	r2, r3
 8001d4a:	4b05      	ldr	r3, [pc, #20]	; (8001d60 <HAL_IncTick+0x20>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4413      	add	r3, r2
 8001d50:	4a03      	ldr	r2, [pc, #12]	; (8001d60 <HAL_IncTick+0x20>)
 8001d52:	6013      	str	r3, [r2, #0]
}
 8001d54:	bf00      	nop
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bc80      	pop	{r7}
 8001d5a:	4770      	bx	lr
 8001d5c:	20000008 	.word	0x20000008
 8001d60:	2000040c 	.word	0x2000040c

08001d64 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  return uwTick;
 8001d68:	4b02      	ldr	r3, [pc, #8]	; (8001d74 <HAL_GetTick+0x10>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bc80      	pop	{r7}
 8001d72:	4770      	bx	lr
 8001d74:	2000040c 	.word	0x2000040c

08001d78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b085      	sub	sp, #20
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	f003 0307 	and.w	r3, r3, #7
 8001d86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d88:	4b0c      	ldr	r3, [pc, #48]	; (8001dbc <__NVIC_SetPriorityGrouping+0x44>)
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d8e:	68ba      	ldr	r2, [r7, #8]
 8001d90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d94:	4013      	ands	r3, r2
 8001d96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001da0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001da4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001da8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001daa:	4a04      	ldr	r2, [pc, #16]	; (8001dbc <__NVIC_SetPriorityGrouping+0x44>)
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	60d3      	str	r3, [r2, #12]
}
 8001db0:	bf00      	nop
 8001db2:	3714      	adds	r7, #20
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bc80      	pop	{r7}
 8001db8:	4770      	bx	lr
 8001dba:	bf00      	nop
 8001dbc:	e000ed00 	.word	0xe000ed00

08001dc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dc4:	4b04      	ldr	r3, [pc, #16]	; (8001dd8 <__NVIC_GetPriorityGrouping+0x18>)
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	0a1b      	lsrs	r3, r3, #8
 8001dca:	f003 0307 	and.w	r3, r3, #7
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bc80      	pop	{r7}
 8001dd4:	4770      	bx	lr
 8001dd6:	bf00      	nop
 8001dd8:	e000ed00 	.word	0xe000ed00

08001ddc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	4603      	mov	r3, r0
 8001de4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	db0b      	blt.n	8001e06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dee:	79fb      	ldrb	r3, [r7, #7]
 8001df0:	f003 021f 	and.w	r2, r3, #31
 8001df4:	4906      	ldr	r1, [pc, #24]	; (8001e10 <__NVIC_EnableIRQ+0x34>)
 8001df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dfa:	095b      	lsrs	r3, r3, #5
 8001dfc:	2001      	movs	r0, #1
 8001dfe:	fa00 f202 	lsl.w	r2, r0, r2
 8001e02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e06:	bf00      	nop
 8001e08:	370c      	adds	r7, #12
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bc80      	pop	{r7}
 8001e0e:	4770      	bx	lr
 8001e10:	e000e100 	.word	0xe000e100

08001e14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	6039      	str	r1, [r7, #0]
 8001e1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	db0a      	blt.n	8001e3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	b2da      	uxtb	r2, r3
 8001e2c:	490c      	ldr	r1, [pc, #48]	; (8001e60 <__NVIC_SetPriority+0x4c>)
 8001e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e32:	0112      	lsls	r2, r2, #4
 8001e34:	b2d2      	uxtb	r2, r2
 8001e36:	440b      	add	r3, r1
 8001e38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e3c:	e00a      	b.n	8001e54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	b2da      	uxtb	r2, r3
 8001e42:	4908      	ldr	r1, [pc, #32]	; (8001e64 <__NVIC_SetPriority+0x50>)
 8001e44:	79fb      	ldrb	r3, [r7, #7]
 8001e46:	f003 030f 	and.w	r3, r3, #15
 8001e4a:	3b04      	subs	r3, #4
 8001e4c:	0112      	lsls	r2, r2, #4
 8001e4e:	b2d2      	uxtb	r2, r2
 8001e50:	440b      	add	r3, r1
 8001e52:	761a      	strb	r2, [r3, #24]
}
 8001e54:	bf00      	nop
 8001e56:	370c      	adds	r7, #12
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bc80      	pop	{r7}
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	e000e100 	.word	0xe000e100
 8001e64:	e000ed00 	.word	0xe000ed00

08001e68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b089      	sub	sp, #36	; 0x24
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	60f8      	str	r0, [r7, #12]
 8001e70:	60b9      	str	r1, [r7, #8]
 8001e72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	f003 0307 	and.w	r3, r3, #7
 8001e7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e7c:	69fb      	ldr	r3, [r7, #28]
 8001e7e:	f1c3 0307 	rsb	r3, r3, #7
 8001e82:	2b04      	cmp	r3, #4
 8001e84:	bf28      	it	cs
 8001e86:	2304      	movcs	r3, #4
 8001e88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	3304      	adds	r3, #4
 8001e8e:	2b06      	cmp	r3, #6
 8001e90:	d902      	bls.n	8001e98 <NVIC_EncodePriority+0x30>
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	3b03      	subs	r3, #3
 8001e96:	e000      	b.n	8001e9a <NVIC_EncodePriority+0x32>
 8001e98:	2300      	movs	r3, #0
 8001e9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e9c:	f04f 32ff 	mov.w	r2, #4294967295
 8001ea0:	69bb      	ldr	r3, [r7, #24]
 8001ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea6:	43da      	mvns	r2, r3
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	401a      	ands	r2, r3
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001eb0:	f04f 31ff 	mov.w	r1, #4294967295
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	fa01 f303 	lsl.w	r3, r1, r3
 8001eba:	43d9      	mvns	r1, r3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ec0:	4313      	orrs	r3, r2
         );
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3724      	adds	r7, #36	; 0x24
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bc80      	pop	{r7}
 8001eca:	4770      	bx	lr

08001ecc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b082      	sub	sp, #8
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	3b01      	subs	r3, #1
 8001ed8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001edc:	d301      	bcc.n	8001ee2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e00f      	b.n	8001f02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ee2:	4a0a      	ldr	r2, [pc, #40]	; (8001f0c <SysTick_Config+0x40>)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	3b01      	subs	r3, #1
 8001ee8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001eea:	210f      	movs	r1, #15
 8001eec:	f04f 30ff 	mov.w	r0, #4294967295
 8001ef0:	f7ff ff90 	bl	8001e14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ef4:	4b05      	ldr	r3, [pc, #20]	; (8001f0c <SysTick_Config+0x40>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001efa:	4b04      	ldr	r3, [pc, #16]	; (8001f0c <SysTick_Config+0x40>)
 8001efc:	2207      	movs	r2, #7
 8001efe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f00:	2300      	movs	r3, #0
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3708      	adds	r7, #8
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	e000e010 	.word	0xe000e010

08001f10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b082      	sub	sp, #8
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	f7ff ff2d 	bl	8001d78 <__NVIC_SetPriorityGrouping>
}
 8001f1e:	bf00      	nop
 8001f20:	3708      	adds	r7, #8
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}

08001f26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f26:	b580      	push	{r7, lr}
 8001f28:	b086      	sub	sp, #24
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	60b9      	str	r1, [r7, #8]
 8001f30:	607a      	str	r2, [r7, #4]
 8001f32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f34:	2300      	movs	r3, #0
 8001f36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f38:	f7ff ff42 	bl	8001dc0 <__NVIC_GetPriorityGrouping>
 8001f3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f3e:	687a      	ldr	r2, [r7, #4]
 8001f40:	68b9      	ldr	r1, [r7, #8]
 8001f42:	6978      	ldr	r0, [r7, #20]
 8001f44:	f7ff ff90 	bl	8001e68 <NVIC_EncodePriority>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f4e:	4611      	mov	r1, r2
 8001f50:	4618      	mov	r0, r3
 8001f52:	f7ff ff5f 	bl	8001e14 <__NVIC_SetPriority>
}
 8001f56:	bf00      	nop
 8001f58:	3718      	adds	r7, #24
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}

08001f5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f5e:	b580      	push	{r7, lr}
 8001f60:	b082      	sub	sp, #8
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	4603      	mov	r3, r0
 8001f66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f7ff ff35 	bl	8001ddc <__NVIC_EnableIRQ>
}
 8001f72:	bf00      	nop
 8001f74:	3708      	adds	r7, #8
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}

08001f7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f7a:	b580      	push	{r7, lr}
 8001f7c:	b082      	sub	sp, #8
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f7ff ffa2 	bl	8001ecc <SysTick_Config>
 8001f88:	4603      	mov	r3, r0
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3708      	adds	r7, #8
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
	...

08001f94 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b085      	sub	sp, #20
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d101      	bne.n	8001faa <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e043      	b.n	8002032 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	461a      	mov	r2, r3
 8001fb0:	4b22      	ldr	r3, [pc, #136]	; (800203c <HAL_DMA_Init+0xa8>)
 8001fb2:	4413      	add	r3, r2
 8001fb4:	4a22      	ldr	r2, [pc, #136]	; (8002040 <HAL_DMA_Init+0xac>)
 8001fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8001fba:	091b      	lsrs	r3, r3, #4
 8001fbc:	009a      	lsls	r2, r3, #2
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	4a1f      	ldr	r2, [pc, #124]	; (8002044 <HAL_DMA_Init+0xb0>)
 8001fc6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2202      	movs	r2, #2
 8001fcc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001fde:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001fe2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001fec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	68db      	ldr	r3, [r3, #12]
 8001ff2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ff8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	695b      	ldr	r3, [r3, #20]
 8001ffe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002004:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	69db      	ldr	r3, [r3, #28]
 800200a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800200c:	68fa      	ldr	r2, [r7, #12]
 800200e:	4313      	orrs	r3, r2
 8002010:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	68fa      	ldr	r2, [r7, #12]
 8002018:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2200      	movs	r2, #0
 800201e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2201      	movs	r2, #1
 8002024:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2200      	movs	r2, #0
 800202c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002030:	2300      	movs	r3, #0
}
 8002032:	4618      	mov	r0, r3
 8002034:	3714      	adds	r7, #20
 8002036:	46bd      	mov	sp, r7
 8002038:	bc80      	pop	{r7}
 800203a:	4770      	bx	lr
 800203c:	bffdfff8 	.word	0xbffdfff8
 8002040:	cccccccd 	.word	0xcccccccd
 8002044:	40020000 	.word	0x40020000

08002048 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b086      	sub	sp, #24
 800204c:	af00      	add	r7, sp, #0
 800204e:	60f8      	str	r0, [r7, #12]
 8002050:	60b9      	str	r1, [r7, #8]
 8002052:	607a      	str	r2, [r7, #4]
 8002054:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002056:	2300      	movs	r3, #0
 8002058:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002060:	2b01      	cmp	r3, #1
 8002062:	d101      	bne.n	8002068 <HAL_DMA_Start_IT+0x20>
 8002064:	2302      	movs	r3, #2
 8002066:	e04a      	b.n	80020fe <HAL_DMA_Start_IT+0xb6>
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	2201      	movs	r2, #1
 800206c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002076:	2b01      	cmp	r3, #1
 8002078:	d13a      	bne.n	80020f0 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	2202      	movs	r2, #2
 800207e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	2200      	movs	r2, #0
 8002086:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f022 0201 	bic.w	r2, r2, #1
 8002096:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	687a      	ldr	r2, [r7, #4]
 800209c:	68b9      	ldr	r1, [r7, #8]
 800209e:	68f8      	ldr	r0, [r7, #12]
 80020a0:	f000 f9e8 	bl	8002474 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d008      	beq.n	80020be <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f042 020e 	orr.w	r2, r2, #14
 80020ba:	601a      	str	r2, [r3, #0]
 80020bc:	e00f      	b.n	80020de <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f022 0204 	bic.w	r2, r2, #4
 80020cc:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f042 020a 	orr.w	r2, r2, #10
 80020dc:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f042 0201 	orr.w	r2, r2, #1
 80020ec:	601a      	str	r2, [r3, #0]
 80020ee:	e005      	b.n	80020fc <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2200      	movs	r2, #0
 80020f4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80020f8:	2302      	movs	r3, #2
 80020fa:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80020fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3718      	adds	r7, #24
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}

08002106 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002106:	b480      	push	{r7}
 8002108:	b085      	sub	sp, #20
 800210a:	af00      	add	r7, sp, #0
 800210c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800210e:	2300      	movs	r3, #0
 8002110:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002118:	2b02      	cmp	r3, #2
 800211a:	d008      	beq.n	800212e <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2204      	movs	r2, #4
 8002120:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2200      	movs	r2, #0
 8002126:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e020      	b.n	8002170 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f022 020e 	bic.w	r2, r2, #14
 800213c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f022 0201 	bic.w	r2, r2, #1
 800214c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002156:	2101      	movs	r1, #1
 8002158:	fa01 f202 	lsl.w	r2, r1, r2
 800215c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2201      	movs	r2, #1
 8002162:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2200      	movs	r2, #0
 800216a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800216e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002170:	4618      	mov	r0, r3
 8002172:	3714      	adds	r7, #20
 8002174:	46bd      	mov	sp, r7
 8002176:	bc80      	pop	{r7}
 8002178:	4770      	bx	lr
	...

0800217c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800217c:	b580      	push	{r7, lr}
 800217e:	b084      	sub	sp, #16
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002184:	2300      	movs	r3, #0
 8002186:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800218e:	2b02      	cmp	r3, #2
 8002190:	d005      	beq.n	800219e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2204      	movs	r2, #4
 8002196:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	73fb      	strb	r3, [r7, #15]
 800219c:	e051      	b.n	8002242 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f022 020e 	bic.w	r2, r2, #14
 80021ac:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f022 0201 	bic.w	r2, r2, #1
 80021bc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a22      	ldr	r2, [pc, #136]	; (800224c <HAL_DMA_Abort_IT+0xd0>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d029      	beq.n	800221c <HAL_DMA_Abort_IT+0xa0>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a20      	ldr	r2, [pc, #128]	; (8002250 <HAL_DMA_Abort_IT+0xd4>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d022      	beq.n	8002218 <HAL_DMA_Abort_IT+0x9c>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a1f      	ldr	r2, [pc, #124]	; (8002254 <HAL_DMA_Abort_IT+0xd8>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d01a      	beq.n	8002212 <HAL_DMA_Abort_IT+0x96>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a1d      	ldr	r2, [pc, #116]	; (8002258 <HAL_DMA_Abort_IT+0xdc>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d012      	beq.n	800220c <HAL_DMA_Abort_IT+0x90>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a1c      	ldr	r2, [pc, #112]	; (800225c <HAL_DMA_Abort_IT+0xe0>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d00a      	beq.n	8002206 <HAL_DMA_Abort_IT+0x8a>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a1a      	ldr	r2, [pc, #104]	; (8002260 <HAL_DMA_Abort_IT+0xe4>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d102      	bne.n	8002200 <HAL_DMA_Abort_IT+0x84>
 80021fa:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80021fe:	e00e      	b.n	800221e <HAL_DMA_Abort_IT+0xa2>
 8002200:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002204:	e00b      	b.n	800221e <HAL_DMA_Abort_IT+0xa2>
 8002206:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800220a:	e008      	b.n	800221e <HAL_DMA_Abort_IT+0xa2>
 800220c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002210:	e005      	b.n	800221e <HAL_DMA_Abort_IT+0xa2>
 8002212:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002216:	e002      	b.n	800221e <HAL_DMA_Abort_IT+0xa2>
 8002218:	2310      	movs	r3, #16
 800221a:	e000      	b.n	800221e <HAL_DMA_Abort_IT+0xa2>
 800221c:	2301      	movs	r3, #1
 800221e:	4a11      	ldr	r2, [pc, #68]	; (8002264 <HAL_DMA_Abort_IT+0xe8>)
 8002220:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2201      	movs	r2, #1
 8002226:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2200      	movs	r2, #0
 800222e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002236:	2b00      	cmp	r3, #0
 8002238:	d003      	beq.n	8002242 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	4798      	blx	r3
    } 
  }
  return status;
 8002242:	7bfb      	ldrb	r3, [r7, #15]
}
 8002244:	4618      	mov	r0, r3
 8002246:	3710      	adds	r7, #16
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}
 800224c:	40020008 	.word	0x40020008
 8002250:	4002001c 	.word	0x4002001c
 8002254:	40020030 	.word	0x40020030
 8002258:	40020044 	.word	0x40020044
 800225c:	40020058 	.word	0x40020058
 8002260:	4002006c 	.word	0x4002006c
 8002264:	40020000 	.word	0x40020000

08002268 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b084      	sub	sp, #16
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002284:	2204      	movs	r2, #4
 8002286:	409a      	lsls	r2, r3
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	4013      	ands	r3, r2
 800228c:	2b00      	cmp	r3, #0
 800228e:	d04f      	beq.n	8002330 <HAL_DMA_IRQHandler+0xc8>
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	f003 0304 	and.w	r3, r3, #4
 8002296:	2b00      	cmp	r3, #0
 8002298:	d04a      	beq.n	8002330 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 0320 	and.w	r3, r3, #32
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d107      	bne.n	80022b8 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f022 0204 	bic.w	r2, r2, #4
 80022b6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a66      	ldr	r2, [pc, #408]	; (8002458 <HAL_DMA_IRQHandler+0x1f0>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d029      	beq.n	8002316 <HAL_DMA_IRQHandler+0xae>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a65      	ldr	r2, [pc, #404]	; (800245c <HAL_DMA_IRQHandler+0x1f4>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d022      	beq.n	8002312 <HAL_DMA_IRQHandler+0xaa>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a63      	ldr	r2, [pc, #396]	; (8002460 <HAL_DMA_IRQHandler+0x1f8>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d01a      	beq.n	800230c <HAL_DMA_IRQHandler+0xa4>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a62      	ldr	r2, [pc, #392]	; (8002464 <HAL_DMA_IRQHandler+0x1fc>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d012      	beq.n	8002306 <HAL_DMA_IRQHandler+0x9e>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a60      	ldr	r2, [pc, #384]	; (8002468 <HAL_DMA_IRQHandler+0x200>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d00a      	beq.n	8002300 <HAL_DMA_IRQHandler+0x98>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a5f      	ldr	r2, [pc, #380]	; (800246c <HAL_DMA_IRQHandler+0x204>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d102      	bne.n	80022fa <HAL_DMA_IRQHandler+0x92>
 80022f4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80022f8:	e00e      	b.n	8002318 <HAL_DMA_IRQHandler+0xb0>
 80022fa:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80022fe:	e00b      	b.n	8002318 <HAL_DMA_IRQHandler+0xb0>
 8002300:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002304:	e008      	b.n	8002318 <HAL_DMA_IRQHandler+0xb0>
 8002306:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800230a:	e005      	b.n	8002318 <HAL_DMA_IRQHandler+0xb0>
 800230c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002310:	e002      	b.n	8002318 <HAL_DMA_IRQHandler+0xb0>
 8002312:	2340      	movs	r3, #64	; 0x40
 8002314:	e000      	b.n	8002318 <HAL_DMA_IRQHandler+0xb0>
 8002316:	2304      	movs	r3, #4
 8002318:	4a55      	ldr	r2, [pc, #340]	; (8002470 <HAL_DMA_IRQHandler+0x208>)
 800231a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002320:	2b00      	cmp	r3, #0
 8002322:	f000 8094 	beq.w	800244e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800232e:	e08e      	b.n	800244e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002334:	2202      	movs	r2, #2
 8002336:	409a      	lsls	r2, r3
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	4013      	ands	r3, r2
 800233c:	2b00      	cmp	r3, #0
 800233e:	d056      	beq.n	80023ee <HAL_DMA_IRQHandler+0x186>
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	f003 0302 	and.w	r3, r3, #2
 8002346:	2b00      	cmp	r3, #0
 8002348:	d051      	beq.n	80023ee <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 0320 	and.w	r3, r3, #32
 8002354:	2b00      	cmp	r3, #0
 8002356:	d10b      	bne.n	8002370 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f022 020a 	bic.w	r2, r2, #10
 8002366:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2201      	movs	r2, #1
 800236c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a38      	ldr	r2, [pc, #224]	; (8002458 <HAL_DMA_IRQHandler+0x1f0>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d029      	beq.n	80023ce <HAL_DMA_IRQHandler+0x166>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a37      	ldr	r2, [pc, #220]	; (800245c <HAL_DMA_IRQHandler+0x1f4>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d022      	beq.n	80023ca <HAL_DMA_IRQHandler+0x162>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a35      	ldr	r2, [pc, #212]	; (8002460 <HAL_DMA_IRQHandler+0x1f8>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d01a      	beq.n	80023c4 <HAL_DMA_IRQHandler+0x15c>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a34      	ldr	r2, [pc, #208]	; (8002464 <HAL_DMA_IRQHandler+0x1fc>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d012      	beq.n	80023be <HAL_DMA_IRQHandler+0x156>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a32      	ldr	r2, [pc, #200]	; (8002468 <HAL_DMA_IRQHandler+0x200>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d00a      	beq.n	80023b8 <HAL_DMA_IRQHandler+0x150>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a31      	ldr	r2, [pc, #196]	; (800246c <HAL_DMA_IRQHandler+0x204>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d102      	bne.n	80023b2 <HAL_DMA_IRQHandler+0x14a>
 80023ac:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80023b0:	e00e      	b.n	80023d0 <HAL_DMA_IRQHandler+0x168>
 80023b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023b6:	e00b      	b.n	80023d0 <HAL_DMA_IRQHandler+0x168>
 80023b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023bc:	e008      	b.n	80023d0 <HAL_DMA_IRQHandler+0x168>
 80023be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023c2:	e005      	b.n	80023d0 <HAL_DMA_IRQHandler+0x168>
 80023c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023c8:	e002      	b.n	80023d0 <HAL_DMA_IRQHandler+0x168>
 80023ca:	2320      	movs	r3, #32
 80023cc:	e000      	b.n	80023d0 <HAL_DMA_IRQHandler+0x168>
 80023ce:	2302      	movs	r3, #2
 80023d0:	4a27      	ldr	r2, [pc, #156]	; (8002470 <HAL_DMA_IRQHandler+0x208>)
 80023d2:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2200      	movs	r2, #0
 80023d8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d034      	beq.n	800244e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023e8:	6878      	ldr	r0, [r7, #4]
 80023ea:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80023ec:	e02f      	b.n	800244e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f2:	2208      	movs	r2, #8
 80023f4:	409a      	lsls	r2, r3
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	4013      	ands	r3, r2
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d028      	beq.n	8002450 <HAL_DMA_IRQHandler+0x1e8>
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	f003 0308 	and.w	r3, r3, #8
 8002404:	2b00      	cmp	r3, #0
 8002406:	d023      	beq.n	8002450 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f022 020e 	bic.w	r2, r2, #14
 8002416:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002420:	2101      	movs	r1, #1
 8002422:	fa01 f202 	lsl.w	r2, r1, r2
 8002426:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2201      	movs	r2, #1
 800242c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2201      	movs	r2, #1
 8002432:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2200      	movs	r2, #0
 800243a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002442:	2b00      	cmp	r3, #0
 8002444:	d004      	beq.n	8002450 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	4798      	blx	r3
    }
  }
  return;
 800244e:	bf00      	nop
 8002450:	bf00      	nop
}
 8002452:	3710      	adds	r7, #16
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}
 8002458:	40020008 	.word	0x40020008
 800245c:	4002001c 	.word	0x4002001c
 8002460:	40020030 	.word	0x40020030
 8002464:	40020044 	.word	0x40020044
 8002468:	40020058 	.word	0x40020058
 800246c:	4002006c 	.word	0x4002006c
 8002470:	40020000 	.word	0x40020000

08002474 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002474:	b480      	push	{r7}
 8002476:	b085      	sub	sp, #20
 8002478:	af00      	add	r7, sp, #0
 800247a:	60f8      	str	r0, [r7, #12]
 800247c:	60b9      	str	r1, [r7, #8]
 800247e:	607a      	str	r2, [r7, #4]
 8002480:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800248a:	2101      	movs	r1, #1
 800248c:	fa01 f202 	lsl.w	r2, r1, r2
 8002490:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	683a      	ldr	r2, [r7, #0]
 8002498:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	2b10      	cmp	r3, #16
 80024a0:	d108      	bne.n	80024b4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	687a      	ldr	r2, [r7, #4]
 80024a8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	68ba      	ldr	r2, [r7, #8]
 80024b0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80024b2:	e007      	b.n	80024c4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	68ba      	ldr	r2, [r7, #8]
 80024ba:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	687a      	ldr	r2, [r7, #4]
 80024c2:	60da      	str	r2, [r3, #12]
}
 80024c4:	bf00      	nop
 80024c6:	3714      	adds	r7, #20
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bc80      	pop	{r7}
 80024cc:	4770      	bx	lr
	...

080024d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b08b      	sub	sp, #44	; 0x2c
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
 80024d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80024da:	2300      	movs	r3, #0
 80024dc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80024de:	2300      	movs	r3, #0
 80024e0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024e2:	e169      	b.n	80027b8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80024e4:	2201      	movs	r2, #1
 80024e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ec:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	69fa      	ldr	r2, [r7, #28]
 80024f4:	4013      	ands	r3, r2
 80024f6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80024f8:	69ba      	ldr	r2, [r7, #24]
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	429a      	cmp	r2, r3
 80024fe:	f040 8158 	bne.w	80027b2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	4a9a      	ldr	r2, [pc, #616]	; (8002770 <HAL_GPIO_Init+0x2a0>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d05e      	beq.n	80025ca <HAL_GPIO_Init+0xfa>
 800250c:	4a98      	ldr	r2, [pc, #608]	; (8002770 <HAL_GPIO_Init+0x2a0>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d875      	bhi.n	80025fe <HAL_GPIO_Init+0x12e>
 8002512:	4a98      	ldr	r2, [pc, #608]	; (8002774 <HAL_GPIO_Init+0x2a4>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d058      	beq.n	80025ca <HAL_GPIO_Init+0xfa>
 8002518:	4a96      	ldr	r2, [pc, #600]	; (8002774 <HAL_GPIO_Init+0x2a4>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d86f      	bhi.n	80025fe <HAL_GPIO_Init+0x12e>
 800251e:	4a96      	ldr	r2, [pc, #600]	; (8002778 <HAL_GPIO_Init+0x2a8>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d052      	beq.n	80025ca <HAL_GPIO_Init+0xfa>
 8002524:	4a94      	ldr	r2, [pc, #592]	; (8002778 <HAL_GPIO_Init+0x2a8>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d869      	bhi.n	80025fe <HAL_GPIO_Init+0x12e>
 800252a:	4a94      	ldr	r2, [pc, #592]	; (800277c <HAL_GPIO_Init+0x2ac>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d04c      	beq.n	80025ca <HAL_GPIO_Init+0xfa>
 8002530:	4a92      	ldr	r2, [pc, #584]	; (800277c <HAL_GPIO_Init+0x2ac>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d863      	bhi.n	80025fe <HAL_GPIO_Init+0x12e>
 8002536:	4a92      	ldr	r2, [pc, #584]	; (8002780 <HAL_GPIO_Init+0x2b0>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d046      	beq.n	80025ca <HAL_GPIO_Init+0xfa>
 800253c:	4a90      	ldr	r2, [pc, #576]	; (8002780 <HAL_GPIO_Init+0x2b0>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d85d      	bhi.n	80025fe <HAL_GPIO_Init+0x12e>
 8002542:	2b12      	cmp	r3, #18
 8002544:	d82a      	bhi.n	800259c <HAL_GPIO_Init+0xcc>
 8002546:	2b12      	cmp	r3, #18
 8002548:	d859      	bhi.n	80025fe <HAL_GPIO_Init+0x12e>
 800254a:	a201      	add	r2, pc, #4	; (adr r2, 8002550 <HAL_GPIO_Init+0x80>)
 800254c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002550:	080025cb 	.word	0x080025cb
 8002554:	080025a5 	.word	0x080025a5
 8002558:	080025b7 	.word	0x080025b7
 800255c:	080025f9 	.word	0x080025f9
 8002560:	080025ff 	.word	0x080025ff
 8002564:	080025ff 	.word	0x080025ff
 8002568:	080025ff 	.word	0x080025ff
 800256c:	080025ff 	.word	0x080025ff
 8002570:	080025ff 	.word	0x080025ff
 8002574:	080025ff 	.word	0x080025ff
 8002578:	080025ff 	.word	0x080025ff
 800257c:	080025ff 	.word	0x080025ff
 8002580:	080025ff 	.word	0x080025ff
 8002584:	080025ff 	.word	0x080025ff
 8002588:	080025ff 	.word	0x080025ff
 800258c:	080025ff 	.word	0x080025ff
 8002590:	080025ff 	.word	0x080025ff
 8002594:	080025ad 	.word	0x080025ad
 8002598:	080025c1 	.word	0x080025c1
 800259c:	4a79      	ldr	r2, [pc, #484]	; (8002784 <HAL_GPIO_Init+0x2b4>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d013      	beq.n	80025ca <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80025a2:	e02c      	b.n	80025fe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	623b      	str	r3, [r7, #32]
          break;
 80025aa:	e029      	b.n	8002600 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	68db      	ldr	r3, [r3, #12]
 80025b0:	3304      	adds	r3, #4
 80025b2:	623b      	str	r3, [r7, #32]
          break;
 80025b4:	e024      	b.n	8002600 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	68db      	ldr	r3, [r3, #12]
 80025ba:	3308      	adds	r3, #8
 80025bc:	623b      	str	r3, [r7, #32]
          break;
 80025be:	e01f      	b.n	8002600 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	330c      	adds	r3, #12
 80025c6:	623b      	str	r3, [r7, #32]
          break;
 80025c8:	e01a      	b.n	8002600 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d102      	bne.n	80025d8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80025d2:	2304      	movs	r3, #4
 80025d4:	623b      	str	r3, [r7, #32]
          break;
 80025d6:	e013      	b.n	8002600 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d105      	bne.n	80025ec <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80025e0:	2308      	movs	r3, #8
 80025e2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	69fa      	ldr	r2, [r7, #28]
 80025e8:	611a      	str	r2, [r3, #16]
          break;
 80025ea:	e009      	b.n	8002600 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80025ec:	2308      	movs	r3, #8
 80025ee:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	69fa      	ldr	r2, [r7, #28]
 80025f4:	615a      	str	r2, [r3, #20]
          break;
 80025f6:	e003      	b.n	8002600 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80025f8:	2300      	movs	r3, #0
 80025fa:	623b      	str	r3, [r7, #32]
          break;
 80025fc:	e000      	b.n	8002600 <HAL_GPIO_Init+0x130>
          break;
 80025fe:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002600:	69bb      	ldr	r3, [r7, #24]
 8002602:	2bff      	cmp	r3, #255	; 0xff
 8002604:	d801      	bhi.n	800260a <HAL_GPIO_Init+0x13a>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	e001      	b.n	800260e <HAL_GPIO_Init+0x13e>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	3304      	adds	r3, #4
 800260e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002610:	69bb      	ldr	r3, [r7, #24]
 8002612:	2bff      	cmp	r3, #255	; 0xff
 8002614:	d802      	bhi.n	800261c <HAL_GPIO_Init+0x14c>
 8002616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	e002      	b.n	8002622 <HAL_GPIO_Init+0x152>
 800261c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261e:	3b08      	subs	r3, #8
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	210f      	movs	r1, #15
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	fa01 f303 	lsl.w	r3, r1, r3
 8002630:	43db      	mvns	r3, r3
 8002632:	401a      	ands	r2, r3
 8002634:	6a39      	ldr	r1, [r7, #32]
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	fa01 f303 	lsl.w	r3, r1, r3
 800263c:	431a      	orrs	r2, r3
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800264a:	2b00      	cmp	r3, #0
 800264c:	f000 80b1 	beq.w	80027b2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002650:	4b4d      	ldr	r3, [pc, #308]	; (8002788 <HAL_GPIO_Init+0x2b8>)
 8002652:	699b      	ldr	r3, [r3, #24]
 8002654:	4a4c      	ldr	r2, [pc, #304]	; (8002788 <HAL_GPIO_Init+0x2b8>)
 8002656:	f043 0301 	orr.w	r3, r3, #1
 800265a:	6193      	str	r3, [r2, #24]
 800265c:	4b4a      	ldr	r3, [pc, #296]	; (8002788 <HAL_GPIO_Init+0x2b8>)
 800265e:	699b      	ldr	r3, [r3, #24]
 8002660:	f003 0301 	and.w	r3, r3, #1
 8002664:	60bb      	str	r3, [r7, #8]
 8002666:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002668:	4a48      	ldr	r2, [pc, #288]	; (800278c <HAL_GPIO_Init+0x2bc>)
 800266a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266c:	089b      	lsrs	r3, r3, #2
 800266e:	3302      	adds	r3, #2
 8002670:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002674:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002678:	f003 0303 	and.w	r3, r3, #3
 800267c:	009b      	lsls	r3, r3, #2
 800267e:	220f      	movs	r2, #15
 8002680:	fa02 f303 	lsl.w	r3, r2, r3
 8002684:	43db      	mvns	r3, r3
 8002686:	68fa      	ldr	r2, [r7, #12]
 8002688:	4013      	ands	r3, r2
 800268a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	4a40      	ldr	r2, [pc, #256]	; (8002790 <HAL_GPIO_Init+0x2c0>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d013      	beq.n	80026bc <HAL_GPIO_Init+0x1ec>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	4a3f      	ldr	r2, [pc, #252]	; (8002794 <HAL_GPIO_Init+0x2c4>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d00d      	beq.n	80026b8 <HAL_GPIO_Init+0x1e8>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	4a3e      	ldr	r2, [pc, #248]	; (8002798 <HAL_GPIO_Init+0x2c8>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d007      	beq.n	80026b4 <HAL_GPIO_Init+0x1e4>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	4a3d      	ldr	r2, [pc, #244]	; (800279c <HAL_GPIO_Init+0x2cc>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d101      	bne.n	80026b0 <HAL_GPIO_Init+0x1e0>
 80026ac:	2303      	movs	r3, #3
 80026ae:	e006      	b.n	80026be <HAL_GPIO_Init+0x1ee>
 80026b0:	2304      	movs	r3, #4
 80026b2:	e004      	b.n	80026be <HAL_GPIO_Init+0x1ee>
 80026b4:	2302      	movs	r3, #2
 80026b6:	e002      	b.n	80026be <HAL_GPIO_Init+0x1ee>
 80026b8:	2301      	movs	r3, #1
 80026ba:	e000      	b.n	80026be <HAL_GPIO_Init+0x1ee>
 80026bc:	2300      	movs	r3, #0
 80026be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026c0:	f002 0203 	and.w	r2, r2, #3
 80026c4:	0092      	lsls	r2, r2, #2
 80026c6:	4093      	lsls	r3, r2
 80026c8:	68fa      	ldr	r2, [r7, #12]
 80026ca:	4313      	orrs	r3, r2
 80026cc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80026ce:	492f      	ldr	r1, [pc, #188]	; (800278c <HAL_GPIO_Init+0x2bc>)
 80026d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d2:	089b      	lsrs	r3, r3, #2
 80026d4:	3302      	adds	r3, #2
 80026d6:	68fa      	ldr	r2, [r7, #12]
 80026d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d006      	beq.n	80026f6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80026e8:	4b2d      	ldr	r3, [pc, #180]	; (80027a0 <HAL_GPIO_Init+0x2d0>)
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	492c      	ldr	r1, [pc, #176]	; (80027a0 <HAL_GPIO_Init+0x2d0>)
 80026ee:	69bb      	ldr	r3, [r7, #24]
 80026f0:	4313      	orrs	r3, r2
 80026f2:	600b      	str	r3, [r1, #0]
 80026f4:	e006      	b.n	8002704 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80026f6:	4b2a      	ldr	r3, [pc, #168]	; (80027a0 <HAL_GPIO_Init+0x2d0>)
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	69bb      	ldr	r3, [r7, #24]
 80026fc:	43db      	mvns	r3, r3
 80026fe:	4928      	ldr	r1, [pc, #160]	; (80027a0 <HAL_GPIO_Init+0x2d0>)
 8002700:	4013      	ands	r3, r2
 8002702:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800270c:	2b00      	cmp	r3, #0
 800270e:	d006      	beq.n	800271e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002710:	4b23      	ldr	r3, [pc, #140]	; (80027a0 <HAL_GPIO_Init+0x2d0>)
 8002712:	685a      	ldr	r2, [r3, #4]
 8002714:	4922      	ldr	r1, [pc, #136]	; (80027a0 <HAL_GPIO_Init+0x2d0>)
 8002716:	69bb      	ldr	r3, [r7, #24]
 8002718:	4313      	orrs	r3, r2
 800271a:	604b      	str	r3, [r1, #4]
 800271c:	e006      	b.n	800272c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800271e:	4b20      	ldr	r3, [pc, #128]	; (80027a0 <HAL_GPIO_Init+0x2d0>)
 8002720:	685a      	ldr	r2, [r3, #4]
 8002722:	69bb      	ldr	r3, [r7, #24]
 8002724:	43db      	mvns	r3, r3
 8002726:	491e      	ldr	r1, [pc, #120]	; (80027a0 <HAL_GPIO_Init+0x2d0>)
 8002728:	4013      	ands	r3, r2
 800272a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002734:	2b00      	cmp	r3, #0
 8002736:	d006      	beq.n	8002746 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002738:	4b19      	ldr	r3, [pc, #100]	; (80027a0 <HAL_GPIO_Init+0x2d0>)
 800273a:	689a      	ldr	r2, [r3, #8]
 800273c:	4918      	ldr	r1, [pc, #96]	; (80027a0 <HAL_GPIO_Init+0x2d0>)
 800273e:	69bb      	ldr	r3, [r7, #24]
 8002740:	4313      	orrs	r3, r2
 8002742:	608b      	str	r3, [r1, #8]
 8002744:	e006      	b.n	8002754 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002746:	4b16      	ldr	r3, [pc, #88]	; (80027a0 <HAL_GPIO_Init+0x2d0>)
 8002748:	689a      	ldr	r2, [r3, #8]
 800274a:	69bb      	ldr	r3, [r7, #24]
 800274c:	43db      	mvns	r3, r3
 800274e:	4914      	ldr	r1, [pc, #80]	; (80027a0 <HAL_GPIO_Init+0x2d0>)
 8002750:	4013      	ands	r3, r2
 8002752:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800275c:	2b00      	cmp	r3, #0
 800275e:	d021      	beq.n	80027a4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002760:	4b0f      	ldr	r3, [pc, #60]	; (80027a0 <HAL_GPIO_Init+0x2d0>)
 8002762:	68da      	ldr	r2, [r3, #12]
 8002764:	490e      	ldr	r1, [pc, #56]	; (80027a0 <HAL_GPIO_Init+0x2d0>)
 8002766:	69bb      	ldr	r3, [r7, #24]
 8002768:	4313      	orrs	r3, r2
 800276a:	60cb      	str	r3, [r1, #12]
 800276c:	e021      	b.n	80027b2 <HAL_GPIO_Init+0x2e2>
 800276e:	bf00      	nop
 8002770:	10320000 	.word	0x10320000
 8002774:	10310000 	.word	0x10310000
 8002778:	10220000 	.word	0x10220000
 800277c:	10210000 	.word	0x10210000
 8002780:	10120000 	.word	0x10120000
 8002784:	10110000 	.word	0x10110000
 8002788:	40021000 	.word	0x40021000
 800278c:	40010000 	.word	0x40010000
 8002790:	40010800 	.word	0x40010800
 8002794:	40010c00 	.word	0x40010c00
 8002798:	40011000 	.word	0x40011000
 800279c:	40011400 	.word	0x40011400
 80027a0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80027a4:	4b0b      	ldr	r3, [pc, #44]	; (80027d4 <HAL_GPIO_Init+0x304>)
 80027a6:	68da      	ldr	r2, [r3, #12]
 80027a8:	69bb      	ldr	r3, [r7, #24]
 80027aa:	43db      	mvns	r3, r3
 80027ac:	4909      	ldr	r1, [pc, #36]	; (80027d4 <HAL_GPIO_Init+0x304>)
 80027ae:	4013      	ands	r3, r2
 80027b0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80027b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b4:	3301      	adds	r3, #1
 80027b6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027be:	fa22 f303 	lsr.w	r3, r2, r3
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	f47f ae8e 	bne.w	80024e4 <HAL_GPIO_Init+0x14>
  }
}
 80027c8:	bf00      	nop
 80027ca:	bf00      	nop
 80027cc:	372c      	adds	r7, #44	; 0x2c
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bc80      	pop	{r7}
 80027d2:	4770      	bx	lr
 80027d4:	40010400 	.word	0x40010400

080027d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027d8:	b480      	push	{r7}
 80027da:	b083      	sub	sp, #12
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
 80027e0:	460b      	mov	r3, r1
 80027e2:	807b      	strh	r3, [r7, #2]
 80027e4:	4613      	mov	r3, r2
 80027e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80027e8:	787b      	ldrb	r3, [r7, #1]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d003      	beq.n	80027f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027ee:	887a      	ldrh	r2, [r7, #2]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80027f4:	e003      	b.n	80027fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80027f6:	887b      	ldrh	r3, [r7, #2]
 80027f8:	041a      	lsls	r2, r3, #16
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	611a      	str	r2, [r3, #16]
}
 80027fe:	bf00      	nop
 8002800:	370c      	adds	r7, #12
 8002802:	46bd      	mov	sp, r7
 8002804:	bc80      	pop	{r7}
 8002806:	4770      	bx	lr

08002808 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b086      	sub	sp, #24
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d101      	bne.n	800281a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e272      	b.n	8002d00 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 0301 	and.w	r3, r3, #1
 8002822:	2b00      	cmp	r3, #0
 8002824:	f000 8087 	beq.w	8002936 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002828:	4b92      	ldr	r3, [pc, #584]	; (8002a74 <HAL_RCC_OscConfig+0x26c>)
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f003 030c 	and.w	r3, r3, #12
 8002830:	2b04      	cmp	r3, #4
 8002832:	d00c      	beq.n	800284e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002834:	4b8f      	ldr	r3, [pc, #572]	; (8002a74 <HAL_RCC_OscConfig+0x26c>)
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	f003 030c 	and.w	r3, r3, #12
 800283c:	2b08      	cmp	r3, #8
 800283e:	d112      	bne.n	8002866 <HAL_RCC_OscConfig+0x5e>
 8002840:	4b8c      	ldr	r3, [pc, #560]	; (8002a74 <HAL_RCC_OscConfig+0x26c>)
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002848:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800284c:	d10b      	bne.n	8002866 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800284e:	4b89      	ldr	r3, [pc, #548]	; (8002a74 <HAL_RCC_OscConfig+0x26c>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d06c      	beq.n	8002934 <HAL_RCC_OscConfig+0x12c>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d168      	bne.n	8002934 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e24c      	b.n	8002d00 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800286e:	d106      	bne.n	800287e <HAL_RCC_OscConfig+0x76>
 8002870:	4b80      	ldr	r3, [pc, #512]	; (8002a74 <HAL_RCC_OscConfig+0x26c>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a7f      	ldr	r2, [pc, #508]	; (8002a74 <HAL_RCC_OscConfig+0x26c>)
 8002876:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800287a:	6013      	str	r3, [r2, #0]
 800287c:	e02e      	b.n	80028dc <HAL_RCC_OscConfig+0xd4>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d10c      	bne.n	80028a0 <HAL_RCC_OscConfig+0x98>
 8002886:	4b7b      	ldr	r3, [pc, #492]	; (8002a74 <HAL_RCC_OscConfig+0x26c>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a7a      	ldr	r2, [pc, #488]	; (8002a74 <HAL_RCC_OscConfig+0x26c>)
 800288c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002890:	6013      	str	r3, [r2, #0]
 8002892:	4b78      	ldr	r3, [pc, #480]	; (8002a74 <HAL_RCC_OscConfig+0x26c>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a77      	ldr	r2, [pc, #476]	; (8002a74 <HAL_RCC_OscConfig+0x26c>)
 8002898:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800289c:	6013      	str	r3, [r2, #0]
 800289e:	e01d      	b.n	80028dc <HAL_RCC_OscConfig+0xd4>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028a8:	d10c      	bne.n	80028c4 <HAL_RCC_OscConfig+0xbc>
 80028aa:	4b72      	ldr	r3, [pc, #456]	; (8002a74 <HAL_RCC_OscConfig+0x26c>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a71      	ldr	r2, [pc, #452]	; (8002a74 <HAL_RCC_OscConfig+0x26c>)
 80028b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028b4:	6013      	str	r3, [r2, #0]
 80028b6:	4b6f      	ldr	r3, [pc, #444]	; (8002a74 <HAL_RCC_OscConfig+0x26c>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a6e      	ldr	r2, [pc, #440]	; (8002a74 <HAL_RCC_OscConfig+0x26c>)
 80028bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028c0:	6013      	str	r3, [r2, #0]
 80028c2:	e00b      	b.n	80028dc <HAL_RCC_OscConfig+0xd4>
 80028c4:	4b6b      	ldr	r3, [pc, #428]	; (8002a74 <HAL_RCC_OscConfig+0x26c>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a6a      	ldr	r2, [pc, #424]	; (8002a74 <HAL_RCC_OscConfig+0x26c>)
 80028ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028ce:	6013      	str	r3, [r2, #0]
 80028d0:	4b68      	ldr	r3, [pc, #416]	; (8002a74 <HAL_RCC_OscConfig+0x26c>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a67      	ldr	r2, [pc, #412]	; (8002a74 <HAL_RCC_OscConfig+0x26c>)
 80028d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028da:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d013      	beq.n	800290c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028e4:	f7ff fa3e 	bl	8001d64 <HAL_GetTick>
 80028e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028ea:	e008      	b.n	80028fe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028ec:	f7ff fa3a 	bl	8001d64 <HAL_GetTick>
 80028f0:	4602      	mov	r2, r0
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	2b64      	cmp	r3, #100	; 0x64
 80028f8:	d901      	bls.n	80028fe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80028fa:	2303      	movs	r3, #3
 80028fc:	e200      	b.n	8002d00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028fe:	4b5d      	ldr	r3, [pc, #372]	; (8002a74 <HAL_RCC_OscConfig+0x26c>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002906:	2b00      	cmp	r3, #0
 8002908:	d0f0      	beq.n	80028ec <HAL_RCC_OscConfig+0xe4>
 800290a:	e014      	b.n	8002936 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800290c:	f7ff fa2a 	bl	8001d64 <HAL_GetTick>
 8002910:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002912:	e008      	b.n	8002926 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002914:	f7ff fa26 	bl	8001d64 <HAL_GetTick>
 8002918:	4602      	mov	r2, r0
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	2b64      	cmp	r3, #100	; 0x64
 8002920:	d901      	bls.n	8002926 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002922:	2303      	movs	r3, #3
 8002924:	e1ec      	b.n	8002d00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002926:	4b53      	ldr	r3, [pc, #332]	; (8002a74 <HAL_RCC_OscConfig+0x26c>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d1f0      	bne.n	8002914 <HAL_RCC_OscConfig+0x10c>
 8002932:	e000      	b.n	8002936 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002934:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 0302 	and.w	r3, r3, #2
 800293e:	2b00      	cmp	r3, #0
 8002940:	d063      	beq.n	8002a0a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002942:	4b4c      	ldr	r3, [pc, #304]	; (8002a74 <HAL_RCC_OscConfig+0x26c>)
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	f003 030c 	and.w	r3, r3, #12
 800294a:	2b00      	cmp	r3, #0
 800294c:	d00b      	beq.n	8002966 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800294e:	4b49      	ldr	r3, [pc, #292]	; (8002a74 <HAL_RCC_OscConfig+0x26c>)
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	f003 030c 	and.w	r3, r3, #12
 8002956:	2b08      	cmp	r3, #8
 8002958:	d11c      	bne.n	8002994 <HAL_RCC_OscConfig+0x18c>
 800295a:	4b46      	ldr	r3, [pc, #280]	; (8002a74 <HAL_RCC_OscConfig+0x26c>)
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002962:	2b00      	cmp	r3, #0
 8002964:	d116      	bne.n	8002994 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002966:	4b43      	ldr	r3, [pc, #268]	; (8002a74 <HAL_RCC_OscConfig+0x26c>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0302 	and.w	r3, r3, #2
 800296e:	2b00      	cmp	r3, #0
 8002970:	d005      	beq.n	800297e <HAL_RCC_OscConfig+0x176>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	691b      	ldr	r3, [r3, #16]
 8002976:	2b01      	cmp	r3, #1
 8002978:	d001      	beq.n	800297e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e1c0      	b.n	8002d00 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800297e:	4b3d      	ldr	r3, [pc, #244]	; (8002a74 <HAL_RCC_OscConfig+0x26c>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	695b      	ldr	r3, [r3, #20]
 800298a:	00db      	lsls	r3, r3, #3
 800298c:	4939      	ldr	r1, [pc, #228]	; (8002a74 <HAL_RCC_OscConfig+0x26c>)
 800298e:	4313      	orrs	r3, r2
 8002990:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002992:	e03a      	b.n	8002a0a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	691b      	ldr	r3, [r3, #16]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d020      	beq.n	80029de <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800299c:	4b36      	ldr	r3, [pc, #216]	; (8002a78 <HAL_RCC_OscConfig+0x270>)
 800299e:	2201      	movs	r2, #1
 80029a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029a2:	f7ff f9df 	bl	8001d64 <HAL_GetTick>
 80029a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029a8:	e008      	b.n	80029bc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029aa:	f7ff f9db 	bl	8001d64 <HAL_GetTick>
 80029ae:	4602      	mov	r2, r0
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	1ad3      	subs	r3, r2, r3
 80029b4:	2b02      	cmp	r3, #2
 80029b6:	d901      	bls.n	80029bc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80029b8:	2303      	movs	r3, #3
 80029ba:	e1a1      	b.n	8002d00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029bc:	4b2d      	ldr	r3, [pc, #180]	; (8002a74 <HAL_RCC_OscConfig+0x26c>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 0302 	and.w	r3, r3, #2
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d0f0      	beq.n	80029aa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029c8:	4b2a      	ldr	r3, [pc, #168]	; (8002a74 <HAL_RCC_OscConfig+0x26c>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	695b      	ldr	r3, [r3, #20]
 80029d4:	00db      	lsls	r3, r3, #3
 80029d6:	4927      	ldr	r1, [pc, #156]	; (8002a74 <HAL_RCC_OscConfig+0x26c>)
 80029d8:	4313      	orrs	r3, r2
 80029da:	600b      	str	r3, [r1, #0]
 80029dc:	e015      	b.n	8002a0a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029de:	4b26      	ldr	r3, [pc, #152]	; (8002a78 <HAL_RCC_OscConfig+0x270>)
 80029e0:	2200      	movs	r2, #0
 80029e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029e4:	f7ff f9be 	bl	8001d64 <HAL_GetTick>
 80029e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029ea:	e008      	b.n	80029fe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029ec:	f7ff f9ba 	bl	8001d64 <HAL_GetTick>
 80029f0:	4602      	mov	r2, r0
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	d901      	bls.n	80029fe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80029fa:	2303      	movs	r3, #3
 80029fc:	e180      	b.n	8002d00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029fe:	4b1d      	ldr	r3, [pc, #116]	; (8002a74 <HAL_RCC_OscConfig+0x26c>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 0302 	and.w	r3, r3, #2
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d1f0      	bne.n	80029ec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 0308 	and.w	r3, r3, #8
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d03a      	beq.n	8002a8c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	699b      	ldr	r3, [r3, #24]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d019      	beq.n	8002a52 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a1e:	4b17      	ldr	r3, [pc, #92]	; (8002a7c <HAL_RCC_OscConfig+0x274>)
 8002a20:	2201      	movs	r2, #1
 8002a22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a24:	f7ff f99e 	bl	8001d64 <HAL_GetTick>
 8002a28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a2a:	e008      	b.n	8002a3e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a2c:	f7ff f99a 	bl	8001d64 <HAL_GetTick>
 8002a30:	4602      	mov	r2, r0
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	1ad3      	subs	r3, r2, r3
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	d901      	bls.n	8002a3e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	e160      	b.n	8002d00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a3e:	4b0d      	ldr	r3, [pc, #52]	; (8002a74 <HAL_RCC_OscConfig+0x26c>)
 8002a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a42:	f003 0302 	and.w	r3, r3, #2
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d0f0      	beq.n	8002a2c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002a4a:	2001      	movs	r0, #1
 8002a4c:	f000 fad8 	bl	8003000 <RCC_Delay>
 8002a50:	e01c      	b.n	8002a8c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a52:	4b0a      	ldr	r3, [pc, #40]	; (8002a7c <HAL_RCC_OscConfig+0x274>)
 8002a54:	2200      	movs	r2, #0
 8002a56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a58:	f7ff f984 	bl	8001d64 <HAL_GetTick>
 8002a5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a5e:	e00f      	b.n	8002a80 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a60:	f7ff f980 	bl	8001d64 <HAL_GetTick>
 8002a64:	4602      	mov	r2, r0
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	2b02      	cmp	r3, #2
 8002a6c:	d908      	bls.n	8002a80 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002a6e:	2303      	movs	r3, #3
 8002a70:	e146      	b.n	8002d00 <HAL_RCC_OscConfig+0x4f8>
 8002a72:	bf00      	nop
 8002a74:	40021000 	.word	0x40021000
 8002a78:	42420000 	.word	0x42420000
 8002a7c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a80:	4b92      	ldr	r3, [pc, #584]	; (8002ccc <HAL_RCC_OscConfig+0x4c4>)
 8002a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a84:	f003 0302 	and.w	r3, r3, #2
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d1e9      	bne.n	8002a60 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 0304 	and.w	r3, r3, #4
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	f000 80a6 	beq.w	8002be6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a9e:	4b8b      	ldr	r3, [pc, #556]	; (8002ccc <HAL_RCC_OscConfig+0x4c4>)
 8002aa0:	69db      	ldr	r3, [r3, #28]
 8002aa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d10d      	bne.n	8002ac6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002aaa:	4b88      	ldr	r3, [pc, #544]	; (8002ccc <HAL_RCC_OscConfig+0x4c4>)
 8002aac:	69db      	ldr	r3, [r3, #28]
 8002aae:	4a87      	ldr	r2, [pc, #540]	; (8002ccc <HAL_RCC_OscConfig+0x4c4>)
 8002ab0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ab4:	61d3      	str	r3, [r2, #28]
 8002ab6:	4b85      	ldr	r3, [pc, #532]	; (8002ccc <HAL_RCC_OscConfig+0x4c4>)
 8002ab8:	69db      	ldr	r3, [r3, #28]
 8002aba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002abe:	60bb      	str	r3, [r7, #8]
 8002ac0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ac6:	4b82      	ldr	r3, [pc, #520]	; (8002cd0 <HAL_RCC_OscConfig+0x4c8>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d118      	bne.n	8002b04 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ad2:	4b7f      	ldr	r3, [pc, #508]	; (8002cd0 <HAL_RCC_OscConfig+0x4c8>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a7e      	ldr	r2, [pc, #504]	; (8002cd0 <HAL_RCC_OscConfig+0x4c8>)
 8002ad8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002adc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ade:	f7ff f941 	bl	8001d64 <HAL_GetTick>
 8002ae2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ae4:	e008      	b.n	8002af8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ae6:	f7ff f93d 	bl	8001d64 <HAL_GetTick>
 8002aea:	4602      	mov	r2, r0
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	1ad3      	subs	r3, r2, r3
 8002af0:	2b64      	cmp	r3, #100	; 0x64
 8002af2:	d901      	bls.n	8002af8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002af4:	2303      	movs	r3, #3
 8002af6:	e103      	b.n	8002d00 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002af8:	4b75      	ldr	r3, [pc, #468]	; (8002cd0 <HAL_RCC_OscConfig+0x4c8>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d0f0      	beq.n	8002ae6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d106      	bne.n	8002b1a <HAL_RCC_OscConfig+0x312>
 8002b0c:	4b6f      	ldr	r3, [pc, #444]	; (8002ccc <HAL_RCC_OscConfig+0x4c4>)
 8002b0e:	6a1b      	ldr	r3, [r3, #32]
 8002b10:	4a6e      	ldr	r2, [pc, #440]	; (8002ccc <HAL_RCC_OscConfig+0x4c4>)
 8002b12:	f043 0301 	orr.w	r3, r3, #1
 8002b16:	6213      	str	r3, [r2, #32]
 8002b18:	e02d      	b.n	8002b76 <HAL_RCC_OscConfig+0x36e>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	68db      	ldr	r3, [r3, #12]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d10c      	bne.n	8002b3c <HAL_RCC_OscConfig+0x334>
 8002b22:	4b6a      	ldr	r3, [pc, #424]	; (8002ccc <HAL_RCC_OscConfig+0x4c4>)
 8002b24:	6a1b      	ldr	r3, [r3, #32]
 8002b26:	4a69      	ldr	r2, [pc, #420]	; (8002ccc <HAL_RCC_OscConfig+0x4c4>)
 8002b28:	f023 0301 	bic.w	r3, r3, #1
 8002b2c:	6213      	str	r3, [r2, #32]
 8002b2e:	4b67      	ldr	r3, [pc, #412]	; (8002ccc <HAL_RCC_OscConfig+0x4c4>)
 8002b30:	6a1b      	ldr	r3, [r3, #32]
 8002b32:	4a66      	ldr	r2, [pc, #408]	; (8002ccc <HAL_RCC_OscConfig+0x4c4>)
 8002b34:	f023 0304 	bic.w	r3, r3, #4
 8002b38:	6213      	str	r3, [r2, #32]
 8002b3a:	e01c      	b.n	8002b76 <HAL_RCC_OscConfig+0x36e>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	2b05      	cmp	r3, #5
 8002b42:	d10c      	bne.n	8002b5e <HAL_RCC_OscConfig+0x356>
 8002b44:	4b61      	ldr	r3, [pc, #388]	; (8002ccc <HAL_RCC_OscConfig+0x4c4>)
 8002b46:	6a1b      	ldr	r3, [r3, #32]
 8002b48:	4a60      	ldr	r2, [pc, #384]	; (8002ccc <HAL_RCC_OscConfig+0x4c4>)
 8002b4a:	f043 0304 	orr.w	r3, r3, #4
 8002b4e:	6213      	str	r3, [r2, #32]
 8002b50:	4b5e      	ldr	r3, [pc, #376]	; (8002ccc <HAL_RCC_OscConfig+0x4c4>)
 8002b52:	6a1b      	ldr	r3, [r3, #32]
 8002b54:	4a5d      	ldr	r2, [pc, #372]	; (8002ccc <HAL_RCC_OscConfig+0x4c4>)
 8002b56:	f043 0301 	orr.w	r3, r3, #1
 8002b5a:	6213      	str	r3, [r2, #32]
 8002b5c:	e00b      	b.n	8002b76 <HAL_RCC_OscConfig+0x36e>
 8002b5e:	4b5b      	ldr	r3, [pc, #364]	; (8002ccc <HAL_RCC_OscConfig+0x4c4>)
 8002b60:	6a1b      	ldr	r3, [r3, #32]
 8002b62:	4a5a      	ldr	r2, [pc, #360]	; (8002ccc <HAL_RCC_OscConfig+0x4c4>)
 8002b64:	f023 0301 	bic.w	r3, r3, #1
 8002b68:	6213      	str	r3, [r2, #32]
 8002b6a:	4b58      	ldr	r3, [pc, #352]	; (8002ccc <HAL_RCC_OscConfig+0x4c4>)
 8002b6c:	6a1b      	ldr	r3, [r3, #32]
 8002b6e:	4a57      	ldr	r2, [pc, #348]	; (8002ccc <HAL_RCC_OscConfig+0x4c4>)
 8002b70:	f023 0304 	bic.w	r3, r3, #4
 8002b74:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	68db      	ldr	r3, [r3, #12]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d015      	beq.n	8002baa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b7e:	f7ff f8f1 	bl	8001d64 <HAL_GetTick>
 8002b82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b84:	e00a      	b.n	8002b9c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b86:	f7ff f8ed 	bl	8001d64 <HAL_GetTick>
 8002b8a:	4602      	mov	r2, r0
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	1ad3      	subs	r3, r2, r3
 8002b90:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d901      	bls.n	8002b9c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002b98:	2303      	movs	r3, #3
 8002b9a:	e0b1      	b.n	8002d00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b9c:	4b4b      	ldr	r3, [pc, #300]	; (8002ccc <HAL_RCC_OscConfig+0x4c4>)
 8002b9e:	6a1b      	ldr	r3, [r3, #32]
 8002ba0:	f003 0302 	and.w	r3, r3, #2
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d0ee      	beq.n	8002b86 <HAL_RCC_OscConfig+0x37e>
 8002ba8:	e014      	b.n	8002bd4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002baa:	f7ff f8db 	bl	8001d64 <HAL_GetTick>
 8002bae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bb0:	e00a      	b.n	8002bc8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bb2:	f7ff f8d7 	bl	8001d64 <HAL_GetTick>
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	1ad3      	subs	r3, r2, r3
 8002bbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d901      	bls.n	8002bc8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002bc4:	2303      	movs	r3, #3
 8002bc6:	e09b      	b.n	8002d00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bc8:	4b40      	ldr	r3, [pc, #256]	; (8002ccc <HAL_RCC_OscConfig+0x4c4>)
 8002bca:	6a1b      	ldr	r3, [r3, #32]
 8002bcc:	f003 0302 	and.w	r3, r3, #2
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d1ee      	bne.n	8002bb2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002bd4:	7dfb      	ldrb	r3, [r7, #23]
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	d105      	bne.n	8002be6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bda:	4b3c      	ldr	r3, [pc, #240]	; (8002ccc <HAL_RCC_OscConfig+0x4c4>)
 8002bdc:	69db      	ldr	r3, [r3, #28]
 8002bde:	4a3b      	ldr	r2, [pc, #236]	; (8002ccc <HAL_RCC_OscConfig+0x4c4>)
 8002be0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002be4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	69db      	ldr	r3, [r3, #28]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	f000 8087 	beq.w	8002cfe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002bf0:	4b36      	ldr	r3, [pc, #216]	; (8002ccc <HAL_RCC_OscConfig+0x4c4>)
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	f003 030c 	and.w	r3, r3, #12
 8002bf8:	2b08      	cmp	r3, #8
 8002bfa:	d061      	beq.n	8002cc0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	69db      	ldr	r3, [r3, #28]
 8002c00:	2b02      	cmp	r3, #2
 8002c02:	d146      	bne.n	8002c92 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c04:	4b33      	ldr	r3, [pc, #204]	; (8002cd4 <HAL_RCC_OscConfig+0x4cc>)
 8002c06:	2200      	movs	r2, #0
 8002c08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c0a:	f7ff f8ab 	bl	8001d64 <HAL_GetTick>
 8002c0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c10:	e008      	b.n	8002c24 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c12:	f7ff f8a7 	bl	8001d64 <HAL_GetTick>
 8002c16:	4602      	mov	r2, r0
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	1ad3      	subs	r3, r2, r3
 8002c1c:	2b02      	cmp	r3, #2
 8002c1e:	d901      	bls.n	8002c24 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002c20:	2303      	movs	r3, #3
 8002c22:	e06d      	b.n	8002d00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c24:	4b29      	ldr	r3, [pc, #164]	; (8002ccc <HAL_RCC_OscConfig+0x4c4>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d1f0      	bne.n	8002c12 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6a1b      	ldr	r3, [r3, #32]
 8002c34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c38:	d108      	bne.n	8002c4c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002c3a:	4b24      	ldr	r3, [pc, #144]	; (8002ccc <HAL_RCC_OscConfig+0x4c4>)
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	4921      	ldr	r1, [pc, #132]	; (8002ccc <HAL_RCC_OscConfig+0x4c4>)
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c4c:	4b1f      	ldr	r3, [pc, #124]	; (8002ccc <HAL_RCC_OscConfig+0x4c4>)
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6a19      	ldr	r1, [r3, #32]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c5c:	430b      	orrs	r3, r1
 8002c5e:	491b      	ldr	r1, [pc, #108]	; (8002ccc <HAL_RCC_OscConfig+0x4c4>)
 8002c60:	4313      	orrs	r3, r2
 8002c62:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c64:	4b1b      	ldr	r3, [pc, #108]	; (8002cd4 <HAL_RCC_OscConfig+0x4cc>)
 8002c66:	2201      	movs	r2, #1
 8002c68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c6a:	f7ff f87b 	bl	8001d64 <HAL_GetTick>
 8002c6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c70:	e008      	b.n	8002c84 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c72:	f7ff f877 	bl	8001d64 <HAL_GetTick>
 8002c76:	4602      	mov	r2, r0
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	1ad3      	subs	r3, r2, r3
 8002c7c:	2b02      	cmp	r3, #2
 8002c7e:	d901      	bls.n	8002c84 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002c80:	2303      	movs	r3, #3
 8002c82:	e03d      	b.n	8002d00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c84:	4b11      	ldr	r3, [pc, #68]	; (8002ccc <HAL_RCC_OscConfig+0x4c4>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d0f0      	beq.n	8002c72 <HAL_RCC_OscConfig+0x46a>
 8002c90:	e035      	b.n	8002cfe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c92:	4b10      	ldr	r3, [pc, #64]	; (8002cd4 <HAL_RCC_OscConfig+0x4cc>)
 8002c94:	2200      	movs	r2, #0
 8002c96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c98:	f7ff f864 	bl	8001d64 <HAL_GetTick>
 8002c9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c9e:	e008      	b.n	8002cb2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ca0:	f7ff f860 	bl	8001d64 <HAL_GetTick>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	2b02      	cmp	r3, #2
 8002cac:	d901      	bls.n	8002cb2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002cae:	2303      	movs	r3, #3
 8002cb0:	e026      	b.n	8002d00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cb2:	4b06      	ldr	r3, [pc, #24]	; (8002ccc <HAL_RCC_OscConfig+0x4c4>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d1f0      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x498>
 8002cbe:	e01e      	b.n	8002cfe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	69db      	ldr	r3, [r3, #28]
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d107      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e019      	b.n	8002d00 <HAL_RCC_OscConfig+0x4f8>
 8002ccc:	40021000 	.word	0x40021000
 8002cd0:	40007000 	.word	0x40007000
 8002cd4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002cd8:	4b0b      	ldr	r3, [pc, #44]	; (8002d08 <HAL_RCC_OscConfig+0x500>)
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6a1b      	ldr	r3, [r3, #32]
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d106      	bne.n	8002cfa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d001      	beq.n	8002cfe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e000      	b.n	8002d00 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002cfe:	2300      	movs	r3, #0
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	3718      	adds	r7, #24
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	40021000 	.word	0x40021000

08002d0c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b084      	sub	sp, #16
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
 8002d14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d101      	bne.n	8002d20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e0d0      	b.n	8002ec2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d20:	4b6a      	ldr	r3, [pc, #424]	; (8002ecc <HAL_RCC_ClockConfig+0x1c0>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 0307 	and.w	r3, r3, #7
 8002d28:	683a      	ldr	r2, [r7, #0]
 8002d2a:	429a      	cmp	r2, r3
 8002d2c:	d910      	bls.n	8002d50 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d2e:	4b67      	ldr	r3, [pc, #412]	; (8002ecc <HAL_RCC_ClockConfig+0x1c0>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f023 0207 	bic.w	r2, r3, #7
 8002d36:	4965      	ldr	r1, [pc, #404]	; (8002ecc <HAL_RCC_ClockConfig+0x1c0>)
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d3e:	4b63      	ldr	r3, [pc, #396]	; (8002ecc <HAL_RCC_ClockConfig+0x1c0>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 0307 	and.w	r3, r3, #7
 8002d46:	683a      	ldr	r2, [r7, #0]
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	d001      	beq.n	8002d50 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e0b8      	b.n	8002ec2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 0302 	and.w	r3, r3, #2
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d020      	beq.n	8002d9e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f003 0304 	and.w	r3, r3, #4
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d005      	beq.n	8002d74 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d68:	4b59      	ldr	r3, [pc, #356]	; (8002ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	4a58      	ldr	r2, [pc, #352]	; (8002ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d6e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002d72:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 0308 	and.w	r3, r3, #8
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d005      	beq.n	8002d8c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d80:	4b53      	ldr	r3, [pc, #332]	; (8002ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	4a52      	ldr	r2, [pc, #328]	; (8002ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d86:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002d8a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d8c:	4b50      	ldr	r3, [pc, #320]	; (8002ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	494d      	ldr	r1, [pc, #308]	; (8002ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 0301 	and.w	r3, r3, #1
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d040      	beq.n	8002e2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d107      	bne.n	8002dc2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002db2:	4b47      	ldr	r3, [pc, #284]	; (8002ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d115      	bne.n	8002dea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e07f      	b.n	8002ec2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	2b02      	cmp	r3, #2
 8002dc8:	d107      	bne.n	8002dda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dca:	4b41      	ldr	r3, [pc, #260]	; (8002ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d109      	bne.n	8002dea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e073      	b.n	8002ec2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dda:	4b3d      	ldr	r3, [pc, #244]	; (8002ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 0302 	and.w	r3, r3, #2
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d101      	bne.n	8002dea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e06b      	b.n	8002ec2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002dea:	4b39      	ldr	r3, [pc, #228]	; (8002ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	f023 0203 	bic.w	r2, r3, #3
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	4936      	ldr	r1, [pc, #216]	; (8002ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002dfc:	f7fe ffb2 	bl	8001d64 <HAL_GetTick>
 8002e00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e02:	e00a      	b.n	8002e1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e04:	f7fe ffae 	bl	8001d64 <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d901      	bls.n	8002e1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e16:	2303      	movs	r3, #3
 8002e18:	e053      	b.n	8002ec2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e1a:	4b2d      	ldr	r3, [pc, #180]	; (8002ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	f003 020c 	and.w	r2, r3, #12
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d1eb      	bne.n	8002e04 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e2c:	4b27      	ldr	r3, [pc, #156]	; (8002ecc <HAL_RCC_ClockConfig+0x1c0>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 0307 	and.w	r3, r3, #7
 8002e34:	683a      	ldr	r2, [r7, #0]
 8002e36:	429a      	cmp	r2, r3
 8002e38:	d210      	bcs.n	8002e5c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e3a:	4b24      	ldr	r3, [pc, #144]	; (8002ecc <HAL_RCC_ClockConfig+0x1c0>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f023 0207 	bic.w	r2, r3, #7
 8002e42:	4922      	ldr	r1, [pc, #136]	; (8002ecc <HAL_RCC_ClockConfig+0x1c0>)
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	4313      	orrs	r3, r2
 8002e48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e4a:	4b20      	ldr	r3, [pc, #128]	; (8002ecc <HAL_RCC_ClockConfig+0x1c0>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 0307 	and.w	r3, r3, #7
 8002e52:	683a      	ldr	r2, [r7, #0]
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d001      	beq.n	8002e5c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e032      	b.n	8002ec2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 0304 	and.w	r3, r3, #4
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d008      	beq.n	8002e7a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e68:	4b19      	ldr	r3, [pc, #100]	; (8002ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	4916      	ldr	r1, [pc, #88]	; (8002ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e76:	4313      	orrs	r3, r2
 8002e78:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0308 	and.w	r3, r3, #8
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d009      	beq.n	8002e9a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002e86:	4b12      	ldr	r3, [pc, #72]	; (8002ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	691b      	ldr	r3, [r3, #16]
 8002e92:	00db      	lsls	r3, r3, #3
 8002e94:	490e      	ldr	r1, [pc, #56]	; (8002ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e96:	4313      	orrs	r3, r2
 8002e98:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002e9a:	f000 f821 	bl	8002ee0 <HAL_RCC_GetSysClockFreq>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	4b0b      	ldr	r3, [pc, #44]	; (8002ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	091b      	lsrs	r3, r3, #4
 8002ea6:	f003 030f 	and.w	r3, r3, #15
 8002eaa:	490a      	ldr	r1, [pc, #40]	; (8002ed4 <HAL_RCC_ClockConfig+0x1c8>)
 8002eac:	5ccb      	ldrb	r3, [r1, r3]
 8002eae:	fa22 f303 	lsr.w	r3, r2, r3
 8002eb2:	4a09      	ldr	r2, [pc, #36]	; (8002ed8 <HAL_RCC_ClockConfig+0x1cc>)
 8002eb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002eb6:	4b09      	ldr	r3, [pc, #36]	; (8002edc <HAL_RCC_ClockConfig+0x1d0>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f7fe ff10 	bl	8001ce0 <HAL_InitTick>

  return HAL_OK;
 8002ec0:	2300      	movs	r3, #0
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3710      	adds	r7, #16
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	bf00      	nop
 8002ecc:	40022000 	.word	0x40022000
 8002ed0:	40021000 	.word	0x40021000
 8002ed4:	080068d8 	.word	0x080068d8
 8002ed8:	20000000 	.word	0x20000000
 8002edc:	20000004 	.word	0x20000004

08002ee0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ee0:	b490      	push	{r4, r7}
 8002ee2:	b08a      	sub	sp, #40	; 0x28
 8002ee4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002ee6:	4b29      	ldr	r3, [pc, #164]	; (8002f8c <HAL_RCC_GetSysClockFreq+0xac>)
 8002ee8:	1d3c      	adds	r4, r7, #4
 8002eea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002eec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002ef0:	f240 2301 	movw	r3, #513	; 0x201
 8002ef4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	61fb      	str	r3, [r7, #28]
 8002efa:	2300      	movs	r3, #0
 8002efc:	61bb      	str	r3, [r7, #24]
 8002efe:	2300      	movs	r3, #0
 8002f00:	627b      	str	r3, [r7, #36]	; 0x24
 8002f02:	2300      	movs	r3, #0
 8002f04:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002f06:	2300      	movs	r3, #0
 8002f08:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002f0a:	4b21      	ldr	r3, [pc, #132]	; (8002f90 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002f10:	69fb      	ldr	r3, [r7, #28]
 8002f12:	f003 030c 	and.w	r3, r3, #12
 8002f16:	2b04      	cmp	r3, #4
 8002f18:	d002      	beq.n	8002f20 <HAL_RCC_GetSysClockFreq+0x40>
 8002f1a:	2b08      	cmp	r3, #8
 8002f1c:	d003      	beq.n	8002f26 <HAL_RCC_GetSysClockFreq+0x46>
 8002f1e:	e02b      	b.n	8002f78 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002f20:	4b1c      	ldr	r3, [pc, #112]	; (8002f94 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002f22:	623b      	str	r3, [r7, #32]
      break;
 8002f24:	e02b      	b.n	8002f7e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002f26:	69fb      	ldr	r3, [r7, #28]
 8002f28:	0c9b      	lsrs	r3, r3, #18
 8002f2a:	f003 030f 	and.w	r3, r3, #15
 8002f2e:	3328      	adds	r3, #40	; 0x28
 8002f30:	443b      	add	r3, r7
 8002f32:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002f36:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002f38:	69fb      	ldr	r3, [r7, #28]
 8002f3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d012      	beq.n	8002f68 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002f42:	4b13      	ldr	r3, [pc, #76]	; (8002f90 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	0c5b      	lsrs	r3, r3, #17
 8002f48:	f003 0301 	and.w	r3, r3, #1
 8002f4c:	3328      	adds	r3, #40	; 0x28
 8002f4e:	443b      	add	r3, r7
 8002f50:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002f54:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	4a0e      	ldr	r2, [pc, #56]	; (8002f94 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002f5a:	fb03 f202 	mul.w	r2, r3, r2
 8002f5e:	69bb      	ldr	r3, [r7, #24]
 8002f60:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f64:	627b      	str	r3, [r7, #36]	; 0x24
 8002f66:	e004      	b.n	8002f72 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	4a0b      	ldr	r2, [pc, #44]	; (8002f98 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f6c:	fb02 f303 	mul.w	r3, r2, r3
 8002f70:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f74:	623b      	str	r3, [r7, #32]
      break;
 8002f76:	e002      	b.n	8002f7e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002f78:	4b06      	ldr	r3, [pc, #24]	; (8002f94 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002f7a:	623b      	str	r3, [r7, #32]
      break;
 8002f7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f7e:	6a3b      	ldr	r3, [r7, #32]
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	3728      	adds	r7, #40	; 0x28
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bc90      	pop	{r4, r7}
 8002f88:	4770      	bx	lr
 8002f8a:	bf00      	nop
 8002f8c:	080068c8 	.word	0x080068c8
 8002f90:	40021000 	.word	0x40021000
 8002f94:	007a1200 	.word	0x007a1200
 8002f98:	003d0900 	.word	0x003d0900

08002f9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fa0:	4b02      	ldr	r3, [pc, #8]	; (8002fac <HAL_RCC_GetHCLKFreq+0x10>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bc80      	pop	{r7}
 8002faa:	4770      	bx	lr
 8002fac:	20000000 	.word	0x20000000

08002fb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002fb4:	f7ff fff2 	bl	8002f9c <HAL_RCC_GetHCLKFreq>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	4b05      	ldr	r3, [pc, #20]	; (8002fd0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	0a1b      	lsrs	r3, r3, #8
 8002fc0:	f003 0307 	and.w	r3, r3, #7
 8002fc4:	4903      	ldr	r1, [pc, #12]	; (8002fd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fc6:	5ccb      	ldrb	r3, [r1, r3]
 8002fc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	bd80      	pop	{r7, pc}
 8002fd0:	40021000 	.word	0x40021000
 8002fd4:	080068e8 	.word	0x080068e8

08002fd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002fdc:	f7ff ffde 	bl	8002f9c <HAL_RCC_GetHCLKFreq>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	4b05      	ldr	r3, [pc, #20]	; (8002ff8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	0adb      	lsrs	r3, r3, #11
 8002fe8:	f003 0307 	and.w	r3, r3, #7
 8002fec:	4903      	ldr	r1, [pc, #12]	; (8002ffc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002fee:	5ccb      	ldrb	r3, [r1, r3]
 8002ff0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	bd80      	pop	{r7, pc}
 8002ff8:	40021000 	.word	0x40021000
 8002ffc:	080068e8 	.word	0x080068e8

08003000 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003000:	b480      	push	{r7}
 8003002:	b085      	sub	sp, #20
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003008:	4b0a      	ldr	r3, [pc, #40]	; (8003034 <RCC_Delay+0x34>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a0a      	ldr	r2, [pc, #40]	; (8003038 <RCC_Delay+0x38>)
 800300e:	fba2 2303 	umull	r2, r3, r2, r3
 8003012:	0a5b      	lsrs	r3, r3, #9
 8003014:	687a      	ldr	r2, [r7, #4]
 8003016:	fb02 f303 	mul.w	r3, r2, r3
 800301a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800301c:	bf00      	nop
  }
  while (Delay --);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	1e5a      	subs	r2, r3, #1
 8003022:	60fa      	str	r2, [r7, #12]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d1f9      	bne.n	800301c <RCC_Delay+0x1c>
}
 8003028:	bf00      	nop
 800302a:	bf00      	nop
 800302c:	3714      	adds	r7, #20
 800302e:	46bd      	mov	sp, r7
 8003030:	bc80      	pop	{r7}
 8003032:	4770      	bx	lr
 8003034:	20000000 	.word	0x20000000
 8003038:	10624dd3 	.word	0x10624dd3

0800303c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b082      	sub	sp, #8
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d101      	bne.n	800304e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	e03f      	b.n	80030ce <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003054:	b2db      	uxtb	r3, r3
 8003056:	2b00      	cmp	r3, #0
 8003058:	d106      	bne.n	8003068 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2200      	movs	r2, #0
 800305e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f7fe fc32 	bl	80018cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2224      	movs	r2, #36	; 0x24
 800306c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	68da      	ldr	r2, [r3, #12]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800307e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003080:	6878      	ldr	r0, [r7, #4]
 8003082:	f000 fca3 	bl	80039cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	691a      	ldr	r2, [r3, #16]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003094:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	695a      	ldr	r2, [r3, #20]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80030a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	68da      	ldr	r2, [r3, #12]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80030b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2200      	movs	r2, #0
 80030ba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2220      	movs	r2, #32
 80030c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2220      	movs	r2, #32
 80030c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80030cc:	2300      	movs	r3, #0
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	3708      	adds	r7, #8
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}

080030d6 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80030d6:	b580      	push	{r7, lr}
 80030d8:	b084      	sub	sp, #16
 80030da:	af00      	add	r7, sp, #0
 80030dc:	60f8      	str	r0, [r7, #12]
 80030de:	60b9      	str	r1, [r7, #8]
 80030e0:	4613      	mov	r3, r2
 80030e2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80030ea:	b2db      	uxtb	r3, r3
 80030ec:	2b20      	cmp	r3, #32
 80030ee:	d11d      	bne.n	800312c <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d002      	beq.n	80030fc <HAL_UART_Receive_DMA+0x26>
 80030f6:	88fb      	ldrh	r3, [r7, #6]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d101      	bne.n	8003100 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	e016      	b.n	800312e <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003106:	2b01      	cmp	r3, #1
 8003108:	d101      	bne.n	800310e <HAL_UART_Receive_DMA+0x38>
 800310a:	2302      	movs	r3, #2
 800310c:	e00f      	b.n	800312e <HAL_UART_Receive_DMA+0x58>
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2201      	movs	r2, #1
 8003112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2200      	movs	r2, #0
 800311a:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 800311c:	88fb      	ldrh	r3, [r7, #6]
 800311e:	461a      	mov	r2, r3
 8003120:	68b9      	ldr	r1, [r7, #8]
 8003122:	68f8      	ldr	r0, [r7, #12]
 8003124:	f000 fa88 	bl	8003638 <UART_Start_Receive_DMA>
 8003128:	4603      	mov	r3, r0
 800312a:	e000      	b.n	800312e <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800312c:	2302      	movs	r3, #2
  }
}
 800312e:	4618      	mov	r0, r3
 8003130:	3710      	adds	r7, #16
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
	...

08003138 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b08a      	sub	sp, #40	; 0x28
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	68db      	ldr	r3, [r3, #12]
 800314e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	695b      	ldr	r3, [r3, #20]
 8003156:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003158:	2300      	movs	r3, #0
 800315a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800315c:	2300      	movs	r3, #0
 800315e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003162:	f003 030f 	and.w	r3, r3, #15
 8003166:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003168:	69bb      	ldr	r3, [r7, #24]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d10d      	bne.n	800318a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800316e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003170:	f003 0320 	and.w	r3, r3, #32
 8003174:	2b00      	cmp	r3, #0
 8003176:	d008      	beq.n	800318a <HAL_UART_IRQHandler+0x52>
 8003178:	6a3b      	ldr	r3, [r7, #32]
 800317a:	f003 0320 	and.w	r3, r3, #32
 800317e:	2b00      	cmp	r3, #0
 8003180:	d003      	beq.n	800318a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f000 fb78 	bl	8003878 <UART_Receive_IT>
      return;
 8003188:	e17b      	b.n	8003482 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800318a:	69bb      	ldr	r3, [r7, #24]
 800318c:	2b00      	cmp	r3, #0
 800318e:	f000 80b1 	beq.w	80032f4 <HAL_UART_IRQHandler+0x1bc>
 8003192:	69fb      	ldr	r3, [r7, #28]
 8003194:	f003 0301 	and.w	r3, r3, #1
 8003198:	2b00      	cmp	r3, #0
 800319a:	d105      	bne.n	80031a8 <HAL_UART_IRQHandler+0x70>
 800319c:	6a3b      	ldr	r3, [r7, #32]
 800319e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	f000 80a6 	beq.w	80032f4 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80031a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031aa:	f003 0301 	and.w	r3, r3, #1
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d00a      	beq.n	80031c8 <HAL_UART_IRQHandler+0x90>
 80031b2:	6a3b      	ldr	r3, [r7, #32]
 80031b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d005      	beq.n	80031c8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c0:	f043 0201 	orr.w	r2, r3, #1
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80031c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ca:	f003 0304 	and.w	r3, r3, #4
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d00a      	beq.n	80031e8 <HAL_UART_IRQHandler+0xb0>
 80031d2:	69fb      	ldr	r3, [r7, #28]
 80031d4:	f003 0301 	and.w	r3, r3, #1
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d005      	beq.n	80031e8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e0:	f043 0202 	orr.w	r2, r3, #2
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80031e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ea:	f003 0302 	and.w	r3, r3, #2
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d00a      	beq.n	8003208 <HAL_UART_IRQHandler+0xd0>
 80031f2:	69fb      	ldr	r3, [r7, #28]
 80031f4:	f003 0301 	and.w	r3, r3, #1
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d005      	beq.n	8003208 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003200:	f043 0204 	orr.w	r2, r3, #4
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320a:	f003 0308 	and.w	r3, r3, #8
 800320e:	2b00      	cmp	r3, #0
 8003210:	d00f      	beq.n	8003232 <HAL_UART_IRQHandler+0xfa>
 8003212:	6a3b      	ldr	r3, [r7, #32]
 8003214:	f003 0320 	and.w	r3, r3, #32
 8003218:	2b00      	cmp	r3, #0
 800321a:	d104      	bne.n	8003226 <HAL_UART_IRQHandler+0xee>
 800321c:	69fb      	ldr	r3, [r7, #28]
 800321e:	f003 0301 	and.w	r3, r3, #1
 8003222:	2b00      	cmp	r3, #0
 8003224:	d005      	beq.n	8003232 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322a:	f043 0208 	orr.w	r2, r3, #8
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003236:	2b00      	cmp	r3, #0
 8003238:	f000 811e 	beq.w	8003478 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800323c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800323e:	f003 0320 	and.w	r3, r3, #32
 8003242:	2b00      	cmp	r3, #0
 8003244:	d007      	beq.n	8003256 <HAL_UART_IRQHandler+0x11e>
 8003246:	6a3b      	ldr	r3, [r7, #32]
 8003248:	f003 0320 	and.w	r3, r3, #32
 800324c:	2b00      	cmp	r3, #0
 800324e:	d002      	beq.n	8003256 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	f000 fb11 	bl	8003878 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	695b      	ldr	r3, [r3, #20]
 800325c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003260:	2b00      	cmp	r3, #0
 8003262:	bf14      	ite	ne
 8003264:	2301      	movne	r3, #1
 8003266:	2300      	moveq	r3, #0
 8003268:	b2db      	uxtb	r3, r3
 800326a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003270:	f003 0308 	and.w	r3, r3, #8
 8003274:	2b00      	cmp	r3, #0
 8003276:	d102      	bne.n	800327e <HAL_UART_IRQHandler+0x146>
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d031      	beq.n	80032e2 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f000 fa53 	bl	800372a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	695b      	ldr	r3, [r3, #20]
 800328a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800328e:	2b00      	cmp	r3, #0
 8003290:	d023      	beq.n	80032da <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	695a      	ldr	r2, [r3, #20]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032a0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d013      	beq.n	80032d2 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ae:	4a76      	ldr	r2, [pc, #472]	; (8003488 <HAL_UART_IRQHandler+0x350>)
 80032b0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032b6:	4618      	mov	r0, r3
 80032b8:	f7fe ff60 	bl	800217c <HAL_DMA_Abort_IT>
 80032bc:	4603      	mov	r3, r0
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d016      	beq.n	80032f0 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032c8:	687a      	ldr	r2, [r7, #4]
 80032ca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80032cc:	4610      	mov	r0, r2
 80032ce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032d0:	e00e      	b.n	80032f0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f000 f8ec 	bl	80034b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032d8:	e00a      	b.n	80032f0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f000 f8e8 	bl	80034b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032e0:	e006      	b.n	80032f0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f000 f8e4 	bl	80034b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2200      	movs	r2, #0
 80032ec:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80032ee:	e0c3      	b.n	8003478 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032f0:	bf00      	nop
    return;
 80032f2:	e0c1      	b.n	8003478 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	f040 80a1 	bne.w	8003440 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80032fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003300:	f003 0310 	and.w	r3, r3, #16
 8003304:	2b00      	cmp	r3, #0
 8003306:	f000 809b 	beq.w	8003440 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800330a:	6a3b      	ldr	r3, [r7, #32]
 800330c:	f003 0310 	and.w	r3, r3, #16
 8003310:	2b00      	cmp	r3, #0
 8003312:	f000 8095 	beq.w	8003440 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003316:	2300      	movs	r3, #0
 8003318:	60fb      	str	r3, [r7, #12]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	60fb      	str	r3, [r7, #12]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	60fb      	str	r3, [r7, #12]
 800332a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	695b      	ldr	r3, [r3, #20]
 8003332:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003336:	2b00      	cmp	r3, #0
 8003338:	d04e      	beq.n	80033d8 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003344:	8a3b      	ldrh	r3, [r7, #16]
 8003346:	2b00      	cmp	r3, #0
 8003348:	f000 8098 	beq.w	800347c <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003350:	8a3a      	ldrh	r2, [r7, #16]
 8003352:	429a      	cmp	r2, r3
 8003354:	f080 8092 	bcs.w	800347c <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	8a3a      	ldrh	r2, [r7, #16]
 800335c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003362:	699b      	ldr	r3, [r3, #24]
 8003364:	2b20      	cmp	r3, #32
 8003366:	d02b      	beq.n	80033c0 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	68da      	ldr	r2, [r3, #12]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003376:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	695a      	ldr	r2, [r3, #20]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f022 0201 	bic.w	r2, r2, #1
 8003386:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	695a      	ldr	r2, [r3, #20]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003396:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2220      	movs	r2, #32
 800339c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2200      	movs	r2, #0
 80033a4:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	68da      	ldr	r2, [r3, #12]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f022 0210 	bic.w	r2, r2, #16
 80033b4:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ba:	4618      	mov	r0, r3
 80033bc:	f7fe fea3 	bl	8002106 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80033c8:	b29b      	uxth	r3, r3
 80033ca:	1ad3      	subs	r3, r2, r3
 80033cc:	b29b      	uxth	r3, r3
 80033ce:	4619      	mov	r1, r3
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	f000 f876 	bl	80034c2 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80033d6:	e051      	b.n	800347c <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80033e0:	b29b      	uxth	r3, r3
 80033e2:	1ad3      	subs	r3, r2, r3
 80033e4:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80033ea:	b29b      	uxth	r3, r3
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d047      	beq.n	8003480 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80033f0:	8a7b      	ldrh	r3, [r7, #18]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d044      	beq.n	8003480 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	68da      	ldr	r2, [r3, #12]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003404:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	695a      	ldr	r2, [r3, #20]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f022 0201 	bic.w	r2, r2, #1
 8003414:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2220      	movs	r2, #32
 800341a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2200      	movs	r2, #0
 8003422:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	68da      	ldr	r2, [r3, #12]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f022 0210 	bic.w	r2, r2, #16
 8003432:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003434:	8a7b      	ldrh	r3, [r7, #18]
 8003436:	4619      	mov	r1, r3
 8003438:	6878      	ldr	r0, [r7, #4]
 800343a:	f000 f842 	bl	80034c2 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800343e:	e01f      	b.n	8003480 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003442:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003446:	2b00      	cmp	r3, #0
 8003448:	d008      	beq.n	800345c <HAL_UART_IRQHandler+0x324>
 800344a:	6a3b      	ldr	r3, [r7, #32]
 800344c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003450:	2b00      	cmp	r3, #0
 8003452:	d003      	beq.n	800345c <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	f000 f9a8 	bl	80037aa <UART_Transmit_IT>
    return;
 800345a:	e012      	b.n	8003482 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800345c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800345e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003462:	2b00      	cmp	r3, #0
 8003464:	d00d      	beq.n	8003482 <HAL_UART_IRQHandler+0x34a>
 8003466:	6a3b      	ldr	r3, [r7, #32]
 8003468:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800346c:	2b00      	cmp	r3, #0
 800346e:	d008      	beq.n	8003482 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	f000 f9e9 	bl	8003848 <UART_EndTransmit_IT>
    return;
 8003476:	e004      	b.n	8003482 <HAL_UART_IRQHandler+0x34a>
    return;
 8003478:	bf00      	nop
 800347a:	e002      	b.n	8003482 <HAL_UART_IRQHandler+0x34a>
      return;
 800347c:	bf00      	nop
 800347e:	e000      	b.n	8003482 <HAL_UART_IRQHandler+0x34a>
      return;
 8003480:	bf00      	nop
  }
}
 8003482:	3728      	adds	r7, #40	; 0x28
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}
 8003488:	08003783 	.word	0x08003783

0800348c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800348c:	b480      	push	{r7}
 800348e:	b083      	sub	sp, #12
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003494:	bf00      	nop
 8003496:	370c      	adds	r7, #12
 8003498:	46bd      	mov	sp, r7
 800349a:	bc80      	pop	{r7}
 800349c:	4770      	bx	lr

0800349e <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800349e:	b480      	push	{r7}
 80034a0:	b083      	sub	sp, #12
 80034a2:	af00      	add	r7, sp, #0
 80034a4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80034a6:	bf00      	nop
 80034a8:	370c      	adds	r7, #12
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bc80      	pop	{r7}
 80034ae:	4770      	bx	lr

080034b0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b083      	sub	sp, #12
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80034b8:	bf00      	nop
 80034ba:	370c      	adds	r7, #12
 80034bc:	46bd      	mov	sp, r7
 80034be:	bc80      	pop	{r7}
 80034c0:	4770      	bx	lr

080034c2 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80034c2:	b480      	push	{r7}
 80034c4:	b083      	sub	sp, #12
 80034c6:	af00      	add	r7, sp, #0
 80034c8:	6078      	str	r0, [r7, #4]
 80034ca:	460b      	mov	r3, r1
 80034cc:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80034ce:	bf00      	nop
 80034d0:	370c      	adds	r7, #12
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bc80      	pop	{r7}
 80034d6:	4770      	bx	lr

080034d8 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b084      	sub	sp, #16
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e4:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f003 0320 	and.w	r3, r3, #32
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d12a      	bne.n	800354a <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2200      	movs	r2, #0
 80034f8:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	68da      	ldr	r2, [r3, #12]
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003508:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	695a      	ldr	r2, [r3, #20]
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f022 0201 	bic.w	r2, r2, #1
 8003518:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	695a      	ldr	r2, [r3, #20]
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003528:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2220      	movs	r2, #32
 800352e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003536:	2b01      	cmp	r3, #1
 8003538:	d107      	bne.n	800354a <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	68da      	ldr	r2, [r3, #12]
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f022 0210 	bic.w	r2, r2, #16
 8003548:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800354e:	2b01      	cmp	r3, #1
 8003550:	d106      	bne.n	8003560 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003556:	4619      	mov	r1, r3
 8003558:	68f8      	ldr	r0, [r7, #12]
 800355a:	f7ff ffb2 	bl	80034c2 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800355e:	e002      	b.n	8003566 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8003560:	68f8      	ldr	r0, [r7, #12]
 8003562:	f7fe f825 	bl	80015b0 <HAL_UART_RxCpltCallback>
}
 8003566:	bf00      	nop
 8003568:	3710      	adds	r7, #16
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}

0800356e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800356e:	b580      	push	{r7, lr}
 8003570:	b084      	sub	sp, #16
 8003572:	af00      	add	r7, sp, #0
 8003574:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800357a:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003580:	2b01      	cmp	r3, #1
 8003582:	d108      	bne.n	8003596 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003588:	085b      	lsrs	r3, r3, #1
 800358a:	b29b      	uxth	r3, r3
 800358c:	4619      	mov	r1, r3
 800358e:	68f8      	ldr	r0, [r7, #12]
 8003590:	f7ff ff97 	bl	80034c2 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003594:	e002      	b.n	800359c <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8003596:	68f8      	ldr	r0, [r7, #12]
 8003598:	f7ff ff81 	bl	800349e <HAL_UART_RxHalfCpltCallback>
}
 800359c:	bf00      	nop
 800359e:	3710      	adds	r7, #16
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}

080035a4 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b084      	sub	sp, #16
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80035ac:	2300      	movs	r3, #0
 80035ae:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b4:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	695b      	ldr	r3, [r3, #20]
 80035bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	bf14      	ite	ne
 80035c4:	2301      	movne	r3, #1
 80035c6:	2300      	moveq	r3, #0
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035d2:	b2db      	uxtb	r3, r3
 80035d4:	2b21      	cmp	r3, #33	; 0x21
 80035d6:	d108      	bne.n	80035ea <UART_DMAError+0x46>
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d005      	beq.n	80035ea <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	2200      	movs	r2, #0
 80035e2:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80035e4:	68b8      	ldr	r0, [r7, #8]
 80035e6:	f000 f88b 	bl	8003700 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	695b      	ldr	r3, [r3, #20]
 80035f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	bf14      	ite	ne
 80035f8:	2301      	movne	r3, #1
 80035fa:	2300      	moveq	r3, #0
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003606:	b2db      	uxtb	r3, r3
 8003608:	2b22      	cmp	r3, #34	; 0x22
 800360a:	d108      	bne.n	800361e <UART_DMAError+0x7a>
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d005      	beq.n	800361e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	2200      	movs	r2, #0
 8003616:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003618:	68b8      	ldr	r0, [r7, #8]
 800361a:	f000 f886 	bl	800372a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003622:	f043 0210 	orr.w	r2, r3, #16
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800362a:	68b8      	ldr	r0, [r7, #8]
 800362c:	f7ff ff40 	bl	80034b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003630:	bf00      	nop
 8003632:	3710      	adds	r7, #16
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}

08003638 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b086      	sub	sp, #24
 800363c:	af00      	add	r7, sp, #0
 800363e:	60f8      	str	r0, [r7, #12]
 8003640:	60b9      	str	r1, [r7, #8]
 8003642:	4613      	mov	r3, r2
 8003644:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8003646:	68ba      	ldr	r2, [r7, #8]
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	88fa      	ldrh	r2, [r7, #6]
 8003650:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2200      	movs	r2, #0
 8003656:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2222      	movs	r2, #34	; 0x22
 800365c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003664:	4a23      	ldr	r2, [pc, #140]	; (80036f4 <UART_Start_Receive_DMA+0xbc>)
 8003666:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800366c:	4a22      	ldr	r2, [pc, #136]	; (80036f8 <UART_Start_Receive_DMA+0xc0>)
 800366e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003674:	4a21      	ldr	r2, [pc, #132]	; (80036fc <UART_Start_Receive_DMA+0xc4>)
 8003676:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800367c:	2200      	movs	r2, #0
 800367e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8003680:	f107 0308 	add.w	r3, r7, #8
 8003684:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	3304      	adds	r3, #4
 8003690:	4619      	mov	r1, r3
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	88fb      	ldrh	r3, [r7, #6]
 8003698:	f7fe fcd6 	bl	8002048 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800369c:	2300      	movs	r3, #0
 800369e:	613b      	str	r3, [r7, #16]
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	613b      	str	r3, [r7, #16]
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	613b      	str	r3, [r7, #16]
 80036b0:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2200      	movs	r2, #0
 80036b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	68da      	ldr	r2, [r3, #12]
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036c8:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	695a      	ldr	r2, [r3, #20]
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f042 0201 	orr.w	r2, r2, #1
 80036d8:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	695a      	ldr	r2, [r3, #20]
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80036e8:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 80036ea:	2300      	movs	r3, #0
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	3718      	adds	r7, #24
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}
 80036f4:	080034d9 	.word	0x080034d9
 80036f8:	0800356f 	.word	0x0800356f
 80036fc:	080035a5 	.word	0x080035a5

08003700 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003700:	b480      	push	{r7}
 8003702:	b083      	sub	sp, #12
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	68da      	ldr	r2, [r3, #12]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003716:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2220      	movs	r2, #32
 800371c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8003720:	bf00      	nop
 8003722:	370c      	adds	r7, #12
 8003724:	46bd      	mov	sp, r7
 8003726:	bc80      	pop	{r7}
 8003728:	4770      	bx	lr

0800372a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800372a:	b480      	push	{r7}
 800372c:	b083      	sub	sp, #12
 800372e:	af00      	add	r7, sp, #0
 8003730:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	68da      	ldr	r2, [r3, #12]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003740:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	695a      	ldr	r2, [r3, #20]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f022 0201 	bic.w	r2, r2, #1
 8003750:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003756:	2b01      	cmp	r3, #1
 8003758:	d107      	bne.n	800376a <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	68da      	ldr	r2, [r3, #12]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f022 0210 	bic.w	r2, r2, #16
 8003768:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2220      	movs	r2, #32
 800376e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2200      	movs	r2, #0
 8003776:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003778:	bf00      	nop
 800377a:	370c      	adds	r7, #12
 800377c:	46bd      	mov	sp, r7
 800377e:	bc80      	pop	{r7}
 8003780:	4770      	bx	lr

08003782 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003782:	b580      	push	{r7, lr}
 8003784:	b084      	sub	sp, #16
 8003786:	af00      	add	r7, sp, #0
 8003788:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2200      	movs	r2, #0
 8003794:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2200      	movs	r2, #0
 800379a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800379c:	68f8      	ldr	r0, [r7, #12]
 800379e:	f7ff fe87 	bl	80034b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80037a2:	bf00      	nop
 80037a4:	3710      	adds	r7, #16
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}

080037aa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80037aa:	b480      	push	{r7}
 80037ac:	b085      	sub	sp, #20
 80037ae:	af00      	add	r7, sp, #0
 80037b0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	2b21      	cmp	r3, #33	; 0x21
 80037bc:	d13e      	bne.n	800383c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037c6:	d114      	bne.n	80037f2 <UART_Transmit_IT+0x48>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	691b      	ldr	r3, [r3, #16]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d110      	bne.n	80037f2 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6a1b      	ldr	r3, [r3, #32]
 80037d4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	881b      	ldrh	r3, [r3, #0]
 80037da:	461a      	mov	r2, r3
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80037e4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6a1b      	ldr	r3, [r3, #32]
 80037ea:	1c9a      	adds	r2, r3, #2
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	621a      	str	r2, [r3, #32]
 80037f0:	e008      	b.n	8003804 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6a1b      	ldr	r3, [r3, #32]
 80037f6:	1c59      	adds	r1, r3, #1
 80037f8:	687a      	ldr	r2, [r7, #4]
 80037fa:	6211      	str	r1, [r2, #32]
 80037fc:	781a      	ldrb	r2, [r3, #0]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003808:	b29b      	uxth	r3, r3
 800380a:	3b01      	subs	r3, #1
 800380c:	b29b      	uxth	r3, r3
 800380e:	687a      	ldr	r2, [r7, #4]
 8003810:	4619      	mov	r1, r3
 8003812:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003814:	2b00      	cmp	r3, #0
 8003816:	d10f      	bne.n	8003838 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	68da      	ldr	r2, [r3, #12]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003826:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	68da      	ldr	r2, [r3, #12]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003836:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003838:	2300      	movs	r3, #0
 800383a:	e000      	b.n	800383e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800383c:	2302      	movs	r3, #2
  }
}
 800383e:	4618      	mov	r0, r3
 8003840:	3714      	adds	r7, #20
 8003842:	46bd      	mov	sp, r7
 8003844:	bc80      	pop	{r7}
 8003846:	4770      	bx	lr

08003848 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b082      	sub	sp, #8
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	68da      	ldr	r2, [r3, #12]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800385e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2220      	movs	r2, #32
 8003864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003868:	6878      	ldr	r0, [r7, #4]
 800386a:	f7ff fe0f 	bl	800348c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800386e:	2300      	movs	r3, #0
}
 8003870:	4618      	mov	r0, r3
 8003872:	3708      	adds	r7, #8
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}

08003878 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b086      	sub	sp, #24
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003886:	b2db      	uxtb	r3, r3
 8003888:	2b22      	cmp	r3, #34	; 0x22
 800388a:	f040 8099 	bne.w	80039c0 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003896:	d117      	bne.n	80038c8 <UART_Receive_IT+0x50>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	691b      	ldr	r3, [r3, #16]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d113      	bne.n	80038c8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80038a0:	2300      	movs	r3, #0
 80038a2:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038a8:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	b29b      	uxth	r3, r3
 80038b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038b6:	b29a      	uxth	r2, r3
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038c0:	1c9a      	adds	r2, r3, #2
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	629a      	str	r2, [r3, #40]	; 0x28
 80038c6:	e026      	b.n	8003916 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038cc:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80038ce:	2300      	movs	r3, #0
 80038d0:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038da:	d007      	beq.n	80038ec <UART_Receive_IT+0x74>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d10a      	bne.n	80038fa <UART_Receive_IT+0x82>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	691b      	ldr	r3, [r3, #16]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d106      	bne.n	80038fa <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	b2da      	uxtb	r2, r3
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	701a      	strb	r2, [r3, #0]
 80038f8:	e008      	b.n	800390c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	b2db      	uxtb	r3, r3
 8003902:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003906:	b2da      	uxtb	r2, r3
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003910:	1c5a      	adds	r2, r3, #1
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800391a:	b29b      	uxth	r3, r3
 800391c:	3b01      	subs	r3, #1
 800391e:	b29b      	uxth	r3, r3
 8003920:	687a      	ldr	r2, [r7, #4]
 8003922:	4619      	mov	r1, r3
 8003924:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003926:	2b00      	cmp	r3, #0
 8003928:	d148      	bne.n	80039bc <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	68da      	ldr	r2, [r3, #12]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f022 0220 	bic.w	r2, r2, #32
 8003938:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	68da      	ldr	r2, [r3, #12]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003948:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	695a      	ldr	r2, [r3, #20]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f022 0201 	bic.w	r2, r2, #1
 8003958:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2220      	movs	r2, #32
 800395e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003966:	2b01      	cmp	r3, #1
 8003968:	d123      	bne.n	80039b2 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2200      	movs	r2, #0
 800396e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	68da      	ldr	r2, [r3, #12]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f022 0210 	bic.w	r2, r2, #16
 800397e:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 0310 	and.w	r3, r3, #16
 800398a:	2b10      	cmp	r3, #16
 800398c:	d10a      	bne.n	80039a4 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800398e:	2300      	movs	r3, #0
 8003990:	60fb      	str	r3, [r7, #12]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	60fb      	str	r3, [r7, #12]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	60fb      	str	r3, [r7, #12]
 80039a2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80039a8:	4619      	mov	r1, r3
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f7ff fd89 	bl	80034c2 <HAL_UARTEx_RxEventCallback>
 80039b0:	e002      	b.n	80039b8 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f7fd fdfc 	bl	80015b0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80039b8:	2300      	movs	r3, #0
 80039ba:	e002      	b.n	80039c2 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80039bc:	2300      	movs	r3, #0
 80039be:	e000      	b.n	80039c2 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80039c0:	2302      	movs	r3, #2
  }
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3718      	adds	r7, #24
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
	...

080039cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b084      	sub	sp, #16
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	691b      	ldr	r3, [r3, #16]
 80039da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	68da      	ldr	r2, [r3, #12]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	430a      	orrs	r2, r1
 80039e8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	689a      	ldr	r2, [r3, #8]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	691b      	ldr	r3, [r3, #16]
 80039f2:	431a      	orrs	r2, r3
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	695b      	ldr	r3, [r3, #20]
 80039f8:	4313      	orrs	r3, r2
 80039fa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	68db      	ldr	r3, [r3, #12]
 8003a02:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003a06:	f023 030c 	bic.w	r3, r3, #12
 8003a0a:	687a      	ldr	r2, [r7, #4]
 8003a0c:	6812      	ldr	r2, [r2, #0]
 8003a0e:	68b9      	ldr	r1, [r7, #8]
 8003a10:	430b      	orrs	r3, r1
 8003a12:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	695b      	ldr	r3, [r3, #20]
 8003a1a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	699a      	ldr	r2, [r3, #24]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	430a      	orrs	r2, r1
 8003a28:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a2c      	ldr	r2, [pc, #176]	; (8003ae0 <UART_SetConfig+0x114>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d103      	bne.n	8003a3c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003a34:	f7ff fad0 	bl	8002fd8 <HAL_RCC_GetPCLK2Freq>
 8003a38:	60f8      	str	r0, [r7, #12]
 8003a3a:	e002      	b.n	8003a42 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003a3c:	f7ff fab8 	bl	8002fb0 <HAL_RCC_GetPCLK1Freq>
 8003a40:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a42:	68fa      	ldr	r2, [r7, #12]
 8003a44:	4613      	mov	r3, r2
 8003a46:	009b      	lsls	r3, r3, #2
 8003a48:	4413      	add	r3, r2
 8003a4a:	009a      	lsls	r2, r3, #2
 8003a4c:	441a      	add	r2, r3
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	009b      	lsls	r3, r3, #2
 8003a54:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a58:	4a22      	ldr	r2, [pc, #136]	; (8003ae4 <UART_SetConfig+0x118>)
 8003a5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a5e:	095b      	lsrs	r3, r3, #5
 8003a60:	0119      	lsls	r1, r3, #4
 8003a62:	68fa      	ldr	r2, [r7, #12]
 8003a64:	4613      	mov	r3, r2
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	4413      	add	r3, r2
 8003a6a:	009a      	lsls	r2, r3, #2
 8003a6c:	441a      	add	r2, r3
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a78:	4b1a      	ldr	r3, [pc, #104]	; (8003ae4 <UART_SetConfig+0x118>)
 8003a7a:	fba3 0302 	umull	r0, r3, r3, r2
 8003a7e:	095b      	lsrs	r3, r3, #5
 8003a80:	2064      	movs	r0, #100	; 0x64
 8003a82:	fb00 f303 	mul.w	r3, r0, r3
 8003a86:	1ad3      	subs	r3, r2, r3
 8003a88:	011b      	lsls	r3, r3, #4
 8003a8a:	3332      	adds	r3, #50	; 0x32
 8003a8c:	4a15      	ldr	r2, [pc, #84]	; (8003ae4 <UART_SetConfig+0x118>)
 8003a8e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a92:	095b      	lsrs	r3, r3, #5
 8003a94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a98:	4419      	add	r1, r3
 8003a9a:	68fa      	ldr	r2, [r7, #12]
 8003a9c:	4613      	mov	r3, r2
 8003a9e:	009b      	lsls	r3, r3, #2
 8003aa0:	4413      	add	r3, r2
 8003aa2:	009a      	lsls	r2, r3, #2
 8003aa4:	441a      	add	r2, r3
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	009b      	lsls	r3, r3, #2
 8003aac:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ab0:	4b0c      	ldr	r3, [pc, #48]	; (8003ae4 <UART_SetConfig+0x118>)
 8003ab2:	fba3 0302 	umull	r0, r3, r3, r2
 8003ab6:	095b      	lsrs	r3, r3, #5
 8003ab8:	2064      	movs	r0, #100	; 0x64
 8003aba:	fb00 f303 	mul.w	r3, r0, r3
 8003abe:	1ad3      	subs	r3, r2, r3
 8003ac0:	011b      	lsls	r3, r3, #4
 8003ac2:	3332      	adds	r3, #50	; 0x32
 8003ac4:	4a07      	ldr	r2, [pc, #28]	; (8003ae4 <UART_SetConfig+0x118>)
 8003ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8003aca:	095b      	lsrs	r3, r3, #5
 8003acc:	f003 020f 	and.w	r2, r3, #15
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	440a      	add	r2, r1
 8003ad6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003ad8:	bf00      	nop
 8003ada:	3710      	adds	r7, #16
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}
 8003ae0:	40013800 	.word	0x40013800
 8003ae4:	51eb851f 	.word	0x51eb851f

08003ae8 <__errno>:
 8003ae8:	4b01      	ldr	r3, [pc, #4]	; (8003af0 <__errno+0x8>)
 8003aea:	6818      	ldr	r0, [r3, #0]
 8003aec:	4770      	bx	lr
 8003aee:	bf00      	nop
 8003af0:	2000000c 	.word	0x2000000c

08003af4 <__libc_init_array>:
 8003af4:	b570      	push	{r4, r5, r6, lr}
 8003af6:	2600      	movs	r6, #0
 8003af8:	4d0c      	ldr	r5, [pc, #48]	; (8003b2c <__libc_init_array+0x38>)
 8003afa:	4c0d      	ldr	r4, [pc, #52]	; (8003b30 <__libc_init_array+0x3c>)
 8003afc:	1b64      	subs	r4, r4, r5
 8003afe:	10a4      	asrs	r4, r4, #2
 8003b00:	42a6      	cmp	r6, r4
 8003b02:	d109      	bne.n	8003b18 <__libc_init_array+0x24>
 8003b04:	f002 feb4 	bl	8006870 <_init>
 8003b08:	2600      	movs	r6, #0
 8003b0a:	4d0a      	ldr	r5, [pc, #40]	; (8003b34 <__libc_init_array+0x40>)
 8003b0c:	4c0a      	ldr	r4, [pc, #40]	; (8003b38 <__libc_init_array+0x44>)
 8003b0e:	1b64      	subs	r4, r4, r5
 8003b10:	10a4      	asrs	r4, r4, #2
 8003b12:	42a6      	cmp	r6, r4
 8003b14:	d105      	bne.n	8003b22 <__libc_init_array+0x2e>
 8003b16:	bd70      	pop	{r4, r5, r6, pc}
 8003b18:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b1c:	4798      	blx	r3
 8003b1e:	3601      	adds	r6, #1
 8003b20:	e7ee      	b.n	8003b00 <__libc_init_array+0xc>
 8003b22:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b26:	4798      	blx	r3
 8003b28:	3601      	adds	r6, #1
 8003b2a:	e7f2      	b.n	8003b12 <__libc_init_array+0x1e>
 8003b2c:	08006d1c 	.word	0x08006d1c
 8003b30:	08006d1c 	.word	0x08006d1c
 8003b34:	08006d1c 	.word	0x08006d1c
 8003b38:	08006d20 	.word	0x08006d20

08003b3c <memcpy>:
 8003b3c:	440a      	add	r2, r1
 8003b3e:	4291      	cmp	r1, r2
 8003b40:	f100 33ff 	add.w	r3, r0, #4294967295
 8003b44:	d100      	bne.n	8003b48 <memcpy+0xc>
 8003b46:	4770      	bx	lr
 8003b48:	b510      	push	{r4, lr}
 8003b4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003b4e:	4291      	cmp	r1, r2
 8003b50:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003b54:	d1f9      	bne.n	8003b4a <memcpy+0xe>
 8003b56:	bd10      	pop	{r4, pc}

08003b58 <memset>:
 8003b58:	4603      	mov	r3, r0
 8003b5a:	4402      	add	r2, r0
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d100      	bne.n	8003b62 <memset+0xa>
 8003b60:	4770      	bx	lr
 8003b62:	f803 1b01 	strb.w	r1, [r3], #1
 8003b66:	e7f9      	b.n	8003b5c <memset+0x4>

08003b68 <strncmp>:
 8003b68:	4603      	mov	r3, r0
 8003b6a:	b510      	push	{r4, lr}
 8003b6c:	b172      	cbz	r2, 8003b8c <strncmp+0x24>
 8003b6e:	3901      	subs	r1, #1
 8003b70:	1884      	adds	r4, r0, r2
 8003b72:	f813 0b01 	ldrb.w	r0, [r3], #1
 8003b76:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8003b7a:	4290      	cmp	r0, r2
 8003b7c:	d101      	bne.n	8003b82 <strncmp+0x1a>
 8003b7e:	42a3      	cmp	r3, r4
 8003b80:	d101      	bne.n	8003b86 <strncmp+0x1e>
 8003b82:	1a80      	subs	r0, r0, r2
 8003b84:	bd10      	pop	{r4, pc}
 8003b86:	2800      	cmp	r0, #0
 8003b88:	d1f3      	bne.n	8003b72 <strncmp+0xa>
 8003b8a:	e7fa      	b.n	8003b82 <strncmp+0x1a>
 8003b8c:	4610      	mov	r0, r2
 8003b8e:	e7f9      	b.n	8003b84 <strncmp+0x1c>

08003b90 <sulp>:
 8003b90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b94:	460f      	mov	r7, r1
 8003b96:	4690      	mov	r8, r2
 8003b98:	f001 fcfa 	bl	8005590 <__ulp>
 8003b9c:	4604      	mov	r4, r0
 8003b9e:	460d      	mov	r5, r1
 8003ba0:	f1b8 0f00 	cmp.w	r8, #0
 8003ba4:	d011      	beq.n	8003bca <sulp+0x3a>
 8003ba6:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8003baa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	dd0b      	ble.n	8003bca <sulp+0x3a>
 8003bb2:	2400      	movs	r4, #0
 8003bb4:	051b      	lsls	r3, r3, #20
 8003bb6:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8003bba:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8003bbe:	4622      	mov	r2, r4
 8003bc0:	462b      	mov	r3, r5
 8003bc2:	f7fc fc89 	bl	80004d8 <__aeabi_dmul>
 8003bc6:	4604      	mov	r4, r0
 8003bc8:	460d      	mov	r5, r1
 8003bca:	4620      	mov	r0, r4
 8003bcc:	4629      	mov	r1, r5
 8003bce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003bd2:	0000      	movs	r0, r0
 8003bd4:	0000      	movs	r0, r0
	...

08003bd8 <_strtod_l>:
 8003bd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bdc:	469b      	mov	fp, r3
 8003bde:	2300      	movs	r3, #0
 8003be0:	b09f      	sub	sp, #124	; 0x7c
 8003be2:	931a      	str	r3, [sp, #104]	; 0x68
 8003be4:	4b9e      	ldr	r3, [pc, #632]	; (8003e60 <_strtod_l+0x288>)
 8003be6:	4682      	mov	sl, r0
 8003be8:	681f      	ldr	r7, [r3, #0]
 8003bea:	460e      	mov	r6, r1
 8003bec:	4638      	mov	r0, r7
 8003bee:	9215      	str	r2, [sp, #84]	; 0x54
 8003bf0:	f7fc faae 	bl	8000150 <strlen>
 8003bf4:	f04f 0800 	mov.w	r8, #0
 8003bf8:	4604      	mov	r4, r0
 8003bfa:	f04f 0900 	mov.w	r9, #0
 8003bfe:	9619      	str	r6, [sp, #100]	; 0x64
 8003c00:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003c02:	781a      	ldrb	r2, [r3, #0]
 8003c04:	2a2b      	cmp	r2, #43	; 0x2b
 8003c06:	d04c      	beq.n	8003ca2 <_strtod_l+0xca>
 8003c08:	d83a      	bhi.n	8003c80 <_strtod_l+0xa8>
 8003c0a:	2a0d      	cmp	r2, #13
 8003c0c:	d833      	bhi.n	8003c76 <_strtod_l+0x9e>
 8003c0e:	2a08      	cmp	r2, #8
 8003c10:	d833      	bhi.n	8003c7a <_strtod_l+0xa2>
 8003c12:	2a00      	cmp	r2, #0
 8003c14:	d03d      	beq.n	8003c92 <_strtod_l+0xba>
 8003c16:	2300      	movs	r3, #0
 8003c18:	930a      	str	r3, [sp, #40]	; 0x28
 8003c1a:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8003c1c:	782b      	ldrb	r3, [r5, #0]
 8003c1e:	2b30      	cmp	r3, #48	; 0x30
 8003c20:	f040 80aa 	bne.w	8003d78 <_strtod_l+0x1a0>
 8003c24:	786b      	ldrb	r3, [r5, #1]
 8003c26:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8003c2a:	2b58      	cmp	r3, #88	; 0x58
 8003c2c:	d166      	bne.n	8003cfc <_strtod_l+0x124>
 8003c2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003c30:	4650      	mov	r0, sl
 8003c32:	9301      	str	r3, [sp, #4]
 8003c34:	ab1a      	add	r3, sp, #104	; 0x68
 8003c36:	9300      	str	r3, [sp, #0]
 8003c38:	4a8a      	ldr	r2, [pc, #552]	; (8003e64 <_strtod_l+0x28c>)
 8003c3a:	f8cd b008 	str.w	fp, [sp, #8]
 8003c3e:	ab1b      	add	r3, sp, #108	; 0x6c
 8003c40:	a919      	add	r1, sp, #100	; 0x64
 8003c42:	f000 fe25 	bl	8004890 <__gethex>
 8003c46:	f010 0607 	ands.w	r6, r0, #7
 8003c4a:	4604      	mov	r4, r0
 8003c4c:	d005      	beq.n	8003c5a <_strtod_l+0x82>
 8003c4e:	2e06      	cmp	r6, #6
 8003c50:	d129      	bne.n	8003ca6 <_strtod_l+0xce>
 8003c52:	2300      	movs	r3, #0
 8003c54:	3501      	adds	r5, #1
 8003c56:	9519      	str	r5, [sp, #100]	; 0x64
 8003c58:	930a      	str	r3, [sp, #40]	; 0x28
 8003c5a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	f040 858a 	bne.w	8004776 <_strtod_l+0xb9e>
 8003c62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003c64:	b1d3      	cbz	r3, 8003c9c <_strtod_l+0xc4>
 8003c66:	4642      	mov	r2, r8
 8003c68:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8003c6c:	4610      	mov	r0, r2
 8003c6e:	4619      	mov	r1, r3
 8003c70:	b01f      	add	sp, #124	; 0x7c
 8003c72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c76:	2a20      	cmp	r2, #32
 8003c78:	d1cd      	bne.n	8003c16 <_strtod_l+0x3e>
 8003c7a:	3301      	adds	r3, #1
 8003c7c:	9319      	str	r3, [sp, #100]	; 0x64
 8003c7e:	e7bf      	b.n	8003c00 <_strtod_l+0x28>
 8003c80:	2a2d      	cmp	r2, #45	; 0x2d
 8003c82:	d1c8      	bne.n	8003c16 <_strtod_l+0x3e>
 8003c84:	2201      	movs	r2, #1
 8003c86:	920a      	str	r2, [sp, #40]	; 0x28
 8003c88:	1c5a      	adds	r2, r3, #1
 8003c8a:	9219      	str	r2, [sp, #100]	; 0x64
 8003c8c:	785b      	ldrb	r3, [r3, #1]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d1c3      	bne.n	8003c1a <_strtod_l+0x42>
 8003c92:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003c94:	9619      	str	r6, [sp, #100]	; 0x64
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	f040 856b 	bne.w	8004772 <_strtod_l+0xb9a>
 8003c9c:	4642      	mov	r2, r8
 8003c9e:	464b      	mov	r3, r9
 8003ca0:	e7e4      	b.n	8003c6c <_strtod_l+0x94>
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	e7ef      	b.n	8003c86 <_strtod_l+0xae>
 8003ca6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8003ca8:	b13a      	cbz	r2, 8003cba <_strtod_l+0xe2>
 8003caa:	2135      	movs	r1, #53	; 0x35
 8003cac:	a81c      	add	r0, sp, #112	; 0x70
 8003cae:	f001 fd73 	bl	8005798 <__copybits>
 8003cb2:	4650      	mov	r0, sl
 8003cb4:	991a      	ldr	r1, [sp, #104]	; 0x68
 8003cb6:	f001 f93b 	bl	8004f30 <_Bfree>
 8003cba:	3e01      	subs	r6, #1
 8003cbc:	2e04      	cmp	r6, #4
 8003cbe:	d806      	bhi.n	8003cce <_strtod_l+0xf6>
 8003cc0:	e8df f006 	tbb	[pc, r6]
 8003cc4:	1714030a 	.word	0x1714030a
 8003cc8:	0a          	.byte	0x0a
 8003cc9:	00          	.byte	0x00
 8003cca:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8003cce:	0721      	lsls	r1, r4, #28
 8003cd0:	d5c3      	bpl.n	8003c5a <_strtod_l+0x82>
 8003cd2:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8003cd6:	e7c0      	b.n	8003c5a <_strtod_l+0x82>
 8003cd8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8003cda:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8003cde:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8003ce2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003ce6:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8003cea:	e7f0      	b.n	8003cce <_strtod_l+0xf6>
 8003cec:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8003e68 <_strtod_l+0x290>
 8003cf0:	e7ed      	b.n	8003cce <_strtod_l+0xf6>
 8003cf2:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8003cf6:	f04f 38ff 	mov.w	r8, #4294967295
 8003cfa:	e7e8      	b.n	8003cce <_strtod_l+0xf6>
 8003cfc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003cfe:	1c5a      	adds	r2, r3, #1
 8003d00:	9219      	str	r2, [sp, #100]	; 0x64
 8003d02:	785b      	ldrb	r3, [r3, #1]
 8003d04:	2b30      	cmp	r3, #48	; 0x30
 8003d06:	d0f9      	beq.n	8003cfc <_strtod_l+0x124>
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d0a6      	beq.n	8003c5a <_strtod_l+0x82>
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	9307      	str	r3, [sp, #28]
 8003d10:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003d12:	220a      	movs	r2, #10
 8003d14:	9308      	str	r3, [sp, #32]
 8003d16:	2300      	movs	r3, #0
 8003d18:	469b      	mov	fp, r3
 8003d1a:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8003d1e:	9819      	ldr	r0, [sp, #100]	; 0x64
 8003d20:	7805      	ldrb	r5, [r0, #0]
 8003d22:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8003d26:	b2d9      	uxtb	r1, r3
 8003d28:	2909      	cmp	r1, #9
 8003d2a:	d927      	bls.n	8003d7c <_strtod_l+0x1a4>
 8003d2c:	4622      	mov	r2, r4
 8003d2e:	4639      	mov	r1, r7
 8003d30:	f7ff ff1a 	bl	8003b68 <strncmp>
 8003d34:	2800      	cmp	r0, #0
 8003d36:	d033      	beq.n	8003da0 <_strtod_l+0x1c8>
 8003d38:	2000      	movs	r0, #0
 8003d3a:	462a      	mov	r2, r5
 8003d3c:	465c      	mov	r4, fp
 8003d3e:	4603      	mov	r3, r0
 8003d40:	9004      	str	r0, [sp, #16]
 8003d42:	2a65      	cmp	r2, #101	; 0x65
 8003d44:	d001      	beq.n	8003d4a <_strtod_l+0x172>
 8003d46:	2a45      	cmp	r2, #69	; 0x45
 8003d48:	d114      	bne.n	8003d74 <_strtod_l+0x19c>
 8003d4a:	b91c      	cbnz	r4, 8003d54 <_strtod_l+0x17c>
 8003d4c:	9a07      	ldr	r2, [sp, #28]
 8003d4e:	4302      	orrs	r2, r0
 8003d50:	d09f      	beq.n	8003c92 <_strtod_l+0xba>
 8003d52:	2400      	movs	r4, #0
 8003d54:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8003d56:	1c72      	adds	r2, r6, #1
 8003d58:	9219      	str	r2, [sp, #100]	; 0x64
 8003d5a:	7872      	ldrb	r2, [r6, #1]
 8003d5c:	2a2b      	cmp	r2, #43	; 0x2b
 8003d5e:	d079      	beq.n	8003e54 <_strtod_l+0x27c>
 8003d60:	2a2d      	cmp	r2, #45	; 0x2d
 8003d62:	f000 8083 	beq.w	8003e6c <_strtod_l+0x294>
 8003d66:	2700      	movs	r7, #0
 8003d68:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8003d6c:	2909      	cmp	r1, #9
 8003d6e:	f240 8083 	bls.w	8003e78 <_strtod_l+0x2a0>
 8003d72:	9619      	str	r6, [sp, #100]	; 0x64
 8003d74:	2500      	movs	r5, #0
 8003d76:	e09f      	b.n	8003eb8 <_strtod_l+0x2e0>
 8003d78:	2300      	movs	r3, #0
 8003d7a:	e7c8      	b.n	8003d0e <_strtod_l+0x136>
 8003d7c:	f1bb 0f08 	cmp.w	fp, #8
 8003d80:	bfd5      	itete	le
 8003d82:	9906      	ldrle	r1, [sp, #24]
 8003d84:	9905      	ldrgt	r1, [sp, #20]
 8003d86:	fb02 3301 	mlale	r3, r2, r1, r3
 8003d8a:	fb02 3301 	mlagt	r3, r2, r1, r3
 8003d8e:	f100 0001 	add.w	r0, r0, #1
 8003d92:	bfd4      	ite	le
 8003d94:	9306      	strle	r3, [sp, #24]
 8003d96:	9305      	strgt	r3, [sp, #20]
 8003d98:	f10b 0b01 	add.w	fp, fp, #1
 8003d9c:	9019      	str	r0, [sp, #100]	; 0x64
 8003d9e:	e7be      	b.n	8003d1e <_strtod_l+0x146>
 8003da0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003da2:	191a      	adds	r2, r3, r4
 8003da4:	9219      	str	r2, [sp, #100]	; 0x64
 8003da6:	5d1a      	ldrb	r2, [r3, r4]
 8003da8:	f1bb 0f00 	cmp.w	fp, #0
 8003dac:	d036      	beq.n	8003e1c <_strtod_l+0x244>
 8003dae:	465c      	mov	r4, fp
 8003db0:	9004      	str	r0, [sp, #16]
 8003db2:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8003db6:	2b09      	cmp	r3, #9
 8003db8:	d912      	bls.n	8003de0 <_strtod_l+0x208>
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e7c1      	b.n	8003d42 <_strtod_l+0x16a>
 8003dbe:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003dc0:	3001      	adds	r0, #1
 8003dc2:	1c5a      	adds	r2, r3, #1
 8003dc4:	9219      	str	r2, [sp, #100]	; 0x64
 8003dc6:	785a      	ldrb	r2, [r3, #1]
 8003dc8:	2a30      	cmp	r2, #48	; 0x30
 8003dca:	d0f8      	beq.n	8003dbe <_strtod_l+0x1e6>
 8003dcc:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8003dd0:	2b08      	cmp	r3, #8
 8003dd2:	f200 84d5 	bhi.w	8004780 <_strtod_l+0xba8>
 8003dd6:	9004      	str	r0, [sp, #16]
 8003dd8:	2000      	movs	r0, #0
 8003dda:	4604      	mov	r4, r0
 8003ddc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003dde:	9308      	str	r3, [sp, #32]
 8003de0:	3a30      	subs	r2, #48	; 0x30
 8003de2:	f100 0301 	add.w	r3, r0, #1
 8003de6:	d013      	beq.n	8003e10 <_strtod_l+0x238>
 8003de8:	9904      	ldr	r1, [sp, #16]
 8003dea:	1905      	adds	r5, r0, r4
 8003dec:	4419      	add	r1, r3
 8003dee:	9104      	str	r1, [sp, #16]
 8003df0:	4623      	mov	r3, r4
 8003df2:	210a      	movs	r1, #10
 8003df4:	42ab      	cmp	r3, r5
 8003df6:	d113      	bne.n	8003e20 <_strtod_l+0x248>
 8003df8:	1823      	adds	r3, r4, r0
 8003dfa:	2b08      	cmp	r3, #8
 8003dfc:	f104 0401 	add.w	r4, r4, #1
 8003e00:	4404      	add	r4, r0
 8003e02:	dc1b      	bgt.n	8003e3c <_strtod_l+0x264>
 8003e04:	230a      	movs	r3, #10
 8003e06:	9906      	ldr	r1, [sp, #24]
 8003e08:	fb03 2301 	mla	r3, r3, r1, r2
 8003e0c:	9306      	str	r3, [sp, #24]
 8003e0e:	2300      	movs	r3, #0
 8003e10:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8003e12:	4618      	mov	r0, r3
 8003e14:	1c51      	adds	r1, r2, #1
 8003e16:	9119      	str	r1, [sp, #100]	; 0x64
 8003e18:	7852      	ldrb	r2, [r2, #1]
 8003e1a:	e7ca      	b.n	8003db2 <_strtod_l+0x1da>
 8003e1c:	4658      	mov	r0, fp
 8003e1e:	e7d3      	b.n	8003dc8 <_strtod_l+0x1f0>
 8003e20:	2b08      	cmp	r3, #8
 8003e22:	dc04      	bgt.n	8003e2e <_strtod_l+0x256>
 8003e24:	9f06      	ldr	r7, [sp, #24]
 8003e26:	434f      	muls	r7, r1
 8003e28:	9706      	str	r7, [sp, #24]
 8003e2a:	3301      	adds	r3, #1
 8003e2c:	e7e2      	b.n	8003df4 <_strtod_l+0x21c>
 8003e2e:	1c5f      	adds	r7, r3, #1
 8003e30:	2f10      	cmp	r7, #16
 8003e32:	bfde      	ittt	le
 8003e34:	9f05      	ldrle	r7, [sp, #20]
 8003e36:	434f      	mulle	r7, r1
 8003e38:	9705      	strle	r7, [sp, #20]
 8003e3a:	e7f6      	b.n	8003e2a <_strtod_l+0x252>
 8003e3c:	2c10      	cmp	r4, #16
 8003e3e:	bfdf      	itttt	le
 8003e40:	230a      	movle	r3, #10
 8003e42:	9905      	ldrle	r1, [sp, #20]
 8003e44:	fb03 2301 	mlale	r3, r3, r1, r2
 8003e48:	9305      	strle	r3, [sp, #20]
 8003e4a:	e7e0      	b.n	8003e0e <_strtod_l+0x236>
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	9304      	str	r3, [sp, #16]
 8003e50:	2301      	movs	r3, #1
 8003e52:	e77b      	b.n	8003d4c <_strtod_l+0x174>
 8003e54:	2700      	movs	r7, #0
 8003e56:	1cb2      	adds	r2, r6, #2
 8003e58:	9219      	str	r2, [sp, #100]	; 0x64
 8003e5a:	78b2      	ldrb	r2, [r6, #2]
 8003e5c:	e784      	b.n	8003d68 <_strtod_l+0x190>
 8003e5e:	bf00      	nop
 8003e60:	080069c8 	.word	0x080069c8
 8003e64:	08006900 	.word	0x08006900
 8003e68:	7ff00000 	.word	0x7ff00000
 8003e6c:	2701      	movs	r7, #1
 8003e6e:	e7f2      	b.n	8003e56 <_strtod_l+0x27e>
 8003e70:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8003e72:	1c51      	adds	r1, r2, #1
 8003e74:	9119      	str	r1, [sp, #100]	; 0x64
 8003e76:	7852      	ldrb	r2, [r2, #1]
 8003e78:	2a30      	cmp	r2, #48	; 0x30
 8003e7a:	d0f9      	beq.n	8003e70 <_strtod_l+0x298>
 8003e7c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8003e80:	2908      	cmp	r1, #8
 8003e82:	f63f af77 	bhi.w	8003d74 <_strtod_l+0x19c>
 8003e86:	f04f 0e0a 	mov.w	lr, #10
 8003e8a:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8003e8e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8003e90:	9209      	str	r2, [sp, #36]	; 0x24
 8003e92:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8003e94:	1c51      	adds	r1, r2, #1
 8003e96:	9119      	str	r1, [sp, #100]	; 0x64
 8003e98:	7852      	ldrb	r2, [r2, #1]
 8003e9a:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8003e9e:	2d09      	cmp	r5, #9
 8003ea0:	d935      	bls.n	8003f0e <_strtod_l+0x336>
 8003ea2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8003ea4:	1b49      	subs	r1, r1, r5
 8003ea6:	2908      	cmp	r1, #8
 8003ea8:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8003eac:	dc02      	bgt.n	8003eb4 <_strtod_l+0x2dc>
 8003eae:	4565      	cmp	r5, ip
 8003eb0:	bfa8      	it	ge
 8003eb2:	4665      	movge	r5, ip
 8003eb4:	b107      	cbz	r7, 8003eb8 <_strtod_l+0x2e0>
 8003eb6:	426d      	negs	r5, r5
 8003eb8:	2c00      	cmp	r4, #0
 8003eba:	d14c      	bne.n	8003f56 <_strtod_l+0x37e>
 8003ebc:	9907      	ldr	r1, [sp, #28]
 8003ebe:	4301      	orrs	r1, r0
 8003ec0:	f47f aecb 	bne.w	8003c5a <_strtod_l+0x82>
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	f47f aee4 	bne.w	8003c92 <_strtod_l+0xba>
 8003eca:	2a69      	cmp	r2, #105	; 0x69
 8003ecc:	d026      	beq.n	8003f1c <_strtod_l+0x344>
 8003ece:	dc23      	bgt.n	8003f18 <_strtod_l+0x340>
 8003ed0:	2a49      	cmp	r2, #73	; 0x49
 8003ed2:	d023      	beq.n	8003f1c <_strtod_l+0x344>
 8003ed4:	2a4e      	cmp	r2, #78	; 0x4e
 8003ed6:	f47f aedc 	bne.w	8003c92 <_strtod_l+0xba>
 8003eda:	499d      	ldr	r1, [pc, #628]	; (8004150 <_strtod_l+0x578>)
 8003edc:	a819      	add	r0, sp, #100	; 0x64
 8003ede:	f000 ff25 	bl	8004d2c <__match>
 8003ee2:	2800      	cmp	r0, #0
 8003ee4:	f43f aed5 	beq.w	8003c92 <_strtod_l+0xba>
 8003ee8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003eea:	781b      	ldrb	r3, [r3, #0]
 8003eec:	2b28      	cmp	r3, #40	; 0x28
 8003eee:	d12c      	bne.n	8003f4a <_strtod_l+0x372>
 8003ef0:	4998      	ldr	r1, [pc, #608]	; (8004154 <_strtod_l+0x57c>)
 8003ef2:	aa1c      	add	r2, sp, #112	; 0x70
 8003ef4:	a819      	add	r0, sp, #100	; 0x64
 8003ef6:	f000 ff2d 	bl	8004d54 <__hexnan>
 8003efa:	2805      	cmp	r0, #5
 8003efc:	d125      	bne.n	8003f4a <_strtod_l+0x372>
 8003efe:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8003f00:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8003f04:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8003f08:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8003f0c:	e6a5      	b.n	8003c5a <_strtod_l+0x82>
 8003f0e:	fb0e 2c0c 	mla	ip, lr, ip, r2
 8003f12:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8003f16:	e7bc      	b.n	8003e92 <_strtod_l+0x2ba>
 8003f18:	2a6e      	cmp	r2, #110	; 0x6e
 8003f1a:	e7dc      	b.n	8003ed6 <_strtod_l+0x2fe>
 8003f1c:	498e      	ldr	r1, [pc, #568]	; (8004158 <_strtod_l+0x580>)
 8003f1e:	a819      	add	r0, sp, #100	; 0x64
 8003f20:	f000 ff04 	bl	8004d2c <__match>
 8003f24:	2800      	cmp	r0, #0
 8003f26:	f43f aeb4 	beq.w	8003c92 <_strtod_l+0xba>
 8003f2a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003f2c:	498b      	ldr	r1, [pc, #556]	; (800415c <_strtod_l+0x584>)
 8003f2e:	3b01      	subs	r3, #1
 8003f30:	a819      	add	r0, sp, #100	; 0x64
 8003f32:	9319      	str	r3, [sp, #100]	; 0x64
 8003f34:	f000 fefa 	bl	8004d2c <__match>
 8003f38:	b910      	cbnz	r0, 8003f40 <_strtod_l+0x368>
 8003f3a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003f3c:	3301      	adds	r3, #1
 8003f3e:	9319      	str	r3, [sp, #100]	; 0x64
 8003f40:	f04f 0800 	mov.w	r8, #0
 8003f44:	f8df 9218 	ldr.w	r9, [pc, #536]	; 8004160 <_strtod_l+0x588>
 8003f48:	e687      	b.n	8003c5a <_strtod_l+0x82>
 8003f4a:	4886      	ldr	r0, [pc, #536]	; (8004164 <_strtod_l+0x58c>)
 8003f4c:	f001 fd10 	bl	8005970 <nan>
 8003f50:	4680      	mov	r8, r0
 8003f52:	4689      	mov	r9, r1
 8003f54:	e681      	b.n	8003c5a <_strtod_l+0x82>
 8003f56:	9b04      	ldr	r3, [sp, #16]
 8003f58:	f1bb 0f00 	cmp.w	fp, #0
 8003f5c:	bf08      	it	eq
 8003f5e:	46a3      	moveq	fp, r4
 8003f60:	1aeb      	subs	r3, r5, r3
 8003f62:	2c10      	cmp	r4, #16
 8003f64:	9806      	ldr	r0, [sp, #24]
 8003f66:	4626      	mov	r6, r4
 8003f68:	9307      	str	r3, [sp, #28]
 8003f6a:	bfa8      	it	ge
 8003f6c:	2610      	movge	r6, #16
 8003f6e:	f7fc fa39 	bl	80003e4 <__aeabi_ui2d>
 8003f72:	2c09      	cmp	r4, #9
 8003f74:	4680      	mov	r8, r0
 8003f76:	4689      	mov	r9, r1
 8003f78:	dd13      	ble.n	8003fa2 <_strtod_l+0x3ca>
 8003f7a:	4b7b      	ldr	r3, [pc, #492]	; (8004168 <_strtod_l+0x590>)
 8003f7c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8003f80:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8003f84:	f7fc faa8 	bl	80004d8 <__aeabi_dmul>
 8003f88:	4680      	mov	r8, r0
 8003f8a:	9805      	ldr	r0, [sp, #20]
 8003f8c:	4689      	mov	r9, r1
 8003f8e:	f7fc fa29 	bl	80003e4 <__aeabi_ui2d>
 8003f92:	4602      	mov	r2, r0
 8003f94:	460b      	mov	r3, r1
 8003f96:	4640      	mov	r0, r8
 8003f98:	4649      	mov	r1, r9
 8003f9a:	f7fc f8e7 	bl	800016c <__adddf3>
 8003f9e:	4680      	mov	r8, r0
 8003fa0:	4689      	mov	r9, r1
 8003fa2:	2c0f      	cmp	r4, #15
 8003fa4:	dc36      	bgt.n	8004014 <_strtod_l+0x43c>
 8003fa6:	9b07      	ldr	r3, [sp, #28]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	f43f ae56 	beq.w	8003c5a <_strtod_l+0x82>
 8003fae:	dd22      	ble.n	8003ff6 <_strtod_l+0x41e>
 8003fb0:	2b16      	cmp	r3, #22
 8003fb2:	dc09      	bgt.n	8003fc8 <_strtod_l+0x3f0>
 8003fb4:	496c      	ldr	r1, [pc, #432]	; (8004168 <_strtod_l+0x590>)
 8003fb6:	4642      	mov	r2, r8
 8003fb8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8003fbc:	464b      	mov	r3, r9
 8003fbe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003fc2:	f7fc fa89 	bl	80004d8 <__aeabi_dmul>
 8003fc6:	e7c3      	b.n	8003f50 <_strtod_l+0x378>
 8003fc8:	9a07      	ldr	r2, [sp, #28]
 8003fca:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	db20      	blt.n	8004014 <_strtod_l+0x43c>
 8003fd2:	4d65      	ldr	r5, [pc, #404]	; (8004168 <_strtod_l+0x590>)
 8003fd4:	f1c4 040f 	rsb	r4, r4, #15
 8003fd8:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8003fdc:	4642      	mov	r2, r8
 8003fde:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003fe2:	464b      	mov	r3, r9
 8003fe4:	f7fc fa78 	bl	80004d8 <__aeabi_dmul>
 8003fe8:	9b07      	ldr	r3, [sp, #28]
 8003fea:	1b1c      	subs	r4, r3, r4
 8003fec:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8003ff0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003ff4:	e7e5      	b.n	8003fc2 <_strtod_l+0x3ea>
 8003ff6:	9b07      	ldr	r3, [sp, #28]
 8003ff8:	3316      	adds	r3, #22
 8003ffa:	db0b      	blt.n	8004014 <_strtod_l+0x43c>
 8003ffc:	9b04      	ldr	r3, [sp, #16]
 8003ffe:	4640      	mov	r0, r8
 8004000:	1b5d      	subs	r5, r3, r5
 8004002:	4b59      	ldr	r3, [pc, #356]	; (8004168 <_strtod_l+0x590>)
 8004004:	4649      	mov	r1, r9
 8004006:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800400a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800400e:	f7fc fb8d 	bl	800072c <__aeabi_ddiv>
 8004012:	e79d      	b.n	8003f50 <_strtod_l+0x378>
 8004014:	9b07      	ldr	r3, [sp, #28]
 8004016:	1ba6      	subs	r6, r4, r6
 8004018:	441e      	add	r6, r3
 800401a:	2e00      	cmp	r6, #0
 800401c:	dd74      	ble.n	8004108 <_strtod_l+0x530>
 800401e:	f016 030f 	ands.w	r3, r6, #15
 8004022:	d00a      	beq.n	800403a <_strtod_l+0x462>
 8004024:	4950      	ldr	r1, [pc, #320]	; (8004168 <_strtod_l+0x590>)
 8004026:	4642      	mov	r2, r8
 8004028:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800402c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004030:	464b      	mov	r3, r9
 8004032:	f7fc fa51 	bl	80004d8 <__aeabi_dmul>
 8004036:	4680      	mov	r8, r0
 8004038:	4689      	mov	r9, r1
 800403a:	f036 060f 	bics.w	r6, r6, #15
 800403e:	d052      	beq.n	80040e6 <_strtod_l+0x50e>
 8004040:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8004044:	dd27      	ble.n	8004096 <_strtod_l+0x4be>
 8004046:	f04f 0b00 	mov.w	fp, #0
 800404a:	f8cd b010 	str.w	fp, [sp, #16]
 800404e:	f8cd b020 	str.w	fp, [sp, #32]
 8004052:	f8cd b018 	str.w	fp, [sp, #24]
 8004056:	2322      	movs	r3, #34	; 0x22
 8004058:	f04f 0800 	mov.w	r8, #0
 800405c:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8004160 <_strtod_l+0x588>
 8004060:	f8ca 3000 	str.w	r3, [sl]
 8004064:	9b08      	ldr	r3, [sp, #32]
 8004066:	2b00      	cmp	r3, #0
 8004068:	f43f adf7 	beq.w	8003c5a <_strtod_l+0x82>
 800406c:	4650      	mov	r0, sl
 800406e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004070:	f000 ff5e 	bl	8004f30 <_Bfree>
 8004074:	4650      	mov	r0, sl
 8004076:	9906      	ldr	r1, [sp, #24]
 8004078:	f000 ff5a 	bl	8004f30 <_Bfree>
 800407c:	4650      	mov	r0, sl
 800407e:	9904      	ldr	r1, [sp, #16]
 8004080:	f000 ff56 	bl	8004f30 <_Bfree>
 8004084:	4650      	mov	r0, sl
 8004086:	9908      	ldr	r1, [sp, #32]
 8004088:	f000 ff52 	bl	8004f30 <_Bfree>
 800408c:	4659      	mov	r1, fp
 800408e:	4650      	mov	r0, sl
 8004090:	f000 ff4e 	bl	8004f30 <_Bfree>
 8004094:	e5e1      	b.n	8003c5a <_strtod_l+0x82>
 8004096:	4b35      	ldr	r3, [pc, #212]	; (800416c <_strtod_l+0x594>)
 8004098:	4640      	mov	r0, r8
 800409a:	9305      	str	r3, [sp, #20]
 800409c:	2300      	movs	r3, #0
 800409e:	4649      	mov	r1, r9
 80040a0:	461f      	mov	r7, r3
 80040a2:	1136      	asrs	r6, r6, #4
 80040a4:	2e01      	cmp	r6, #1
 80040a6:	dc21      	bgt.n	80040ec <_strtod_l+0x514>
 80040a8:	b10b      	cbz	r3, 80040ae <_strtod_l+0x4d6>
 80040aa:	4680      	mov	r8, r0
 80040ac:	4689      	mov	r9, r1
 80040ae:	4b2f      	ldr	r3, [pc, #188]	; (800416c <_strtod_l+0x594>)
 80040b0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80040b4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80040b8:	4642      	mov	r2, r8
 80040ba:	e9d7 0100 	ldrd	r0, r1, [r7]
 80040be:	464b      	mov	r3, r9
 80040c0:	f7fc fa0a 	bl	80004d8 <__aeabi_dmul>
 80040c4:	4b26      	ldr	r3, [pc, #152]	; (8004160 <_strtod_l+0x588>)
 80040c6:	460a      	mov	r2, r1
 80040c8:	400b      	ands	r3, r1
 80040ca:	4929      	ldr	r1, [pc, #164]	; (8004170 <_strtod_l+0x598>)
 80040cc:	4680      	mov	r8, r0
 80040ce:	428b      	cmp	r3, r1
 80040d0:	d8b9      	bhi.n	8004046 <_strtod_l+0x46e>
 80040d2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80040d6:	428b      	cmp	r3, r1
 80040d8:	bf86      	itte	hi
 80040da:	f04f 38ff 	movhi.w	r8, #4294967295
 80040de:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8004174 <_strtod_l+0x59c>
 80040e2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80040e6:	2300      	movs	r3, #0
 80040e8:	9305      	str	r3, [sp, #20]
 80040ea:	e07f      	b.n	80041ec <_strtod_l+0x614>
 80040ec:	07f2      	lsls	r2, r6, #31
 80040ee:	d505      	bpl.n	80040fc <_strtod_l+0x524>
 80040f0:	9b05      	ldr	r3, [sp, #20]
 80040f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040f6:	f7fc f9ef 	bl	80004d8 <__aeabi_dmul>
 80040fa:	2301      	movs	r3, #1
 80040fc:	9a05      	ldr	r2, [sp, #20]
 80040fe:	3701      	adds	r7, #1
 8004100:	3208      	adds	r2, #8
 8004102:	1076      	asrs	r6, r6, #1
 8004104:	9205      	str	r2, [sp, #20]
 8004106:	e7cd      	b.n	80040a4 <_strtod_l+0x4cc>
 8004108:	d0ed      	beq.n	80040e6 <_strtod_l+0x50e>
 800410a:	4276      	negs	r6, r6
 800410c:	f016 020f 	ands.w	r2, r6, #15
 8004110:	d00a      	beq.n	8004128 <_strtod_l+0x550>
 8004112:	4b15      	ldr	r3, [pc, #84]	; (8004168 <_strtod_l+0x590>)
 8004114:	4640      	mov	r0, r8
 8004116:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800411a:	4649      	mov	r1, r9
 800411c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004120:	f7fc fb04 	bl	800072c <__aeabi_ddiv>
 8004124:	4680      	mov	r8, r0
 8004126:	4689      	mov	r9, r1
 8004128:	1136      	asrs	r6, r6, #4
 800412a:	d0dc      	beq.n	80040e6 <_strtod_l+0x50e>
 800412c:	2e1f      	cmp	r6, #31
 800412e:	dd23      	ble.n	8004178 <_strtod_l+0x5a0>
 8004130:	f04f 0b00 	mov.w	fp, #0
 8004134:	f8cd b010 	str.w	fp, [sp, #16]
 8004138:	f8cd b020 	str.w	fp, [sp, #32]
 800413c:	f8cd b018 	str.w	fp, [sp, #24]
 8004140:	2322      	movs	r3, #34	; 0x22
 8004142:	f04f 0800 	mov.w	r8, #0
 8004146:	f04f 0900 	mov.w	r9, #0
 800414a:	f8ca 3000 	str.w	r3, [sl]
 800414e:	e789      	b.n	8004064 <_strtod_l+0x48c>
 8004150:	080068fd 	.word	0x080068fd
 8004154:	08006914 	.word	0x08006914
 8004158:	080068f4 	.word	0x080068f4
 800415c:	080068f7 	.word	0x080068f7
 8004160:	7ff00000 	.word	0x7ff00000
 8004164:	08006b87 	.word	0x08006b87
 8004168:	08006a78 	.word	0x08006a78
 800416c:	08006a50 	.word	0x08006a50
 8004170:	7ca00000 	.word	0x7ca00000
 8004174:	7fefffff 	.word	0x7fefffff
 8004178:	f016 0310 	ands.w	r3, r6, #16
 800417c:	bf18      	it	ne
 800417e:	236a      	movne	r3, #106	; 0x6a
 8004180:	4640      	mov	r0, r8
 8004182:	9305      	str	r3, [sp, #20]
 8004184:	4649      	mov	r1, r9
 8004186:	2300      	movs	r3, #0
 8004188:	4fb0      	ldr	r7, [pc, #704]	; (800444c <_strtod_l+0x874>)
 800418a:	07f2      	lsls	r2, r6, #31
 800418c:	d504      	bpl.n	8004198 <_strtod_l+0x5c0>
 800418e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004192:	f7fc f9a1 	bl	80004d8 <__aeabi_dmul>
 8004196:	2301      	movs	r3, #1
 8004198:	1076      	asrs	r6, r6, #1
 800419a:	f107 0708 	add.w	r7, r7, #8
 800419e:	d1f4      	bne.n	800418a <_strtod_l+0x5b2>
 80041a0:	b10b      	cbz	r3, 80041a6 <_strtod_l+0x5ce>
 80041a2:	4680      	mov	r8, r0
 80041a4:	4689      	mov	r9, r1
 80041a6:	9b05      	ldr	r3, [sp, #20]
 80041a8:	b1c3      	cbz	r3, 80041dc <_strtod_l+0x604>
 80041aa:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80041ae:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	4649      	mov	r1, r9
 80041b6:	dd11      	ble.n	80041dc <_strtod_l+0x604>
 80041b8:	2b1f      	cmp	r3, #31
 80041ba:	f340 8127 	ble.w	800440c <_strtod_l+0x834>
 80041be:	2b34      	cmp	r3, #52	; 0x34
 80041c0:	bfd8      	it	le
 80041c2:	f04f 33ff 	movle.w	r3, #4294967295
 80041c6:	f04f 0800 	mov.w	r8, #0
 80041ca:	bfcf      	iteee	gt
 80041cc:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80041d0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80041d4:	fa03 f202 	lslle.w	r2, r3, r2
 80041d8:	ea02 0901 	andle.w	r9, r2, r1
 80041dc:	2200      	movs	r2, #0
 80041de:	2300      	movs	r3, #0
 80041e0:	4640      	mov	r0, r8
 80041e2:	4649      	mov	r1, r9
 80041e4:	f7fc fbe0 	bl	80009a8 <__aeabi_dcmpeq>
 80041e8:	2800      	cmp	r0, #0
 80041ea:	d1a1      	bne.n	8004130 <_strtod_l+0x558>
 80041ec:	9b06      	ldr	r3, [sp, #24]
 80041ee:	465a      	mov	r2, fp
 80041f0:	9300      	str	r3, [sp, #0]
 80041f2:	4650      	mov	r0, sl
 80041f4:	4623      	mov	r3, r4
 80041f6:	9908      	ldr	r1, [sp, #32]
 80041f8:	f000 ff02 	bl	8005000 <__s2b>
 80041fc:	9008      	str	r0, [sp, #32]
 80041fe:	2800      	cmp	r0, #0
 8004200:	f43f af21 	beq.w	8004046 <_strtod_l+0x46e>
 8004204:	9b04      	ldr	r3, [sp, #16]
 8004206:	f04f 0b00 	mov.w	fp, #0
 800420a:	1b5d      	subs	r5, r3, r5
 800420c:	9b07      	ldr	r3, [sp, #28]
 800420e:	f8cd b010 	str.w	fp, [sp, #16]
 8004212:	2b00      	cmp	r3, #0
 8004214:	bfb4      	ite	lt
 8004216:	462b      	movlt	r3, r5
 8004218:	2300      	movge	r3, #0
 800421a:	930e      	str	r3, [sp, #56]	; 0x38
 800421c:	9b07      	ldr	r3, [sp, #28]
 800421e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8004222:	9314      	str	r3, [sp, #80]	; 0x50
 8004224:	9b08      	ldr	r3, [sp, #32]
 8004226:	4650      	mov	r0, sl
 8004228:	6859      	ldr	r1, [r3, #4]
 800422a:	f000 fe41 	bl	8004eb0 <_Balloc>
 800422e:	9006      	str	r0, [sp, #24]
 8004230:	2800      	cmp	r0, #0
 8004232:	f43f af10 	beq.w	8004056 <_strtod_l+0x47e>
 8004236:	9b08      	ldr	r3, [sp, #32]
 8004238:	300c      	adds	r0, #12
 800423a:	691a      	ldr	r2, [r3, #16]
 800423c:	f103 010c 	add.w	r1, r3, #12
 8004240:	3202      	adds	r2, #2
 8004242:	0092      	lsls	r2, r2, #2
 8004244:	f7ff fc7a 	bl	8003b3c <memcpy>
 8004248:	ab1c      	add	r3, sp, #112	; 0x70
 800424a:	9301      	str	r3, [sp, #4]
 800424c:	ab1b      	add	r3, sp, #108	; 0x6c
 800424e:	9300      	str	r3, [sp, #0]
 8004250:	4642      	mov	r2, r8
 8004252:	464b      	mov	r3, r9
 8004254:	4650      	mov	r0, sl
 8004256:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 800425a:	f001 fa13 	bl	8005684 <__d2b>
 800425e:	901a      	str	r0, [sp, #104]	; 0x68
 8004260:	2800      	cmp	r0, #0
 8004262:	f43f aef8 	beq.w	8004056 <_strtod_l+0x47e>
 8004266:	2101      	movs	r1, #1
 8004268:	4650      	mov	r0, sl
 800426a:	f000 ff61 	bl	8005130 <__i2b>
 800426e:	4603      	mov	r3, r0
 8004270:	9004      	str	r0, [sp, #16]
 8004272:	2800      	cmp	r0, #0
 8004274:	f43f aeef 	beq.w	8004056 <_strtod_l+0x47e>
 8004278:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800427a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800427c:	2d00      	cmp	r5, #0
 800427e:	bfab      	itete	ge
 8004280:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8004282:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 8004284:	18ee      	addge	r6, r5, r3
 8004286:	1b5c      	sublt	r4, r3, r5
 8004288:	9b05      	ldr	r3, [sp, #20]
 800428a:	bfa8      	it	ge
 800428c:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 800428e:	eba5 0503 	sub.w	r5, r5, r3
 8004292:	4415      	add	r5, r2
 8004294:	4b6e      	ldr	r3, [pc, #440]	; (8004450 <_strtod_l+0x878>)
 8004296:	f105 35ff 	add.w	r5, r5, #4294967295
 800429a:	bfb8      	it	lt
 800429c:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800429e:	429d      	cmp	r5, r3
 80042a0:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80042a4:	f280 80c4 	bge.w	8004430 <_strtod_l+0x858>
 80042a8:	1b5b      	subs	r3, r3, r5
 80042aa:	2b1f      	cmp	r3, #31
 80042ac:	f04f 0701 	mov.w	r7, #1
 80042b0:	eba2 0203 	sub.w	r2, r2, r3
 80042b4:	f300 80b1 	bgt.w	800441a <_strtod_l+0x842>
 80042b8:	2500      	movs	r5, #0
 80042ba:	fa07 f303 	lsl.w	r3, r7, r3
 80042be:	930f      	str	r3, [sp, #60]	; 0x3c
 80042c0:	18b7      	adds	r7, r6, r2
 80042c2:	9b05      	ldr	r3, [sp, #20]
 80042c4:	42be      	cmp	r6, r7
 80042c6:	4414      	add	r4, r2
 80042c8:	441c      	add	r4, r3
 80042ca:	4633      	mov	r3, r6
 80042cc:	bfa8      	it	ge
 80042ce:	463b      	movge	r3, r7
 80042d0:	42a3      	cmp	r3, r4
 80042d2:	bfa8      	it	ge
 80042d4:	4623      	movge	r3, r4
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	bfc2      	ittt	gt
 80042da:	1aff      	subgt	r7, r7, r3
 80042dc:	1ae4      	subgt	r4, r4, r3
 80042de:	1af6      	subgt	r6, r6, r3
 80042e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	dd17      	ble.n	8004316 <_strtod_l+0x73e>
 80042e6:	461a      	mov	r2, r3
 80042e8:	4650      	mov	r0, sl
 80042ea:	9904      	ldr	r1, [sp, #16]
 80042ec:	f000 ffde 	bl	80052ac <__pow5mult>
 80042f0:	9004      	str	r0, [sp, #16]
 80042f2:	2800      	cmp	r0, #0
 80042f4:	f43f aeaf 	beq.w	8004056 <_strtod_l+0x47e>
 80042f8:	4601      	mov	r1, r0
 80042fa:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80042fc:	4650      	mov	r0, sl
 80042fe:	f000 ff2d 	bl	800515c <__multiply>
 8004302:	9009      	str	r0, [sp, #36]	; 0x24
 8004304:	2800      	cmp	r0, #0
 8004306:	f43f aea6 	beq.w	8004056 <_strtod_l+0x47e>
 800430a:	4650      	mov	r0, sl
 800430c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800430e:	f000 fe0f 	bl	8004f30 <_Bfree>
 8004312:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004314:	931a      	str	r3, [sp, #104]	; 0x68
 8004316:	2f00      	cmp	r7, #0
 8004318:	f300 808e 	bgt.w	8004438 <_strtod_l+0x860>
 800431c:	9b07      	ldr	r3, [sp, #28]
 800431e:	2b00      	cmp	r3, #0
 8004320:	dd08      	ble.n	8004334 <_strtod_l+0x75c>
 8004322:	4650      	mov	r0, sl
 8004324:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8004326:	9906      	ldr	r1, [sp, #24]
 8004328:	f000 ffc0 	bl	80052ac <__pow5mult>
 800432c:	9006      	str	r0, [sp, #24]
 800432e:	2800      	cmp	r0, #0
 8004330:	f43f ae91 	beq.w	8004056 <_strtod_l+0x47e>
 8004334:	2c00      	cmp	r4, #0
 8004336:	dd08      	ble.n	800434a <_strtod_l+0x772>
 8004338:	4622      	mov	r2, r4
 800433a:	4650      	mov	r0, sl
 800433c:	9906      	ldr	r1, [sp, #24]
 800433e:	f001 f80f 	bl	8005360 <__lshift>
 8004342:	9006      	str	r0, [sp, #24]
 8004344:	2800      	cmp	r0, #0
 8004346:	f43f ae86 	beq.w	8004056 <_strtod_l+0x47e>
 800434a:	2e00      	cmp	r6, #0
 800434c:	dd08      	ble.n	8004360 <_strtod_l+0x788>
 800434e:	4632      	mov	r2, r6
 8004350:	4650      	mov	r0, sl
 8004352:	9904      	ldr	r1, [sp, #16]
 8004354:	f001 f804 	bl	8005360 <__lshift>
 8004358:	9004      	str	r0, [sp, #16]
 800435a:	2800      	cmp	r0, #0
 800435c:	f43f ae7b 	beq.w	8004056 <_strtod_l+0x47e>
 8004360:	4650      	mov	r0, sl
 8004362:	9a06      	ldr	r2, [sp, #24]
 8004364:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004366:	f001 f887 	bl	8005478 <__mdiff>
 800436a:	4683      	mov	fp, r0
 800436c:	2800      	cmp	r0, #0
 800436e:	f43f ae72 	beq.w	8004056 <_strtod_l+0x47e>
 8004372:	2400      	movs	r4, #0
 8004374:	68c3      	ldr	r3, [r0, #12]
 8004376:	9904      	ldr	r1, [sp, #16]
 8004378:	60c4      	str	r4, [r0, #12]
 800437a:	930b      	str	r3, [sp, #44]	; 0x2c
 800437c:	f001 f860 	bl	8005440 <__mcmp>
 8004380:	42a0      	cmp	r0, r4
 8004382:	da6b      	bge.n	800445c <_strtod_l+0x884>
 8004384:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004386:	ea53 0308 	orrs.w	r3, r3, r8
 800438a:	f040 8091 	bne.w	80044b0 <_strtod_l+0x8d8>
 800438e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004392:	2b00      	cmp	r3, #0
 8004394:	f040 808c 	bne.w	80044b0 <_strtod_l+0x8d8>
 8004398:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800439c:	0d1b      	lsrs	r3, r3, #20
 800439e:	051b      	lsls	r3, r3, #20
 80043a0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80043a4:	f240 8084 	bls.w	80044b0 <_strtod_l+0x8d8>
 80043a8:	f8db 3014 	ldr.w	r3, [fp, #20]
 80043ac:	b91b      	cbnz	r3, 80043b6 <_strtod_l+0x7de>
 80043ae:	f8db 3010 	ldr.w	r3, [fp, #16]
 80043b2:	2b01      	cmp	r3, #1
 80043b4:	dd7c      	ble.n	80044b0 <_strtod_l+0x8d8>
 80043b6:	4659      	mov	r1, fp
 80043b8:	2201      	movs	r2, #1
 80043ba:	4650      	mov	r0, sl
 80043bc:	f000 ffd0 	bl	8005360 <__lshift>
 80043c0:	9904      	ldr	r1, [sp, #16]
 80043c2:	4683      	mov	fp, r0
 80043c4:	f001 f83c 	bl	8005440 <__mcmp>
 80043c8:	2800      	cmp	r0, #0
 80043ca:	dd71      	ble.n	80044b0 <_strtod_l+0x8d8>
 80043cc:	9905      	ldr	r1, [sp, #20]
 80043ce:	464b      	mov	r3, r9
 80043d0:	4a20      	ldr	r2, [pc, #128]	; (8004454 <_strtod_l+0x87c>)
 80043d2:	2900      	cmp	r1, #0
 80043d4:	f000 808c 	beq.w	80044f0 <_strtod_l+0x918>
 80043d8:	ea02 0109 	and.w	r1, r2, r9
 80043dc:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80043e0:	f300 8086 	bgt.w	80044f0 <_strtod_l+0x918>
 80043e4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80043e8:	f77f aeaa 	ble.w	8004140 <_strtod_l+0x568>
 80043ec:	4640      	mov	r0, r8
 80043ee:	4649      	mov	r1, r9
 80043f0:	4b19      	ldr	r3, [pc, #100]	; (8004458 <_strtod_l+0x880>)
 80043f2:	2200      	movs	r2, #0
 80043f4:	f7fc f870 	bl	80004d8 <__aeabi_dmul>
 80043f8:	460b      	mov	r3, r1
 80043fa:	4303      	orrs	r3, r0
 80043fc:	bf08      	it	eq
 80043fe:	2322      	moveq	r3, #34	; 0x22
 8004400:	4680      	mov	r8, r0
 8004402:	4689      	mov	r9, r1
 8004404:	bf08      	it	eq
 8004406:	f8ca 3000 	streq.w	r3, [sl]
 800440a:	e62f      	b.n	800406c <_strtod_l+0x494>
 800440c:	f04f 32ff 	mov.w	r2, #4294967295
 8004410:	fa02 f303 	lsl.w	r3, r2, r3
 8004414:	ea03 0808 	and.w	r8, r3, r8
 8004418:	e6e0      	b.n	80041dc <_strtod_l+0x604>
 800441a:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800441e:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8004422:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8004426:	35e2      	adds	r5, #226	; 0xe2
 8004428:	fa07 f505 	lsl.w	r5, r7, r5
 800442c:	970f      	str	r7, [sp, #60]	; 0x3c
 800442e:	e747      	b.n	80042c0 <_strtod_l+0x6e8>
 8004430:	2301      	movs	r3, #1
 8004432:	2500      	movs	r5, #0
 8004434:	930f      	str	r3, [sp, #60]	; 0x3c
 8004436:	e743      	b.n	80042c0 <_strtod_l+0x6e8>
 8004438:	463a      	mov	r2, r7
 800443a:	4650      	mov	r0, sl
 800443c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800443e:	f000 ff8f 	bl	8005360 <__lshift>
 8004442:	901a      	str	r0, [sp, #104]	; 0x68
 8004444:	2800      	cmp	r0, #0
 8004446:	f47f af69 	bne.w	800431c <_strtod_l+0x744>
 800444a:	e604      	b.n	8004056 <_strtod_l+0x47e>
 800444c:	08006928 	.word	0x08006928
 8004450:	fffffc02 	.word	0xfffffc02
 8004454:	7ff00000 	.word	0x7ff00000
 8004458:	39500000 	.word	0x39500000
 800445c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8004460:	d165      	bne.n	800452e <_strtod_l+0x956>
 8004462:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004464:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004468:	b35a      	cbz	r2, 80044c2 <_strtod_l+0x8ea>
 800446a:	4a99      	ldr	r2, [pc, #612]	; (80046d0 <_strtod_l+0xaf8>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d12b      	bne.n	80044c8 <_strtod_l+0x8f0>
 8004470:	9b05      	ldr	r3, [sp, #20]
 8004472:	4641      	mov	r1, r8
 8004474:	b303      	cbz	r3, 80044b8 <_strtod_l+0x8e0>
 8004476:	464a      	mov	r2, r9
 8004478:	4b96      	ldr	r3, [pc, #600]	; (80046d4 <_strtod_l+0xafc>)
 800447a:	4013      	ands	r3, r2
 800447c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8004480:	f04f 32ff 	mov.w	r2, #4294967295
 8004484:	d81b      	bhi.n	80044be <_strtod_l+0x8e6>
 8004486:	0d1b      	lsrs	r3, r3, #20
 8004488:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800448c:	fa02 f303 	lsl.w	r3, r2, r3
 8004490:	4299      	cmp	r1, r3
 8004492:	d119      	bne.n	80044c8 <_strtod_l+0x8f0>
 8004494:	4b90      	ldr	r3, [pc, #576]	; (80046d8 <_strtod_l+0xb00>)
 8004496:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004498:	429a      	cmp	r2, r3
 800449a:	d102      	bne.n	80044a2 <_strtod_l+0x8ca>
 800449c:	3101      	adds	r1, #1
 800449e:	f43f adda 	beq.w	8004056 <_strtod_l+0x47e>
 80044a2:	f04f 0800 	mov.w	r8, #0
 80044a6:	4b8b      	ldr	r3, [pc, #556]	; (80046d4 <_strtod_l+0xafc>)
 80044a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80044aa:	401a      	ands	r2, r3
 80044ac:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 80044b0:	9b05      	ldr	r3, [sp, #20]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d19a      	bne.n	80043ec <_strtod_l+0x814>
 80044b6:	e5d9      	b.n	800406c <_strtod_l+0x494>
 80044b8:	f04f 33ff 	mov.w	r3, #4294967295
 80044bc:	e7e8      	b.n	8004490 <_strtod_l+0x8b8>
 80044be:	4613      	mov	r3, r2
 80044c0:	e7e6      	b.n	8004490 <_strtod_l+0x8b8>
 80044c2:	ea53 0308 	orrs.w	r3, r3, r8
 80044c6:	d081      	beq.n	80043cc <_strtod_l+0x7f4>
 80044c8:	b1e5      	cbz	r5, 8004504 <_strtod_l+0x92c>
 80044ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80044cc:	421d      	tst	r5, r3
 80044ce:	d0ef      	beq.n	80044b0 <_strtod_l+0x8d8>
 80044d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80044d2:	4640      	mov	r0, r8
 80044d4:	4649      	mov	r1, r9
 80044d6:	9a05      	ldr	r2, [sp, #20]
 80044d8:	b1c3      	cbz	r3, 800450c <_strtod_l+0x934>
 80044da:	f7ff fb59 	bl	8003b90 <sulp>
 80044de:	4602      	mov	r2, r0
 80044e0:	460b      	mov	r3, r1
 80044e2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80044e6:	f7fb fe41 	bl	800016c <__adddf3>
 80044ea:	4680      	mov	r8, r0
 80044ec:	4689      	mov	r9, r1
 80044ee:	e7df      	b.n	80044b0 <_strtod_l+0x8d8>
 80044f0:	4013      	ands	r3, r2
 80044f2:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80044f6:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80044fa:	f04f 38ff 	mov.w	r8, #4294967295
 80044fe:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8004502:	e7d5      	b.n	80044b0 <_strtod_l+0x8d8>
 8004504:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004506:	ea13 0f08 	tst.w	r3, r8
 800450a:	e7e0      	b.n	80044ce <_strtod_l+0x8f6>
 800450c:	f7ff fb40 	bl	8003b90 <sulp>
 8004510:	4602      	mov	r2, r0
 8004512:	460b      	mov	r3, r1
 8004514:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004518:	f7fb fe26 	bl	8000168 <__aeabi_dsub>
 800451c:	2200      	movs	r2, #0
 800451e:	2300      	movs	r3, #0
 8004520:	4680      	mov	r8, r0
 8004522:	4689      	mov	r9, r1
 8004524:	f7fc fa40 	bl	80009a8 <__aeabi_dcmpeq>
 8004528:	2800      	cmp	r0, #0
 800452a:	d0c1      	beq.n	80044b0 <_strtod_l+0x8d8>
 800452c:	e608      	b.n	8004140 <_strtod_l+0x568>
 800452e:	4658      	mov	r0, fp
 8004530:	9904      	ldr	r1, [sp, #16]
 8004532:	f001 f903 	bl	800573c <__ratio>
 8004536:	2200      	movs	r2, #0
 8004538:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800453c:	4606      	mov	r6, r0
 800453e:	460f      	mov	r7, r1
 8004540:	f7fc fa46 	bl	80009d0 <__aeabi_dcmple>
 8004544:	2800      	cmp	r0, #0
 8004546:	d070      	beq.n	800462a <_strtod_l+0xa52>
 8004548:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800454a:	2b00      	cmp	r3, #0
 800454c:	d042      	beq.n	80045d4 <_strtod_l+0x9fc>
 800454e:	2600      	movs	r6, #0
 8004550:	4f62      	ldr	r7, [pc, #392]	; (80046dc <_strtod_l+0xb04>)
 8004552:	4d62      	ldr	r5, [pc, #392]	; (80046dc <_strtod_l+0xb04>)
 8004554:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004556:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800455a:	0d1b      	lsrs	r3, r3, #20
 800455c:	051b      	lsls	r3, r3, #20
 800455e:	930f      	str	r3, [sp, #60]	; 0x3c
 8004560:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004562:	4b5f      	ldr	r3, [pc, #380]	; (80046e0 <_strtod_l+0xb08>)
 8004564:	429a      	cmp	r2, r3
 8004566:	f040 80c3 	bne.w	80046f0 <_strtod_l+0xb18>
 800456a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800456c:	4640      	mov	r0, r8
 800456e:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8004572:	4649      	mov	r1, r9
 8004574:	f001 f80c 	bl	8005590 <__ulp>
 8004578:	4602      	mov	r2, r0
 800457a:	460b      	mov	r3, r1
 800457c:	4630      	mov	r0, r6
 800457e:	4639      	mov	r1, r7
 8004580:	f7fb ffaa 	bl	80004d8 <__aeabi_dmul>
 8004584:	4642      	mov	r2, r8
 8004586:	464b      	mov	r3, r9
 8004588:	f7fb fdf0 	bl	800016c <__adddf3>
 800458c:	460b      	mov	r3, r1
 800458e:	4951      	ldr	r1, [pc, #324]	; (80046d4 <_strtod_l+0xafc>)
 8004590:	4a54      	ldr	r2, [pc, #336]	; (80046e4 <_strtod_l+0xb0c>)
 8004592:	4019      	ands	r1, r3
 8004594:	4291      	cmp	r1, r2
 8004596:	4680      	mov	r8, r0
 8004598:	d95d      	bls.n	8004656 <_strtod_l+0xa7e>
 800459a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800459c:	4b4e      	ldr	r3, [pc, #312]	; (80046d8 <_strtod_l+0xb00>)
 800459e:	429a      	cmp	r2, r3
 80045a0:	d103      	bne.n	80045aa <_strtod_l+0x9d2>
 80045a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80045a4:	3301      	adds	r3, #1
 80045a6:	f43f ad56 	beq.w	8004056 <_strtod_l+0x47e>
 80045aa:	f04f 38ff 	mov.w	r8, #4294967295
 80045ae:	f8df 9128 	ldr.w	r9, [pc, #296]	; 80046d8 <_strtod_l+0xb00>
 80045b2:	4650      	mov	r0, sl
 80045b4:	991a      	ldr	r1, [sp, #104]	; 0x68
 80045b6:	f000 fcbb 	bl	8004f30 <_Bfree>
 80045ba:	4650      	mov	r0, sl
 80045bc:	9906      	ldr	r1, [sp, #24]
 80045be:	f000 fcb7 	bl	8004f30 <_Bfree>
 80045c2:	4650      	mov	r0, sl
 80045c4:	9904      	ldr	r1, [sp, #16]
 80045c6:	f000 fcb3 	bl	8004f30 <_Bfree>
 80045ca:	4659      	mov	r1, fp
 80045cc:	4650      	mov	r0, sl
 80045ce:	f000 fcaf 	bl	8004f30 <_Bfree>
 80045d2:	e627      	b.n	8004224 <_strtod_l+0x64c>
 80045d4:	f1b8 0f00 	cmp.w	r8, #0
 80045d8:	d119      	bne.n	800460e <_strtod_l+0xa36>
 80045da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80045e0:	b9e3      	cbnz	r3, 800461c <_strtod_l+0xa44>
 80045e2:	2200      	movs	r2, #0
 80045e4:	4630      	mov	r0, r6
 80045e6:	4639      	mov	r1, r7
 80045e8:	4b3c      	ldr	r3, [pc, #240]	; (80046dc <_strtod_l+0xb04>)
 80045ea:	f7fc f9e7 	bl	80009bc <__aeabi_dcmplt>
 80045ee:	b9c8      	cbnz	r0, 8004624 <_strtod_l+0xa4c>
 80045f0:	2200      	movs	r2, #0
 80045f2:	4630      	mov	r0, r6
 80045f4:	4639      	mov	r1, r7
 80045f6:	4b3c      	ldr	r3, [pc, #240]	; (80046e8 <_strtod_l+0xb10>)
 80045f8:	f7fb ff6e 	bl	80004d8 <__aeabi_dmul>
 80045fc:	4604      	mov	r4, r0
 80045fe:	460d      	mov	r5, r1
 8004600:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8004604:	9416      	str	r4, [sp, #88]	; 0x58
 8004606:	9317      	str	r3, [sp, #92]	; 0x5c
 8004608:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 800460c:	e7a2      	b.n	8004554 <_strtod_l+0x97c>
 800460e:	f1b8 0f01 	cmp.w	r8, #1
 8004612:	d103      	bne.n	800461c <_strtod_l+0xa44>
 8004614:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004616:	2b00      	cmp	r3, #0
 8004618:	f43f ad92 	beq.w	8004140 <_strtod_l+0x568>
 800461c:	2600      	movs	r6, #0
 800461e:	2400      	movs	r4, #0
 8004620:	4f32      	ldr	r7, [pc, #200]	; (80046ec <_strtod_l+0xb14>)
 8004622:	e796      	b.n	8004552 <_strtod_l+0x97a>
 8004624:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8004626:	4d30      	ldr	r5, [pc, #192]	; (80046e8 <_strtod_l+0xb10>)
 8004628:	e7ea      	b.n	8004600 <_strtod_l+0xa28>
 800462a:	4b2f      	ldr	r3, [pc, #188]	; (80046e8 <_strtod_l+0xb10>)
 800462c:	2200      	movs	r2, #0
 800462e:	4630      	mov	r0, r6
 8004630:	4639      	mov	r1, r7
 8004632:	f7fb ff51 	bl	80004d8 <__aeabi_dmul>
 8004636:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004638:	4604      	mov	r4, r0
 800463a:	460d      	mov	r5, r1
 800463c:	b933      	cbnz	r3, 800464c <_strtod_l+0xa74>
 800463e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004642:	9010      	str	r0, [sp, #64]	; 0x40
 8004644:	9311      	str	r3, [sp, #68]	; 0x44
 8004646:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800464a:	e783      	b.n	8004554 <_strtod_l+0x97c>
 800464c:	4602      	mov	r2, r0
 800464e:	460b      	mov	r3, r1
 8004650:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8004654:	e7f7      	b.n	8004646 <_strtod_l+0xa6e>
 8004656:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800465a:	9b05      	ldr	r3, [sp, #20]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d1a8      	bne.n	80045b2 <_strtod_l+0x9da>
 8004660:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004664:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004666:	0d1b      	lsrs	r3, r3, #20
 8004668:	051b      	lsls	r3, r3, #20
 800466a:	429a      	cmp	r2, r3
 800466c:	d1a1      	bne.n	80045b2 <_strtod_l+0x9da>
 800466e:	4620      	mov	r0, r4
 8004670:	4629      	mov	r1, r5
 8004672:	f7fc fa13 	bl	8000a9c <__aeabi_d2lz>
 8004676:	f7fb ff01 	bl	800047c <__aeabi_l2d>
 800467a:	4602      	mov	r2, r0
 800467c:	460b      	mov	r3, r1
 800467e:	4620      	mov	r0, r4
 8004680:	4629      	mov	r1, r5
 8004682:	f7fb fd71 	bl	8000168 <__aeabi_dsub>
 8004686:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004688:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800468c:	ea43 0308 	orr.w	r3, r3, r8
 8004690:	4313      	orrs	r3, r2
 8004692:	4604      	mov	r4, r0
 8004694:	460d      	mov	r5, r1
 8004696:	d066      	beq.n	8004766 <_strtod_l+0xb8e>
 8004698:	a309      	add	r3, pc, #36	; (adr r3, 80046c0 <_strtod_l+0xae8>)
 800469a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800469e:	f7fc f98d 	bl	80009bc <__aeabi_dcmplt>
 80046a2:	2800      	cmp	r0, #0
 80046a4:	f47f ace2 	bne.w	800406c <_strtod_l+0x494>
 80046a8:	a307      	add	r3, pc, #28	; (adr r3, 80046c8 <_strtod_l+0xaf0>)
 80046aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ae:	4620      	mov	r0, r4
 80046b0:	4629      	mov	r1, r5
 80046b2:	f7fc f9a1 	bl	80009f8 <__aeabi_dcmpgt>
 80046b6:	2800      	cmp	r0, #0
 80046b8:	f43f af7b 	beq.w	80045b2 <_strtod_l+0x9da>
 80046bc:	e4d6      	b.n	800406c <_strtod_l+0x494>
 80046be:	bf00      	nop
 80046c0:	94a03595 	.word	0x94a03595
 80046c4:	3fdfffff 	.word	0x3fdfffff
 80046c8:	35afe535 	.word	0x35afe535
 80046cc:	3fe00000 	.word	0x3fe00000
 80046d0:	000fffff 	.word	0x000fffff
 80046d4:	7ff00000 	.word	0x7ff00000
 80046d8:	7fefffff 	.word	0x7fefffff
 80046dc:	3ff00000 	.word	0x3ff00000
 80046e0:	7fe00000 	.word	0x7fe00000
 80046e4:	7c9fffff 	.word	0x7c9fffff
 80046e8:	3fe00000 	.word	0x3fe00000
 80046ec:	bff00000 	.word	0xbff00000
 80046f0:	9b05      	ldr	r3, [sp, #20]
 80046f2:	b313      	cbz	r3, 800473a <_strtod_l+0xb62>
 80046f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80046f6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80046fa:	d81e      	bhi.n	800473a <_strtod_l+0xb62>
 80046fc:	a326      	add	r3, pc, #152	; (adr r3, 8004798 <_strtod_l+0xbc0>)
 80046fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004702:	4620      	mov	r0, r4
 8004704:	4629      	mov	r1, r5
 8004706:	f7fc f963 	bl	80009d0 <__aeabi_dcmple>
 800470a:	b190      	cbz	r0, 8004732 <_strtod_l+0xb5a>
 800470c:	4629      	mov	r1, r5
 800470e:	4620      	mov	r0, r4
 8004710:	f7fc f9a4 	bl	8000a5c <__aeabi_d2uiz>
 8004714:	2801      	cmp	r0, #1
 8004716:	bf38      	it	cc
 8004718:	2001      	movcc	r0, #1
 800471a:	f7fb fe63 	bl	80003e4 <__aeabi_ui2d>
 800471e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004720:	4604      	mov	r4, r0
 8004722:	460d      	mov	r5, r1
 8004724:	b9d3      	cbnz	r3, 800475c <_strtod_l+0xb84>
 8004726:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800472a:	9012      	str	r0, [sp, #72]	; 0x48
 800472c:	9313      	str	r3, [sp, #76]	; 0x4c
 800472e:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8004732:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004734:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8004738:	1a9f      	subs	r7, r3, r2
 800473a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800473e:	f000 ff27 	bl	8005590 <__ulp>
 8004742:	4602      	mov	r2, r0
 8004744:	460b      	mov	r3, r1
 8004746:	4630      	mov	r0, r6
 8004748:	4639      	mov	r1, r7
 800474a:	f7fb fec5 	bl	80004d8 <__aeabi_dmul>
 800474e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004752:	f7fb fd0b 	bl	800016c <__adddf3>
 8004756:	4680      	mov	r8, r0
 8004758:	4689      	mov	r9, r1
 800475a:	e77e      	b.n	800465a <_strtod_l+0xa82>
 800475c:	4602      	mov	r2, r0
 800475e:	460b      	mov	r3, r1
 8004760:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8004764:	e7e3      	b.n	800472e <_strtod_l+0xb56>
 8004766:	a30e      	add	r3, pc, #56	; (adr r3, 80047a0 <_strtod_l+0xbc8>)
 8004768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800476c:	f7fc f926 	bl	80009bc <__aeabi_dcmplt>
 8004770:	e7a1      	b.n	80046b6 <_strtod_l+0xade>
 8004772:	2300      	movs	r3, #0
 8004774:	930a      	str	r3, [sp, #40]	; 0x28
 8004776:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004778:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800477a:	6013      	str	r3, [r2, #0]
 800477c:	f7ff ba71 	b.w	8003c62 <_strtod_l+0x8a>
 8004780:	2a65      	cmp	r2, #101	; 0x65
 8004782:	f43f ab63 	beq.w	8003e4c <_strtod_l+0x274>
 8004786:	2a45      	cmp	r2, #69	; 0x45
 8004788:	f43f ab60 	beq.w	8003e4c <_strtod_l+0x274>
 800478c:	2301      	movs	r3, #1
 800478e:	f7ff bb95 	b.w	8003ebc <_strtod_l+0x2e4>
 8004792:	bf00      	nop
 8004794:	f3af 8000 	nop.w
 8004798:	ffc00000 	.word	0xffc00000
 800479c:	41dfffff 	.word	0x41dfffff
 80047a0:	94a03595 	.word	0x94a03595
 80047a4:	3fcfffff 	.word	0x3fcfffff

080047a8 <strtod>:
 80047a8:	460a      	mov	r2, r1
 80047aa:	4601      	mov	r1, r0
 80047ac:	4802      	ldr	r0, [pc, #8]	; (80047b8 <strtod+0x10>)
 80047ae:	4b03      	ldr	r3, [pc, #12]	; (80047bc <strtod+0x14>)
 80047b0:	6800      	ldr	r0, [r0, #0]
 80047b2:	f7ff ba11 	b.w	8003bd8 <_strtod_l>
 80047b6:	bf00      	nop
 80047b8:	2000000c 	.word	0x2000000c
 80047bc:	20000074 	.word	0x20000074

080047c0 <rshift>:
 80047c0:	6903      	ldr	r3, [r0, #16]
 80047c2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80047c6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80047ca:	f100 0414 	add.w	r4, r0, #20
 80047ce:	ea4f 1261 	mov.w	r2, r1, asr #5
 80047d2:	dd46      	ble.n	8004862 <rshift+0xa2>
 80047d4:	f011 011f 	ands.w	r1, r1, #31
 80047d8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80047dc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80047e0:	d10c      	bne.n	80047fc <rshift+0x3c>
 80047e2:	4629      	mov	r1, r5
 80047e4:	f100 0710 	add.w	r7, r0, #16
 80047e8:	42b1      	cmp	r1, r6
 80047ea:	d335      	bcc.n	8004858 <rshift+0x98>
 80047ec:	1a9b      	subs	r3, r3, r2
 80047ee:	009b      	lsls	r3, r3, #2
 80047f0:	1eea      	subs	r2, r5, #3
 80047f2:	4296      	cmp	r6, r2
 80047f4:	bf38      	it	cc
 80047f6:	2300      	movcc	r3, #0
 80047f8:	4423      	add	r3, r4
 80047fa:	e015      	b.n	8004828 <rshift+0x68>
 80047fc:	46a1      	mov	r9, r4
 80047fe:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8004802:	f1c1 0820 	rsb	r8, r1, #32
 8004806:	40cf      	lsrs	r7, r1
 8004808:	f105 0e04 	add.w	lr, r5, #4
 800480c:	4576      	cmp	r6, lr
 800480e:	46f4      	mov	ip, lr
 8004810:	d816      	bhi.n	8004840 <rshift+0x80>
 8004812:	1a9a      	subs	r2, r3, r2
 8004814:	0092      	lsls	r2, r2, #2
 8004816:	3a04      	subs	r2, #4
 8004818:	3501      	adds	r5, #1
 800481a:	42ae      	cmp	r6, r5
 800481c:	bf38      	it	cc
 800481e:	2200      	movcc	r2, #0
 8004820:	18a3      	adds	r3, r4, r2
 8004822:	50a7      	str	r7, [r4, r2]
 8004824:	b107      	cbz	r7, 8004828 <rshift+0x68>
 8004826:	3304      	adds	r3, #4
 8004828:	42a3      	cmp	r3, r4
 800482a:	eba3 0204 	sub.w	r2, r3, r4
 800482e:	bf08      	it	eq
 8004830:	2300      	moveq	r3, #0
 8004832:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8004836:	6102      	str	r2, [r0, #16]
 8004838:	bf08      	it	eq
 800483a:	6143      	streq	r3, [r0, #20]
 800483c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004840:	f8dc c000 	ldr.w	ip, [ip]
 8004844:	fa0c fc08 	lsl.w	ip, ip, r8
 8004848:	ea4c 0707 	orr.w	r7, ip, r7
 800484c:	f849 7b04 	str.w	r7, [r9], #4
 8004850:	f85e 7b04 	ldr.w	r7, [lr], #4
 8004854:	40cf      	lsrs	r7, r1
 8004856:	e7d9      	b.n	800480c <rshift+0x4c>
 8004858:	f851 cb04 	ldr.w	ip, [r1], #4
 800485c:	f847 cf04 	str.w	ip, [r7, #4]!
 8004860:	e7c2      	b.n	80047e8 <rshift+0x28>
 8004862:	4623      	mov	r3, r4
 8004864:	e7e0      	b.n	8004828 <rshift+0x68>

08004866 <__hexdig_fun>:
 8004866:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800486a:	2b09      	cmp	r3, #9
 800486c:	d802      	bhi.n	8004874 <__hexdig_fun+0xe>
 800486e:	3820      	subs	r0, #32
 8004870:	b2c0      	uxtb	r0, r0
 8004872:	4770      	bx	lr
 8004874:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8004878:	2b05      	cmp	r3, #5
 800487a:	d801      	bhi.n	8004880 <__hexdig_fun+0x1a>
 800487c:	3847      	subs	r0, #71	; 0x47
 800487e:	e7f7      	b.n	8004870 <__hexdig_fun+0xa>
 8004880:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8004884:	2b05      	cmp	r3, #5
 8004886:	d801      	bhi.n	800488c <__hexdig_fun+0x26>
 8004888:	3827      	subs	r0, #39	; 0x27
 800488a:	e7f1      	b.n	8004870 <__hexdig_fun+0xa>
 800488c:	2000      	movs	r0, #0
 800488e:	4770      	bx	lr

08004890 <__gethex>:
 8004890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004894:	b08b      	sub	sp, #44	; 0x2c
 8004896:	9305      	str	r3, [sp, #20]
 8004898:	4bb2      	ldr	r3, [pc, #712]	; (8004b64 <__gethex+0x2d4>)
 800489a:	9002      	str	r0, [sp, #8]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	468b      	mov	fp, r1
 80048a0:	4618      	mov	r0, r3
 80048a2:	4690      	mov	r8, r2
 80048a4:	9303      	str	r3, [sp, #12]
 80048a6:	f7fb fc53 	bl	8000150 <strlen>
 80048aa:	4682      	mov	sl, r0
 80048ac:	9b03      	ldr	r3, [sp, #12]
 80048ae:	f8db 2000 	ldr.w	r2, [fp]
 80048b2:	4403      	add	r3, r0
 80048b4:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80048b8:	9306      	str	r3, [sp, #24]
 80048ba:	1c93      	adds	r3, r2, #2
 80048bc:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80048c0:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80048c4:	32fe      	adds	r2, #254	; 0xfe
 80048c6:	18d1      	adds	r1, r2, r3
 80048c8:	461f      	mov	r7, r3
 80048ca:	f813 0b01 	ldrb.w	r0, [r3], #1
 80048ce:	9101      	str	r1, [sp, #4]
 80048d0:	2830      	cmp	r0, #48	; 0x30
 80048d2:	d0f8      	beq.n	80048c6 <__gethex+0x36>
 80048d4:	f7ff ffc7 	bl	8004866 <__hexdig_fun>
 80048d8:	4604      	mov	r4, r0
 80048da:	2800      	cmp	r0, #0
 80048dc:	d13a      	bne.n	8004954 <__gethex+0xc4>
 80048de:	4652      	mov	r2, sl
 80048e0:	4638      	mov	r0, r7
 80048e2:	9903      	ldr	r1, [sp, #12]
 80048e4:	f7ff f940 	bl	8003b68 <strncmp>
 80048e8:	4605      	mov	r5, r0
 80048ea:	2800      	cmp	r0, #0
 80048ec:	d166      	bne.n	80049bc <__gethex+0x12c>
 80048ee:	f817 000a 	ldrb.w	r0, [r7, sl]
 80048f2:	eb07 060a 	add.w	r6, r7, sl
 80048f6:	f7ff ffb6 	bl	8004866 <__hexdig_fun>
 80048fa:	2800      	cmp	r0, #0
 80048fc:	d060      	beq.n	80049c0 <__gethex+0x130>
 80048fe:	4633      	mov	r3, r6
 8004900:	7818      	ldrb	r0, [r3, #0]
 8004902:	461f      	mov	r7, r3
 8004904:	2830      	cmp	r0, #48	; 0x30
 8004906:	f103 0301 	add.w	r3, r3, #1
 800490a:	d0f9      	beq.n	8004900 <__gethex+0x70>
 800490c:	f7ff ffab 	bl	8004866 <__hexdig_fun>
 8004910:	2301      	movs	r3, #1
 8004912:	fab0 f480 	clz	r4, r0
 8004916:	4635      	mov	r5, r6
 8004918:	0964      	lsrs	r4, r4, #5
 800491a:	9301      	str	r3, [sp, #4]
 800491c:	463a      	mov	r2, r7
 800491e:	4616      	mov	r6, r2
 8004920:	7830      	ldrb	r0, [r6, #0]
 8004922:	3201      	adds	r2, #1
 8004924:	f7ff ff9f 	bl	8004866 <__hexdig_fun>
 8004928:	2800      	cmp	r0, #0
 800492a:	d1f8      	bne.n	800491e <__gethex+0x8e>
 800492c:	4652      	mov	r2, sl
 800492e:	4630      	mov	r0, r6
 8004930:	9903      	ldr	r1, [sp, #12]
 8004932:	f7ff f919 	bl	8003b68 <strncmp>
 8004936:	b980      	cbnz	r0, 800495a <__gethex+0xca>
 8004938:	b94d      	cbnz	r5, 800494e <__gethex+0xbe>
 800493a:	eb06 050a 	add.w	r5, r6, sl
 800493e:	462a      	mov	r2, r5
 8004940:	4616      	mov	r6, r2
 8004942:	7830      	ldrb	r0, [r6, #0]
 8004944:	3201      	adds	r2, #1
 8004946:	f7ff ff8e 	bl	8004866 <__hexdig_fun>
 800494a:	2800      	cmp	r0, #0
 800494c:	d1f8      	bne.n	8004940 <__gethex+0xb0>
 800494e:	1bad      	subs	r5, r5, r6
 8004950:	00ad      	lsls	r5, r5, #2
 8004952:	e004      	b.n	800495e <__gethex+0xce>
 8004954:	2400      	movs	r4, #0
 8004956:	4625      	mov	r5, r4
 8004958:	e7e0      	b.n	800491c <__gethex+0x8c>
 800495a:	2d00      	cmp	r5, #0
 800495c:	d1f7      	bne.n	800494e <__gethex+0xbe>
 800495e:	7833      	ldrb	r3, [r6, #0]
 8004960:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8004964:	2b50      	cmp	r3, #80	; 0x50
 8004966:	d139      	bne.n	80049dc <__gethex+0x14c>
 8004968:	7873      	ldrb	r3, [r6, #1]
 800496a:	2b2b      	cmp	r3, #43	; 0x2b
 800496c:	d02a      	beq.n	80049c4 <__gethex+0x134>
 800496e:	2b2d      	cmp	r3, #45	; 0x2d
 8004970:	d02c      	beq.n	80049cc <__gethex+0x13c>
 8004972:	f04f 0900 	mov.w	r9, #0
 8004976:	1c71      	adds	r1, r6, #1
 8004978:	7808      	ldrb	r0, [r1, #0]
 800497a:	f7ff ff74 	bl	8004866 <__hexdig_fun>
 800497e:	1e43      	subs	r3, r0, #1
 8004980:	b2db      	uxtb	r3, r3
 8004982:	2b18      	cmp	r3, #24
 8004984:	d82a      	bhi.n	80049dc <__gethex+0x14c>
 8004986:	f1a0 0210 	sub.w	r2, r0, #16
 800498a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800498e:	f7ff ff6a 	bl	8004866 <__hexdig_fun>
 8004992:	1e43      	subs	r3, r0, #1
 8004994:	b2db      	uxtb	r3, r3
 8004996:	2b18      	cmp	r3, #24
 8004998:	d91b      	bls.n	80049d2 <__gethex+0x142>
 800499a:	f1b9 0f00 	cmp.w	r9, #0
 800499e:	d000      	beq.n	80049a2 <__gethex+0x112>
 80049a0:	4252      	negs	r2, r2
 80049a2:	4415      	add	r5, r2
 80049a4:	f8cb 1000 	str.w	r1, [fp]
 80049a8:	b1d4      	cbz	r4, 80049e0 <__gethex+0x150>
 80049aa:	9b01      	ldr	r3, [sp, #4]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	bf14      	ite	ne
 80049b0:	2700      	movne	r7, #0
 80049b2:	2706      	moveq	r7, #6
 80049b4:	4638      	mov	r0, r7
 80049b6:	b00b      	add	sp, #44	; 0x2c
 80049b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049bc:	463e      	mov	r6, r7
 80049be:	4625      	mov	r5, r4
 80049c0:	2401      	movs	r4, #1
 80049c2:	e7cc      	b.n	800495e <__gethex+0xce>
 80049c4:	f04f 0900 	mov.w	r9, #0
 80049c8:	1cb1      	adds	r1, r6, #2
 80049ca:	e7d5      	b.n	8004978 <__gethex+0xe8>
 80049cc:	f04f 0901 	mov.w	r9, #1
 80049d0:	e7fa      	b.n	80049c8 <__gethex+0x138>
 80049d2:	230a      	movs	r3, #10
 80049d4:	fb03 0202 	mla	r2, r3, r2, r0
 80049d8:	3a10      	subs	r2, #16
 80049da:	e7d6      	b.n	800498a <__gethex+0xfa>
 80049dc:	4631      	mov	r1, r6
 80049de:	e7e1      	b.n	80049a4 <__gethex+0x114>
 80049e0:	4621      	mov	r1, r4
 80049e2:	1bf3      	subs	r3, r6, r7
 80049e4:	3b01      	subs	r3, #1
 80049e6:	2b07      	cmp	r3, #7
 80049e8:	dc0a      	bgt.n	8004a00 <__gethex+0x170>
 80049ea:	9802      	ldr	r0, [sp, #8]
 80049ec:	f000 fa60 	bl	8004eb0 <_Balloc>
 80049f0:	4604      	mov	r4, r0
 80049f2:	b940      	cbnz	r0, 8004a06 <__gethex+0x176>
 80049f4:	4602      	mov	r2, r0
 80049f6:	21de      	movs	r1, #222	; 0xde
 80049f8:	4b5b      	ldr	r3, [pc, #364]	; (8004b68 <__gethex+0x2d8>)
 80049fa:	485c      	ldr	r0, [pc, #368]	; (8004b6c <__gethex+0x2dc>)
 80049fc:	f000 ffdc 	bl	80059b8 <__assert_func>
 8004a00:	3101      	adds	r1, #1
 8004a02:	105b      	asrs	r3, r3, #1
 8004a04:	e7ef      	b.n	80049e6 <__gethex+0x156>
 8004a06:	f04f 0b00 	mov.w	fp, #0
 8004a0a:	f100 0914 	add.w	r9, r0, #20
 8004a0e:	f1ca 0301 	rsb	r3, sl, #1
 8004a12:	f8cd 9010 	str.w	r9, [sp, #16]
 8004a16:	f8cd b004 	str.w	fp, [sp, #4]
 8004a1a:	9308      	str	r3, [sp, #32]
 8004a1c:	42b7      	cmp	r7, r6
 8004a1e:	d33f      	bcc.n	8004aa0 <__gethex+0x210>
 8004a20:	9f04      	ldr	r7, [sp, #16]
 8004a22:	9b01      	ldr	r3, [sp, #4]
 8004a24:	f847 3b04 	str.w	r3, [r7], #4
 8004a28:	eba7 0709 	sub.w	r7, r7, r9
 8004a2c:	10bf      	asrs	r7, r7, #2
 8004a2e:	6127      	str	r7, [r4, #16]
 8004a30:	4618      	mov	r0, r3
 8004a32:	f000 fb2f 	bl	8005094 <__hi0bits>
 8004a36:	017f      	lsls	r7, r7, #5
 8004a38:	f8d8 6000 	ldr.w	r6, [r8]
 8004a3c:	1a3f      	subs	r7, r7, r0
 8004a3e:	42b7      	cmp	r7, r6
 8004a40:	dd62      	ble.n	8004b08 <__gethex+0x278>
 8004a42:	1bbf      	subs	r7, r7, r6
 8004a44:	4639      	mov	r1, r7
 8004a46:	4620      	mov	r0, r4
 8004a48:	f000 fec9 	bl	80057de <__any_on>
 8004a4c:	4682      	mov	sl, r0
 8004a4e:	b1a8      	cbz	r0, 8004a7c <__gethex+0x1ec>
 8004a50:	f04f 0a01 	mov.w	sl, #1
 8004a54:	1e7b      	subs	r3, r7, #1
 8004a56:	1159      	asrs	r1, r3, #5
 8004a58:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8004a5c:	f003 021f 	and.w	r2, r3, #31
 8004a60:	fa0a f202 	lsl.w	r2, sl, r2
 8004a64:	420a      	tst	r2, r1
 8004a66:	d009      	beq.n	8004a7c <__gethex+0x1ec>
 8004a68:	4553      	cmp	r3, sl
 8004a6a:	dd05      	ble.n	8004a78 <__gethex+0x1e8>
 8004a6c:	4620      	mov	r0, r4
 8004a6e:	1eb9      	subs	r1, r7, #2
 8004a70:	f000 feb5 	bl	80057de <__any_on>
 8004a74:	2800      	cmp	r0, #0
 8004a76:	d144      	bne.n	8004b02 <__gethex+0x272>
 8004a78:	f04f 0a02 	mov.w	sl, #2
 8004a7c:	4639      	mov	r1, r7
 8004a7e:	4620      	mov	r0, r4
 8004a80:	f7ff fe9e 	bl	80047c0 <rshift>
 8004a84:	443d      	add	r5, r7
 8004a86:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8004a8a:	42ab      	cmp	r3, r5
 8004a8c:	da4a      	bge.n	8004b24 <__gethex+0x294>
 8004a8e:	4621      	mov	r1, r4
 8004a90:	9802      	ldr	r0, [sp, #8]
 8004a92:	f000 fa4d 	bl	8004f30 <_Bfree>
 8004a96:	2300      	movs	r3, #0
 8004a98:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8004a9a:	27a3      	movs	r7, #163	; 0xa3
 8004a9c:	6013      	str	r3, [r2, #0]
 8004a9e:	e789      	b.n	80049b4 <__gethex+0x124>
 8004aa0:	1e73      	subs	r3, r6, #1
 8004aa2:	9a06      	ldr	r2, [sp, #24]
 8004aa4:	9307      	str	r3, [sp, #28]
 8004aa6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d019      	beq.n	8004ae2 <__gethex+0x252>
 8004aae:	f1bb 0f20 	cmp.w	fp, #32
 8004ab2:	d107      	bne.n	8004ac4 <__gethex+0x234>
 8004ab4:	9b04      	ldr	r3, [sp, #16]
 8004ab6:	9a01      	ldr	r2, [sp, #4]
 8004ab8:	f843 2b04 	str.w	r2, [r3], #4
 8004abc:	9304      	str	r3, [sp, #16]
 8004abe:	2300      	movs	r3, #0
 8004ac0:	469b      	mov	fp, r3
 8004ac2:	9301      	str	r3, [sp, #4]
 8004ac4:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8004ac8:	f7ff fecd 	bl	8004866 <__hexdig_fun>
 8004acc:	9b01      	ldr	r3, [sp, #4]
 8004ace:	f000 000f 	and.w	r0, r0, #15
 8004ad2:	fa00 f00b 	lsl.w	r0, r0, fp
 8004ad6:	4303      	orrs	r3, r0
 8004ad8:	9301      	str	r3, [sp, #4]
 8004ada:	f10b 0b04 	add.w	fp, fp, #4
 8004ade:	9b07      	ldr	r3, [sp, #28]
 8004ae0:	e00d      	b.n	8004afe <__gethex+0x26e>
 8004ae2:	9a08      	ldr	r2, [sp, #32]
 8004ae4:	1e73      	subs	r3, r6, #1
 8004ae6:	4413      	add	r3, r2
 8004ae8:	42bb      	cmp	r3, r7
 8004aea:	d3e0      	bcc.n	8004aae <__gethex+0x21e>
 8004aec:	4618      	mov	r0, r3
 8004aee:	4652      	mov	r2, sl
 8004af0:	9903      	ldr	r1, [sp, #12]
 8004af2:	9309      	str	r3, [sp, #36]	; 0x24
 8004af4:	f7ff f838 	bl	8003b68 <strncmp>
 8004af8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004afa:	2800      	cmp	r0, #0
 8004afc:	d1d7      	bne.n	8004aae <__gethex+0x21e>
 8004afe:	461e      	mov	r6, r3
 8004b00:	e78c      	b.n	8004a1c <__gethex+0x18c>
 8004b02:	f04f 0a03 	mov.w	sl, #3
 8004b06:	e7b9      	b.n	8004a7c <__gethex+0x1ec>
 8004b08:	da09      	bge.n	8004b1e <__gethex+0x28e>
 8004b0a:	1bf7      	subs	r7, r6, r7
 8004b0c:	4621      	mov	r1, r4
 8004b0e:	463a      	mov	r2, r7
 8004b10:	9802      	ldr	r0, [sp, #8]
 8004b12:	f000 fc25 	bl	8005360 <__lshift>
 8004b16:	4604      	mov	r4, r0
 8004b18:	1bed      	subs	r5, r5, r7
 8004b1a:	f100 0914 	add.w	r9, r0, #20
 8004b1e:	f04f 0a00 	mov.w	sl, #0
 8004b22:	e7b0      	b.n	8004a86 <__gethex+0x1f6>
 8004b24:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8004b28:	42a8      	cmp	r0, r5
 8004b2a:	dd72      	ble.n	8004c12 <__gethex+0x382>
 8004b2c:	1b45      	subs	r5, r0, r5
 8004b2e:	42ae      	cmp	r6, r5
 8004b30:	dc35      	bgt.n	8004b9e <__gethex+0x30e>
 8004b32:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8004b36:	2b02      	cmp	r3, #2
 8004b38:	d029      	beq.n	8004b8e <__gethex+0x2fe>
 8004b3a:	2b03      	cmp	r3, #3
 8004b3c:	d02b      	beq.n	8004b96 <__gethex+0x306>
 8004b3e:	2b01      	cmp	r3, #1
 8004b40:	d11c      	bne.n	8004b7c <__gethex+0x2ec>
 8004b42:	42ae      	cmp	r6, r5
 8004b44:	d11a      	bne.n	8004b7c <__gethex+0x2ec>
 8004b46:	2e01      	cmp	r6, #1
 8004b48:	d112      	bne.n	8004b70 <__gethex+0x2e0>
 8004b4a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8004b4e:	9a05      	ldr	r2, [sp, #20]
 8004b50:	2762      	movs	r7, #98	; 0x62
 8004b52:	6013      	str	r3, [r2, #0]
 8004b54:	2301      	movs	r3, #1
 8004b56:	6123      	str	r3, [r4, #16]
 8004b58:	f8c9 3000 	str.w	r3, [r9]
 8004b5c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004b5e:	601c      	str	r4, [r3, #0]
 8004b60:	e728      	b.n	80049b4 <__gethex+0x124>
 8004b62:	bf00      	nop
 8004b64:	080069c8 	.word	0x080069c8
 8004b68:	08006950 	.word	0x08006950
 8004b6c:	08006961 	.word	0x08006961
 8004b70:	4620      	mov	r0, r4
 8004b72:	1e71      	subs	r1, r6, #1
 8004b74:	f000 fe33 	bl	80057de <__any_on>
 8004b78:	2800      	cmp	r0, #0
 8004b7a:	d1e6      	bne.n	8004b4a <__gethex+0x2ba>
 8004b7c:	4621      	mov	r1, r4
 8004b7e:	9802      	ldr	r0, [sp, #8]
 8004b80:	f000 f9d6 	bl	8004f30 <_Bfree>
 8004b84:	2300      	movs	r3, #0
 8004b86:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8004b88:	2750      	movs	r7, #80	; 0x50
 8004b8a:	6013      	str	r3, [r2, #0]
 8004b8c:	e712      	b.n	80049b4 <__gethex+0x124>
 8004b8e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d1f3      	bne.n	8004b7c <__gethex+0x2ec>
 8004b94:	e7d9      	b.n	8004b4a <__gethex+0x2ba>
 8004b96:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d1d6      	bne.n	8004b4a <__gethex+0x2ba>
 8004b9c:	e7ee      	b.n	8004b7c <__gethex+0x2ec>
 8004b9e:	1e6f      	subs	r7, r5, #1
 8004ba0:	f1ba 0f00 	cmp.w	sl, #0
 8004ba4:	d132      	bne.n	8004c0c <__gethex+0x37c>
 8004ba6:	b127      	cbz	r7, 8004bb2 <__gethex+0x322>
 8004ba8:	4639      	mov	r1, r7
 8004baa:	4620      	mov	r0, r4
 8004bac:	f000 fe17 	bl	80057de <__any_on>
 8004bb0:	4682      	mov	sl, r0
 8004bb2:	2101      	movs	r1, #1
 8004bb4:	117b      	asrs	r3, r7, #5
 8004bb6:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8004bba:	f007 071f 	and.w	r7, r7, #31
 8004bbe:	fa01 f707 	lsl.w	r7, r1, r7
 8004bc2:	421f      	tst	r7, r3
 8004bc4:	f04f 0702 	mov.w	r7, #2
 8004bc8:	4629      	mov	r1, r5
 8004bca:	4620      	mov	r0, r4
 8004bcc:	bf18      	it	ne
 8004bce:	f04a 0a02 	orrne.w	sl, sl, #2
 8004bd2:	1b76      	subs	r6, r6, r5
 8004bd4:	f7ff fdf4 	bl	80047c0 <rshift>
 8004bd8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8004bdc:	f1ba 0f00 	cmp.w	sl, #0
 8004be0:	d048      	beq.n	8004c74 <__gethex+0x3e4>
 8004be2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8004be6:	2b02      	cmp	r3, #2
 8004be8:	d015      	beq.n	8004c16 <__gethex+0x386>
 8004bea:	2b03      	cmp	r3, #3
 8004bec:	d017      	beq.n	8004c1e <__gethex+0x38e>
 8004bee:	2b01      	cmp	r3, #1
 8004bf0:	d109      	bne.n	8004c06 <__gethex+0x376>
 8004bf2:	f01a 0f02 	tst.w	sl, #2
 8004bf6:	d006      	beq.n	8004c06 <__gethex+0x376>
 8004bf8:	f8d9 0000 	ldr.w	r0, [r9]
 8004bfc:	ea4a 0a00 	orr.w	sl, sl, r0
 8004c00:	f01a 0f01 	tst.w	sl, #1
 8004c04:	d10e      	bne.n	8004c24 <__gethex+0x394>
 8004c06:	f047 0710 	orr.w	r7, r7, #16
 8004c0a:	e033      	b.n	8004c74 <__gethex+0x3e4>
 8004c0c:	f04f 0a01 	mov.w	sl, #1
 8004c10:	e7cf      	b.n	8004bb2 <__gethex+0x322>
 8004c12:	2701      	movs	r7, #1
 8004c14:	e7e2      	b.n	8004bdc <__gethex+0x34c>
 8004c16:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004c18:	f1c3 0301 	rsb	r3, r3, #1
 8004c1c:	9315      	str	r3, [sp, #84]	; 0x54
 8004c1e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d0f0      	beq.n	8004c06 <__gethex+0x376>
 8004c24:	f04f 0c00 	mov.w	ip, #0
 8004c28:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8004c2c:	f104 0314 	add.w	r3, r4, #20
 8004c30:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8004c34:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8004c38:	4618      	mov	r0, r3
 8004c3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8004c3e:	f1b2 3fff 	cmp.w	r2, #4294967295
 8004c42:	d01c      	beq.n	8004c7e <__gethex+0x3ee>
 8004c44:	3201      	adds	r2, #1
 8004c46:	6002      	str	r2, [r0, #0]
 8004c48:	2f02      	cmp	r7, #2
 8004c4a:	f104 0314 	add.w	r3, r4, #20
 8004c4e:	d13d      	bne.n	8004ccc <__gethex+0x43c>
 8004c50:	f8d8 2000 	ldr.w	r2, [r8]
 8004c54:	3a01      	subs	r2, #1
 8004c56:	42b2      	cmp	r2, r6
 8004c58:	d10a      	bne.n	8004c70 <__gethex+0x3e0>
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	1171      	asrs	r1, r6, #5
 8004c5e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004c62:	f006 061f 	and.w	r6, r6, #31
 8004c66:	fa02 f606 	lsl.w	r6, r2, r6
 8004c6a:	421e      	tst	r6, r3
 8004c6c:	bf18      	it	ne
 8004c6e:	4617      	movne	r7, r2
 8004c70:	f047 0720 	orr.w	r7, r7, #32
 8004c74:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004c76:	601c      	str	r4, [r3, #0]
 8004c78:	9b05      	ldr	r3, [sp, #20]
 8004c7a:	601d      	str	r5, [r3, #0]
 8004c7c:	e69a      	b.n	80049b4 <__gethex+0x124>
 8004c7e:	4299      	cmp	r1, r3
 8004c80:	f843 cc04 	str.w	ip, [r3, #-4]
 8004c84:	d8d8      	bhi.n	8004c38 <__gethex+0x3a8>
 8004c86:	68a3      	ldr	r3, [r4, #8]
 8004c88:	459b      	cmp	fp, r3
 8004c8a:	db17      	blt.n	8004cbc <__gethex+0x42c>
 8004c8c:	6861      	ldr	r1, [r4, #4]
 8004c8e:	9802      	ldr	r0, [sp, #8]
 8004c90:	3101      	adds	r1, #1
 8004c92:	f000 f90d 	bl	8004eb0 <_Balloc>
 8004c96:	4681      	mov	r9, r0
 8004c98:	b918      	cbnz	r0, 8004ca2 <__gethex+0x412>
 8004c9a:	4602      	mov	r2, r0
 8004c9c:	2184      	movs	r1, #132	; 0x84
 8004c9e:	4b19      	ldr	r3, [pc, #100]	; (8004d04 <__gethex+0x474>)
 8004ca0:	e6ab      	b.n	80049fa <__gethex+0x16a>
 8004ca2:	6922      	ldr	r2, [r4, #16]
 8004ca4:	f104 010c 	add.w	r1, r4, #12
 8004ca8:	3202      	adds	r2, #2
 8004caa:	0092      	lsls	r2, r2, #2
 8004cac:	300c      	adds	r0, #12
 8004cae:	f7fe ff45 	bl	8003b3c <memcpy>
 8004cb2:	4621      	mov	r1, r4
 8004cb4:	9802      	ldr	r0, [sp, #8]
 8004cb6:	f000 f93b 	bl	8004f30 <_Bfree>
 8004cba:	464c      	mov	r4, r9
 8004cbc:	6923      	ldr	r3, [r4, #16]
 8004cbe:	1c5a      	adds	r2, r3, #1
 8004cc0:	6122      	str	r2, [r4, #16]
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004cc8:	615a      	str	r2, [r3, #20]
 8004cca:	e7bd      	b.n	8004c48 <__gethex+0x3b8>
 8004ccc:	6922      	ldr	r2, [r4, #16]
 8004cce:	455a      	cmp	r2, fp
 8004cd0:	dd0b      	ble.n	8004cea <__gethex+0x45a>
 8004cd2:	2101      	movs	r1, #1
 8004cd4:	4620      	mov	r0, r4
 8004cd6:	f7ff fd73 	bl	80047c0 <rshift>
 8004cda:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8004cde:	3501      	adds	r5, #1
 8004ce0:	42ab      	cmp	r3, r5
 8004ce2:	f6ff aed4 	blt.w	8004a8e <__gethex+0x1fe>
 8004ce6:	2701      	movs	r7, #1
 8004ce8:	e7c2      	b.n	8004c70 <__gethex+0x3e0>
 8004cea:	f016 061f 	ands.w	r6, r6, #31
 8004cee:	d0fa      	beq.n	8004ce6 <__gethex+0x456>
 8004cf0:	4453      	add	r3, sl
 8004cf2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8004cf6:	f000 f9cd 	bl	8005094 <__hi0bits>
 8004cfa:	f1c6 0620 	rsb	r6, r6, #32
 8004cfe:	42b0      	cmp	r0, r6
 8004d00:	dbe7      	blt.n	8004cd2 <__gethex+0x442>
 8004d02:	e7f0      	b.n	8004ce6 <__gethex+0x456>
 8004d04:	08006950 	.word	0x08006950

08004d08 <L_shift>:
 8004d08:	f1c2 0208 	rsb	r2, r2, #8
 8004d0c:	0092      	lsls	r2, r2, #2
 8004d0e:	b570      	push	{r4, r5, r6, lr}
 8004d10:	f1c2 0620 	rsb	r6, r2, #32
 8004d14:	6843      	ldr	r3, [r0, #4]
 8004d16:	6804      	ldr	r4, [r0, #0]
 8004d18:	fa03 f506 	lsl.w	r5, r3, r6
 8004d1c:	432c      	orrs	r4, r5
 8004d1e:	40d3      	lsrs	r3, r2
 8004d20:	6004      	str	r4, [r0, #0]
 8004d22:	f840 3f04 	str.w	r3, [r0, #4]!
 8004d26:	4288      	cmp	r0, r1
 8004d28:	d3f4      	bcc.n	8004d14 <L_shift+0xc>
 8004d2a:	bd70      	pop	{r4, r5, r6, pc}

08004d2c <__match>:
 8004d2c:	b530      	push	{r4, r5, lr}
 8004d2e:	6803      	ldr	r3, [r0, #0]
 8004d30:	3301      	adds	r3, #1
 8004d32:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d36:	b914      	cbnz	r4, 8004d3e <__match+0x12>
 8004d38:	6003      	str	r3, [r0, #0]
 8004d3a:	2001      	movs	r0, #1
 8004d3c:	bd30      	pop	{r4, r5, pc}
 8004d3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004d42:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8004d46:	2d19      	cmp	r5, #25
 8004d48:	bf98      	it	ls
 8004d4a:	3220      	addls	r2, #32
 8004d4c:	42a2      	cmp	r2, r4
 8004d4e:	d0f0      	beq.n	8004d32 <__match+0x6>
 8004d50:	2000      	movs	r0, #0
 8004d52:	e7f3      	b.n	8004d3c <__match+0x10>

08004d54 <__hexnan>:
 8004d54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d58:	2500      	movs	r5, #0
 8004d5a:	680b      	ldr	r3, [r1, #0]
 8004d5c:	4682      	mov	sl, r0
 8004d5e:	115e      	asrs	r6, r3, #5
 8004d60:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8004d64:	f013 031f 	ands.w	r3, r3, #31
 8004d68:	bf18      	it	ne
 8004d6a:	3604      	addne	r6, #4
 8004d6c:	1f37      	subs	r7, r6, #4
 8004d6e:	46b9      	mov	r9, r7
 8004d70:	463c      	mov	r4, r7
 8004d72:	46ab      	mov	fp, r5
 8004d74:	b087      	sub	sp, #28
 8004d76:	4690      	mov	r8, r2
 8004d78:	6802      	ldr	r2, [r0, #0]
 8004d7a:	9301      	str	r3, [sp, #4]
 8004d7c:	f846 5c04 	str.w	r5, [r6, #-4]
 8004d80:	9502      	str	r5, [sp, #8]
 8004d82:	7851      	ldrb	r1, [r2, #1]
 8004d84:	1c53      	adds	r3, r2, #1
 8004d86:	9303      	str	r3, [sp, #12]
 8004d88:	b341      	cbz	r1, 8004ddc <__hexnan+0x88>
 8004d8a:	4608      	mov	r0, r1
 8004d8c:	9205      	str	r2, [sp, #20]
 8004d8e:	9104      	str	r1, [sp, #16]
 8004d90:	f7ff fd69 	bl	8004866 <__hexdig_fun>
 8004d94:	2800      	cmp	r0, #0
 8004d96:	d14f      	bne.n	8004e38 <__hexnan+0xe4>
 8004d98:	9904      	ldr	r1, [sp, #16]
 8004d9a:	9a05      	ldr	r2, [sp, #20]
 8004d9c:	2920      	cmp	r1, #32
 8004d9e:	d818      	bhi.n	8004dd2 <__hexnan+0x7e>
 8004da0:	9b02      	ldr	r3, [sp, #8]
 8004da2:	459b      	cmp	fp, r3
 8004da4:	dd13      	ble.n	8004dce <__hexnan+0x7a>
 8004da6:	454c      	cmp	r4, r9
 8004da8:	d206      	bcs.n	8004db8 <__hexnan+0x64>
 8004daa:	2d07      	cmp	r5, #7
 8004dac:	dc04      	bgt.n	8004db8 <__hexnan+0x64>
 8004dae:	462a      	mov	r2, r5
 8004db0:	4649      	mov	r1, r9
 8004db2:	4620      	mov	r0, r4
 8004db4:	f7ff ffa8 	bl	8004d08 <L_shift>
 8004db8:	4544      	cmp	r4, r8
 8004dba:	d950      	bls.n	8004e5e <__hexnan+0x10a>
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	f1a4 0904 	sub.w	r9, r4, #4
 8004dc2:	f844 3c04 	str.w	r3, [r4, #-4]
 8004dc6:	461d      	mov	r5, r3
 8004dc8:	464c      	mov	r4, r9
 8004dca:	f8cd b008 	str.w	fp, [sp, #8]
 8004dce:	9a03      	ldr	r2, [sp, #12]
 8004dd0:	e7d7      	b.n	8004d82 <__hexnan+0x2e>
 8004dd2:	2929      	cmp	r1, #41	; 0x29
 8004dd4:	d156      	bne.n	8004e84 <__hexnan+0x130>
 8004dd6:	3202      	adds	r2, #2
 8004dd8:	f8ca 2000 	str.w	r2, [sl]
 8004ddc:	f1bb 0f00 	cmp.w	fp, #0
 8004de0:	d050      	beq.n	8004e84 <__hexnan+0x130>
 8004de2:	454c      	cmp	r4, r9
 8004de4:	d206      	bcs.n	8004df4 <__hexnan+0xa0>
 8004de6:	2d07      	cmp	r5, #7
 8004de8:	dc04      	bgt.n	8004df4 <__hexnan+0xa0>
 8004dea:	462a      	mov	r2, r5
 8004dec:	4649      	mov	r1, r9
 8004dee:	4620      	mov	r0, r4
 8004df0:	f7ff ff8a 	bl	8004d08 <L_shift>
 8004df4:	4544      	cmp	r4, r8
 8004df6:	d934      	bls.n	8004e62 <__hexnan+0x10e>
 8004df8:	4623      	mov	r3, r4
 8004dfa:	f1a8 0204 	sub.w	r2, r8, #4
 8004dfe:	f853 1b04 	ldr.w	r1, [r3], #4
 8004e02:	429f      	cmp	r7, r3
 8004e04:	f842 1f04 	str.w	r1, [r2, #4]!
 8004e08:	d2f9      	bcs.n	8004dfe <__hexnan+0xaa>
 8004e0a:	1b3b      	subs	r3, r7, r4
 8004e0c:	f023 0303 	bic.w	r3, r3, #3
 8004e10:	3304      	adds	r3, #4
 8004e12:	3401      	adds	r4, #1
 8004e14:	3e03      	subs	r6, #3
 8004e16:	42b4      	cmp	r4, r6
 8004e18:	bf88      	it	hi
 8004e1a:	2304      	movhi	r3, #4
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	4443      	add	r3, r8
 8004e20:	f843 2b04 	str.w	r2, [r3], #4
 8004e24:	429f      	cmp	r7, r3
 8004e26:	d2fb      	bcs.n	8004e20 <__hexnan+0xcc>
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	b91b      	cbnz	r3, 8004e34 <__hexnan+0xe0>
 8004e2c:	4547      	cmp	r7, r8
 8004e2e:	d127      	bne.n	8004e80 <__hexnan+0x12c>
 8004e30:	2301      	movs	r3, #1
 8004e32:	603b      	str	r3, [r7, #0]
 8004e34:	2005      	movs	r0, #5
 8004e36:	e026      	b.n	8004e86 <__hexnan+0x132>
 8004e38:	3501      	adds	r5, #1
 8004e3a:	2d08      	cmp	r5, #8
 8004e3c:	f10b 0b01 	add.w	fp, fp, #1
 8004e40:	dd06      	ble.n	8004e50 <__hexnan+0xfc>
 8004e42:	4544      	cmp	r4, r8
 8004e44:	d9c3      	bls.n	8004dce <__hexnan+0x7a>
 8004e46:	2300      	movs	r3, #0
 8004e48:	2501      	movs	r5, #1
 8004e4a:	f844 3c04 	str.w	r3, [r4, #-4]
 8004e4e:	3c04      	subs	r4, #4
 8004e50:	6822      	ldr	r2, [r4, #0]
 8004e52:	f000 000f 	and.w	r0, r0, #15
 8004e56:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8004e5a:	6022      	str	r2, [r4, #0]
 8004e5c:	e7b7      	b.n	8004dce <__hexnan+0x7a>
 8004e5e:	2508      	movs	r5, #8
 8004e60:	e7b5      	b.n	8004dce <__hexnan+0x7a>
 8004e62:	9b01      	ldr	r3, [sp, #4]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d0df      	beq.n	8004e28 <__hexnan+0xd4>
 8004e68:	f04f 32ff 	mov.w	r2, #4294967295
 8004e6c:	f1c3 0320 	rsb	r3, r3, #32
 8004e70:	fa22 f303 	lsr.w	r3, r2, r3
 8004e74:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8004e78:	401a      	ands	r2, r3
 8004e7a:	f846 2c04 	str.w	r2, [r6, #-4]
 8004e7e:	e7d3      	b.n	8004e28 <__hexnan+0xd4>
 8004e80:	3f04      	subs	r7, #4
 8004e82:	e7d1      	b.n	8004e28 <__hexnan+0xd4>
 8004e84:	2004      	movs	r0, #4
 8004e86:	b007      	add	sp, #28
 8004e88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004e8c <__ascii_mbtowc>:
 8004e8c:	b082      	sub	sp, #8
 8004e8e:	b901      	cbnz	r1, 8004e92 <__ascii_mbtowc+0x6>
 8004e90:	a901      	add	r1, sp, #4
 8004e92:	b142      	cbz	r2, 8004ea6 <__ascii_mbtowc+0x1a>
 8004e94:	b14b      	cbz	r3, 8004eaa <__ascii_mbtowc+0x1e>
 8004e96:	7813      	ldrb	r3, [r2, #0]
 8004e98:	600b      	str	r3, [r1, #0]
 8004e9a:	7812      	ldrb	r2, [r2, #0]
 8004e9c:	1e10      	subs	r0, r2, #0
 8004e9e:	bf18      	it	ne
 8004ea0:	2001      	movne	r0, #1
 8004ea2:	b002      	add	sp, #8
 8004ea4:	4770      	bx	lr
 8004ea6:	4610      	mov	r0, r2
 8004ea8:	e7fb      	b.n	8004ea2 <__ascii_mbtowc+0x16>
 8004eaa:	f06f 0001 	mvn.w	r0, #1
 8004eae:	e7f8      	b.n	8004ea2 <__ascii_mbtowc+0x16>

08004eb0 <_Balloc>:
 8004eb0:	b570      	push	{r4, r5, r6, lr}
 8004eb2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004eb4:	4604      	mov	r4, r0
 8004eb6:	460d      	mov	r5, r1
 8004eb8:	b976      	cbnz	r6, 8004ed8 <_Balloc+0x28>
 8004eba:	2010      	movs	r0, #16
 8004ebc:	f000 fdac 	bl	8005a18 <malloc>
 8004ec0:	4602      	mov	r2, r0
 8004ec2:	6260      	str	r0, [r4, #36]	; 0x24
 8004ec4:	b920      	cbnz	r0, 8004ed0 <_Balloc+0x20>
 8004ec6:	2166      	movs	r1, #102	; 0x66
 8004ec8:	4b17      	ldr	r3, [pc, #92]	; (8004f28 <_Balloc+0x78>)
 8004eca:	4818      	ldr	r0, [pc, #96]	; (8004f2c <_Balloc+0x7c>)
 8004ecc:	f000 fd74 	bl	80059b8 <__assert_func>
 8004ed0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004ed4:	6006      	str	r6, [r0, #0]
 8004ed6:	60c6      	str	r6, [r0, #12]
 8004ed8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004eda:	68f3      	ldr	r3, [r6, #12]
 8004edc:	b183      	cbz	r3, 8004f00 <_Balloc+0x50>
 8004ede:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004ee0:	68db      	ldr	r3, [r3, #12]
 8004ee2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004ee6:	b9b8      	cbnz	r0, 8004f18 <_Balloc+0x68>
 8004ee8:	2101      	movs	r1, #1
 8004eea:	fa01 f605 	lsl.w	r6, r1, r5
 8004eee:	1d72      	adds	r2, r6, #5
 8004ef0:	4620      	mov	r0, r4
 8004ef2:	0092      	lsls	r2, r2, #2
 8004ef4:	f000 fc94 	bl	8005820 <_calloc_r>
 8004ef8:	b160      	cbz	r0, 8004f14 <_Balloc+0x64>
 8004efa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004efe:	e00e      	b.n	8004f1e <_Balloc+0x6e>
 8004f00:	2221      	movs	r2, #33	; 0x21
 8004f02:	2104      	movs	r1, #4
 8004f04:	4620      	mov	r0, r4
 8004f06:	f000 fc8b 	bl	8005820 <_calloc_r>
 8004f0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004f0c:	60f0      	str	r0, [r6, #12]
 8004f0e:	68db      	ldr	r3, [r3, #12]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d1e4      	bne.n	8004ede <_Balloc+0x2e>
 8004f14:	2000      	movs	r0, #0
 8004f16:	bd70      	pop	{r4, r5, r6, pc}
 8004f18:	6802      	ldr	r2, [r0, #0]
 8004f1a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004f1e:	2300      	movs	r3, #0
 8004f20:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004f24:	e7f7      	b.n	8004f16 <_Balloc+0x66>
 8004f26:	bf00      	nop
 8004f28:	080069dc 	.word	0x080069dc
 8004f2c:	080069f3 	.word	0x080069f3

08004f30 <_Bfree>:
 8004f30:	b570      	push	{r4, r5, r6, lr}
 8004f32:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004f34:	4605      	mov	r5, r0
 8004f36:	460c      	mov	r4, r1
 8004f38:	b976      	cbnz	r6, 8004f58 <_Bfree+0x28>
 8004f3a:	2010      	movs	r0, #16
 8004f3c:	f000 fd6c 	bl	8005a18 <malloc>
 8004f40:	4602      	mov	r2, r0
 8004f42:	6268      	str	r0, [r5, #36]	; 0x24
 8004f44:	b920      	cbnz	r0, 8004f50 <_Bfree+0x20>
 8004f46:	218a      	movs	r1, #138	; 0x8a
 8004f48:	4b08      	ldr	r3, [pc, #32]	; (8004f6c <_Bfree+0x3c>)
 8004f4a:	4809      	ldr	r0, [pc, #36]	; (8004f70 <_Bfree+0x40>)
 8004f4c:	f000 fd34 	bl	80059b8 <__assert_func>
 8004f50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004f54:	6006      	str	r6, [r0, #0]
 8004f56:	60c6      	str	r6, [r0, #12]
 8004f58:	b13c      	cbz	r4, 8004f6a <_Bfree+0x3a>
 8004f5a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004f5c:	6862      	ldr	r2, [r4, #4]
 8004f5e:	68db      	ldr	r3, [r3, #12]
 8004f60:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004f64:	6021      	str	r1, [r4, #0]
 8004f66:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004f6a:	bd70      	pop	{r4, r5, r6, pc}
 8004f6c:	080069dc 	.word	0x080069dc
 8004f70:	080069f3 	.word	0x080069f3

08004f74 <__multadd>:
 8004f74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f78:	4607      	mov	r7, r0
 8004f7a:	460c      	mov	r4, r1
 8004f7c:	461e      	mov	r6, r3
 8004f7e:	2000      	movs	r0, #0
 8004f80:	690d      	ldr	r5, [r1, #16]
 8004f82:	f101 0c14 	add.w	ip, r1, #20
 8004f86:	f8dc 3000 	ldr.w	r3, [ip]
 8004f8a:	3001      	adds	r0, #1
 8004f8c:	b299      	uxth	r1, r3
 8004f8e:	fb02 6101 	mla	r1, r2, r1, r6
 8004f92:	0c1e      	lsrs	r6, r3, #16
 8004f94:	0c0b      	lsrs	r3, r1, #16
 8004f96:	fb02 3306 	mla	r3, r2, r6, r3
 8004f9a:	b289      	uxth	r1, r1
 8004f9c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8004fa0:	4285      	cmp	r5, r0
 8004fa2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8004fa6:	f84c 1b04 	str.w	r1, [ip], #4
 8004faa:	dcec      	bgt.n	8004f86 <__multadd+0x12>
 8004fac:	b30e      	cbz	r6, 8004ff2 <__multadd+0x7e>
 8004fae:	68a3      	ldr	r3, [r4, #8]
 8004fb0:	42ab      	cmp	r3, r5
 8004fb2:	dc19      	bgt.n	8004fe8 <__multadd+0x74>
 8004fb4:	6861      	ldr	r1, [r4, #4]
 8004fb6:	4638      	mov	r0, r7
 8004fb8:	3101      	adds	r1, #1
 8004fba:	f7ff ff79 	bl	8004eb0 <_Balloc>
 8004fbe:	4680      	mov	r8, r0
 8004fc0:	b928      	cbnz	r0, 8004fce <__multadd+0x5a>
 8004fc2:	4602      	mov	r2, r0
 8004fc4:	21b5      	movs	r1, #181	; 0xb5
 8004fc6:	4b0c      	ldr	r3, [pc, #48]	; (8004ff8 <__multadd+0x84>)
 8004fc8:	480c      	ldr	r0, [pc, #48]	; (8004ffc <__multadd+0x88>)
 8004fca:	f000 fcf5 	bl	80059b8 <__assert_func>
 8004fce:	6922      	ldr	r2, [r4, #16]
 8004fd0:	f104 010c 	add.w	r1, r4, #12
 8004fd4:	3202      	adds	r2, #2
 8004fd6:	0092      	lsls	r2, r2, #2
 8004fd8:	300c      	adds	r0, #12
 8004fda:	f7fe fdaf 	bl	8003b3c <memcpy>
 8004fde:	4621      	mov	r1, r4
 8004fe0:	4638      	mov	r0, r7
 8004fe2:	f7ff ffa5 	bl	8004f30 <_Bfree>
 8004fe6:	4644      	mov	r4, r8
 8004fe8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004fec:	3501      	adds	r5, #1
 8004fee:	615e      	str	r6, [r3, #20]
 8004ff0:	6125      	str	r5, [r4, #16]
 8004ff2:	4620      	mov	r0, r4
 8004ff4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ff8:	08006950 	.word	0x08006950
 8004ffc:	080069f3 	.word	0x080069f3

08005000 <__s2b>:
 8005000:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005004:	4615      	mov	r5, r2
 8005006:	2209      	movs	r2, #9
 8005008:	461f      	mov	r7, r3
 800500a:	3308      	adds	r3, #8
 800500c:	460c      	mov	r4, r1
 800500e:	fb93 f3f2 	sdiv	r3, r3, r2
 8005012:	4606      	mov	r6, r0
 8005014:	2201      	movs	r2, #1
 8005016:	2100      	movs	r1, #0
 8005018:	429a      	cmp	r2, r3
 800501a:	db09      	blt.n	8005030 <__s2b+0x30>
 800501c:	4630      	mov	r0, r6
 800501e:	f7ff ff47 	bl	8004eb0 <_Balloc>
 8005022:	b940      	cbnz	r0, 8005036 <__s2b+0x36>
 8005024:	4602      	mov	r2, r0
 8005026:	21ce      	movs	r1, #206	; 0xce
 8005028:	4b18      	ldr	r3, [pc, #96]	; (800508c <__s2b+0x8c>)
 800502a:	4819      	ldr	r0, [pc, #100]	; (8005090 <__s2b+0x90>)
 800502c:	f000 fcc4 	bl	80059b8 <__assert_func>
 8005030:	0052      	lsls	r2, r2, #1
 8005032:	3101      	adds	r1, #1
 8005034:	e7f0      	b.n	8005018 <__s2b+0x18>
 8005036:	9b08      	ldr	r3, [sp, #32]
 8005038:	2d09      	cmp	r5, #9
 800503a:	6143      	str	r3, [r0, #20]
 800503c:	f04f 0301 	mov.w	r3, #1
 8005040:	6103      	str	r3, [r0, #16]
 8005042:	dd16      	ble.n	8005072 <__s2b+0x72>
 8005044:	f104 0909 	add.w	r9, r4, #9
 8005048:	46c8      	mov	r8, r9
 800504a:	442c      	add	r4, r5
 800504c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8005050:	4601      	mov	r1, r0
 8005052:	220a      	movs	r2, #10
 8005054:	4630      	mov	r0, r6
 8005056:	3b30      	subs	r3, #48	; 0x30
 8005058:	f7ff ff8c 	bl	8004f74 <__multadd>
 800505c:	45a0      	cmp	r8, r4
 800505e:	d1f5      	bne.n	800504c <__s2b+0x4c>
 8005060:	f1a5 0408 	sub.w	r4, r5, #8
 8005064:	444c      	add	r4, r9
 8005066:	1b2d      	subs	r5, r5, r4
 8005068:	1963      	adds	r3, r4, r5
 800506a:	42bb      	cmp	r3, r7
 800506c:	db04      	blt.n	8005078 <__s2b+0x78>
 800506e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005072:	2509      	movs	r5, #9
 8005074:	340a      	adds	r4, #10
 8005076:	e7f6      	b.n	8005066 <__s2b+0x66>
 8005078:	f814 3b01 	ldrb.w	r3, [r4], #1
 800507c:	4601      	mov	r1, r0
 800507e:	220a      	movs	r2, #10
 8005080:	4630      	mov	r0, r6
 8005082:	3b30      	subs	r3, #48	; 0x30
 8005084:	f7ff ff76 	bl	8004f74 <__multadd>
 8005088:	e7ee      	b.n	8005068 <__s2b+0x68>
 800508a:	bf00      	nop
 800508c:	08006950 	.word	0x08006950
 8005090:	080069f3 	.word	0x080069f3

08005094 <__hi0bits>:
 8005094:	0c02      	lsrs	r2, r0, #16
 8005096:	0412      	lsls	r2, r2, #16
 8005098:	4603      	mov	r3, r0
 800509a:	b9ca      	cbnz	r2, 80050d0 <__hi0bits+0x3c>
 800509c:	0403      	lsls	r3, r0, #16
 800509e:	2010      	movs	r0, #16
 80050a0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80050a4:	bf04      	itt	eq
 80050a6:	021b      	lsleq	r3, r3, #8
 80050a8:	3008      	addeq	r0, #8
 80050aa:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80050ae:	bf04      	itt	eq
 80050b0:	011b      	lsleq	r3, r3, #4
 80050b2:	3004      	addeq	r0, #4
 80050b4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80050b8:	bf04      	itt	eq
 80050ba:	009b      	lsleq	r3, r3, #2
 80050bc:	3002      	addeq	r0, #2
 80050be:	2b00      	cmp	r3, #0
 80050c0:	db05      	blt.n	80050ce <__hi0bits+0x3a>
 80050c2:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80050c6:	f100 0001 	add.w	r0, r0, #1
 80050ca:	bf08      	it	eq
 80050cc:	2020      	moveq	r0, #32
 80050ce:	4770      	bx	lr
 80050d0:	2000      	movs	r0, #0
 80050d2:	e7e5      	b.n	80050a0 <__hi0bits+0xc>

080050d4 <__lo0bits>:
 80050d4:	6803      	ldr	r3, [r0, #0]
 80050d6:	4602      	mov	r2, r0
 80050d8:	f013 0007 	ands.w	r0, r3, #7
 80050dc:	d00b      	beq.n	80050f6 <__lo0bits+0x22>
 80050de:	07d9      	lsls	r1, r3, #31
 80050e0:	d421      	bmi.n	8005126 <__lo0bits+0x52>
 80050e2:	0798      	lsls	r0, r3, #30
 80050e4:	bf49      	itett	mi
 80050e6:	085b      	lsrmi	r3, r3, #1
 80050e8:	089b      	lsrpl	r3, r3, #2
 80050ea:	2001      	movmi	r0, #1
 80050ec:	6013      	strmi	r3, [r2, #0]
 80050ee:	bf5c      	itt	pl
 80050f0:	2002      	movpl	r0, #2
 80050f2:	6013      	strpl	r3, [r2, #0]
 80050f4:	4770      	bx	lr
 80050f6:	b299      	uxth	r1, r3
 80050f8:	b909      	cbnz	r1, 80050fe <__lo0bits+0x2a>
 80050fa:	2010      	movs	r0, #16
 80050fc:	0c1b      	lsrs	r3, r3, #16
 80050fe:	b2d9      	uxtb	r1, r3
 8005100:	b909      	cbnz	r1, 8005106 <__lo0bits+0x32>
 8005102:	3008      	adds	r0, #8
 8005104:	0a1b      	lsrs	r3, r3, #8
 8005106:	0719      	lsls	r1, r3, #28
 8005108:	bf04      	itt	eq
 800510a:	091b      	lsreq	r3, r3, #4
 800510c:	3004      	addeq	r0, #4
 800510e:	0799      	lsls	r1, r3, #30
 8005110:	bf04      	itt	eq
 8005112:	089b      	lsreq	r3, r3, #2
 8005114:	3002      	addeq	r0, #2
 8005116:	07d9      	lsls	r1, r3, #31
 8005118:	d403      	bmi.n	8005122 <__lo0bits+0x4e>
 800511a:	085b      	lsrs	r3, r3, #1
 800511c:	f100 0001 	add.w	r0, r0, #1
 8005120:	d003      	beq.n	800512a <__lo0bits+0x56>
 8005122:	6013      	str	r3, [r2, #0]
 8005124:	4770      	bx	lr
 8005126:	2000      	movs	r0, #0
 8005128:	4770      	bx	lr
 800512a:	2020      	movs	r0, #32
 800512c:	4770      	bx	lr
	...

08005130 <__i2b>:
 8005130:	b510      	push	{r4, lr}
 8005132:	460c      	mov	r4, r1
 8005134:	2101      	movs	r1, #1
 8005136:	f7ff febb 	bl	8004eb0 <_Balloc>
 800513a:	4602      	mov	r2, r0
 800513c:	b928      	cbnz	r0, 800514a <__i2b+0x1a>
 800513e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005142:	4b04      	ldr	r3, [pc, #16]	; (8005154 <__i2b+0x24>)
 8005144:	4804      	ldr	r0, [pc, #16]	; (8005158 <__i2b+0x28>)
 8005146:	f000 fc37 	bl	80059b8 <__assert_func>
 800514a:	2301      	movs	r3, #1
 800514c:	6144      	str	r4, [r0, #20]
 800514e:	6103      	str	r3, [r0, #16]
 8005150:	bd10      	pop	{r4, pc}
 8005152:	bf00      	nop
 8005154:	08006950 	.word	0x08006950
 8005158:	080069f3 	.word	0x080069f3

0800515c <__multiply>:
 800515c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005160:	4691      	mov	r9, r2
 8005162:	690a      	ldr	r2, [r1, #16]
 8005164:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005168:	460c      	mov	r4, r1
 800516a:	429a      	cmp	r2, r3
 800516c:	bfbe      	ittt	lt
 800516e:	460b      	movlt	r3, r1
 8005170:	464c      	movlt	r4, r9
 8005172:	4699      	movlt	r9, r3
 8005174:	6927      	ldr	r7, [r4, #16]
 8005176:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800517a:	68a3      	ldr	r3, [r4, #8]
 800517c:	6861      	ldr	r1, [r4, #4]
 800517e:	eb07 060a 	add.w	r6, r7, sl
 8005182:	42b3      	cmp	r3, r6
 8005184:	b085      	sub	sp, #20
 8005186:	bfb8      	it	lt
 8005188:	3101      	addlt	r1, #1
 800518a:	f7ff fe91 	bl	8004eb0 <_Balloc>
 800518e:	b930      	cbnz	r0, 800519e <__multiply+0x42>
 8005190:	4602      	mov	r2, r0
 8005192:	f240 115d 	movw	r1, #349	; 0x15d
 8005196:	4b43      	ldr	r3, [pc, #268]	; (80052a4 <__multiply+0x148>)
 8005198:	4843      	ldr	r0, [pc, #268]	; (80052a8 <__multiply+0x14c>)
 800519a:	f000 fc0d 	bl	80059b8 <__assert_func>
 800519e:	f100 0514 	add.w	r5, r0, #20
 80051a2:	462b      	mov	r3, r5
 80051a4:	2200      	movs	r2, #0
 80051a6:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80051aa:	4543      	cmp	r3, r8
 80051ac:	d321      	bcc.n	80051f2 <__multiply+0x96>
 80051ae:	f104 0314 	add.w	r3, r4, #20
 80051b2:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80051b6:	f109 0314 	add.w	r3, r9, #20
 80051ba:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80051be:	9202      	str	r2, [sp, #8]
 80051c0:	1b3a      	subs	r2, r7, r4
 80051c2:	3a15      	subs	r2, #21
 80051c4:	f022 0203 	bic.w	r2, r2, #3
 80051c8:	3204      	adds	r2, #4
 80051ca:	f104 0115 	add.w	r1, r4, #21
 80051ce:	428f      	cmp	r7, r1
 80051d0:	bf38      	it	cc
 80051d2:	2204      	movcc	r2, #4
 80051d4:	9201      	str	r2, [sp, #4]
 80051d6:	9a02      	ldr	r2, [sp, #8]
 80051d8:	9303      	str	r3, [sp, #12]
 80051da:	429a      	cmp	r2, r3
 80051dc:	d80c      	bhi.n	80051f8 <__multiply+0x9c>
 80051de:	2e00      	cmp	r6, #0
 80051e0:	dd03      	ble.n	80051ea <__multiply+0x8e>
 80051e2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d059      	beq.n	800529e <__multiply+0x142>
 80051ea:	6106      	str	r6, [r0, #16]
 80051ec:	b005      	add	sp, #20
 80051ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051f2:	f843 2b04 	str.w	r2, [r3], #4
 80051f6:	e7d8      	b.n	80051aa <__multiply+0x4e>
 80051f8:	f8b3 a000 	ldrh.w	sl, [r3]
 80051fc:	f1ba 0f00 	cmp.w	sl, #0
 8005200:	d023      	beq.n	800524a <__multiply+0xee>
 8005202:	46a9      	mov	r9, r5
 8005204:	f04f 0c00 	mov.w	ip, #0
 8005208:	f104 0e14 	add.w	lr, r4, #20
 800520c:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005210:	f8d9 1000 	ldr.w	r1, [r9]
 8005214:	fa1f fb82 	uxth.w	fp, r2
 8005218:	b289      	uxth	r1, r1
 800521a:	fb0a 110b 	mla	r1, sl, fp, r1
 800521e:	4461      	add	r1, ip
 8005220:	f8d9 c000 	ldr.w	ip, [r9]
 8005224:	0c12      	lsrs	r2, r2, #16
 8005226:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800522a:	fb0a c202 	mla	r2, sl, r2, ip
 800522e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005232:	b289      	uxth	r1, r1
 8005234:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005238:	4577      	cmp	r7, lr
 800523a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800523e:	f849 1b04 	str.w	r1, [r9], #4
 8005242:	d8e3      	bhi.n	800520c <__multiply+0xb0>
 8005244:	9a01      	ldr	r2, [sp, #4]
 8005246:	f845 c002 	str.w	ip, [r5, r2]
 800524a:	9a03      	ldr	r2, [sp, #12]
 800524c:	3304      	adds	r3, #4
 800524e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005252:	f1b9 0f00 	cmp.w	r9, #0
 8005256:	d020      	beq.n	800529a <__multiply+0x13e>
 8005258:	46ae      	mov	lr, r5
 800525a:	f04f 0a00 	mov.w	sl, #0
 800525e:	6829      	ldr	r1, [r5, #0]
 8005260:	f104 0c14 	add.w	ip, r4, #20
 8005264:	f8bc b000 	ldrh.w	fp, [ip]
 8005268:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800526c:	b289      	uxth	r1, r1
 800526e:	fb09 220b 	mla	r2, r9, fp, r2
 8005272:	4492      	add	sl, r2
 8005274:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8005278:	f84e 1b04 	str.w	r1, [lr], #4
 800527c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005280:	f8be 1000 	ldrh.w	r1, [lr]
 8005284:	0c12      	lsrs	r2, r2, #16
 8005286:	fb09 1102 	mla	r1, r9, r2, r1
 800528a:	4567      	cmp	r7, ip
 800528c:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8005290:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005294:	d8e6      	bhi.n	8005264 <__multiply+0x108>
 8005296:	9a01      	ldr	r2, [sp, #4]
 8005298:	50a9      	str	r1, [r5, r2]
 800529a:	3504      	adds	r5, #4
 800529c:	e79b      	b.n	80051d6 <__multiply+0x7a>
 800529e:	3e01      	subs	r6, #1
 80052a0:	e79d      	b.n	80051de <__multiply+0x82>
 80052a2:	bf00      	nop
 80052a4:	08006950 	.word	0x08006950
 80052a8:	080069f3 	.word	0x080069f3

080052ac <__pow5mult>:
 80052ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80052b0:	4615      	mov	r5, r2
 80052b2:	f012 0203 	ands.w	r2, r2, #3
 80052b6:	4606      	mov	r6, r0
 80052b8:	460f      	mov	r7, r1
 80052ba:	d007      	beq.n	80052cc <__pow5mult+0x20>
 80052bc:	4c25      	ldr	r4, [pc, #148]	; (8005354 <__pow5mult+0xa8>)
 80052be:	3a01      	subs	r2, #1
 80052c0:	2300      	movs	r3, #0
 80052c2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80052c6:	f7ff fe55 	bl	8004f74 <__multadd>
 80052ca:	4607      	mov	r7, r0
 80052cc:	10ad      	asrs	r5, r5, #2
 80052ce:	d03d      	beq.n	800534c <__pow5mult+0xa0>
 80052d0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80052d2:	b97c      	cbnz	r4, 80052f4 <__pow5mult+0x48>
 80052d4:	2010      	movs	r0, #16
 80052d6:	f000 fb9f 	bl	8005a18 <malloc>
 80052da:	4602      	mov	r2, r0
 80052dc:	6270      	str	r0, [r6, #36]	; 0x24
 80052de:	b928      	cbnz	r0, 80052ec <__pow5mult+0x40>
 80052e0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80052e4:	4b1c      	ldr	r3, [pc, #112]	; (8005358 <__pow5mult+0xac>)
 80052e6:	481d      	ldr	r0, [pc, #116]	; (800535c <__pow5mult+0xb0>)
 80052e8:	f000 fb66 	bl	80059b8 <__assert_func>
 80052ec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80052f0:	6004      	str	r4, [r0, #0]
 80052f2:	60c4      	str	r4, [r0, #12]
 80052f4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80052f8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80052fc:	b94c      	cbnz	r4, 8005312 <__pow5mult+0x66>
 80052fe:	f240 2171 	movw	r1, #625	; 0x271
 8005302:	4630      	mov	r0, r6
 8005304:	f7ff ff14 	bl	8005130 <__i2b>
 8005308:	2300      	movs	r3, #0
 800530a:	4604      	mov	r4, r0
 800530c:	f8c8 0008 	str.w	r0, [r8, #8]
 8005310:	6003      	str	r3, [r0, #0]
 8005312:	f04f 0900 	mov.w	r9, #0
 8005316:	07eb      	lsls	r3, r5, #31
 8005318:	d50a      	bpl.n	8005330 <__pow5mult+0x84>
 800531a:	4639      	mov	r1, r7
 800531c:	4622      	mov	r2, r4
 800531e:	4630      	mov	r0, r6
 8005320:	f7ff ff1c 	bl	800515c <__multiply>
 8005324:	4680      	mov	r8, r0
 8005326:	4639      	mov	r1, r7
 8005328:	4630      	mov	r0, r6
 800532a:	f7ff fe01 	bl	8004f30 <_Bfree>
 800532e:	4647      	mov	r7, r8
 8005330:	106d      	asrs	r5, r5, #1
 8005332:	d00b      	beq.n	800534c <__pow5mult+0xa0>
 8005334:	6820      	ldr	r0, [r4, #0]
 8005336:	b938      	cbnz	r0, 8005348 <__pow5mult+0x9c>
 8005338:	4622      	mov	r2, r4
 800533a:	4621      	mov	r1, r4
 800533c:	4630      	mov	r0, r6
 800533e:	f7ff ff0d 	bl	800515c <__multiply>
 8005342:	6020      	str	r0, [r4, #0]
 8005344:	f8c0 9000 	str.w	r9, [r0]
 8005348:	4604      	mov	r4, r0
 800534a:	e7e4      	b.n	8005316 <__pow5mult+0x6a>
 800534c:	4638      	mov	r0, r7
 800534e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005352:	bf00      	nop
 8005354:	08006b40 	.word	0x08006b40
 8005358:	080069dc 	.word	0x080069dc
 800535c:	080069f3 	.word	0x080069f3

08005360 <__lshift>:
 8005360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005364:	460c      	mov	r4, r1
 8005366:	4607      	mov	r7, r0
 8005368:	4691      	mov	r9, r2
 800536a:	6923      	ldr	r3, [r4, #16]
 800536c:	6849      	ldr	r1, [r1, #4]
 800536e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005372:	68a3      	ldr	r3, [r4, #8]
 8005374:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005378:	f108 0601 	add.w	r6, r8, #1
 800537c:	42b3      	cmp	r3, r6
 800537e:	db0b      	blt.n	8005398 <__lshift+0x38>
 8005380:	4638      	mov	r0, r7
 8005382:	f7ff fd95 	bl	8004eb0 <_Balloc>
 8005386:	4605      	mov	r5, r0
 8005388:	b948      	cbnz	r0, 800539e <__lshift+0x3e>
 800538a:	4602      	mov	r2, r0
 800538c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005390:	4b29      	ldr	r3, [pc, #164]	; (8005438 <__lshift+0xd8>)
 8005392:	482a      	ldr	r0, [pc, #168]	; (800543c <__lshift+0xdc>)
 8005394:	f000 fb10 	bl	80059b8 <__assert_func>
 8005398:	3101      	adds	r1, #1
 800539a:	005b      	lsls	r3, r3, #1
 800539c:	e7ee      	b.n	800537c <__lshift+0x1c>
 800539e:	2300      	movs	r3, #0
 80053a0:	f100 0114 	add.w	r1, r0, #20
 80053a4:	f100 0210 	add.w	r2, r0, #16
 80053a8:	4618      	mov	r0, r3
 80053aa:	4553      	cmp	r3, sl
 80053ac:	db37      	blt.n	800541e <__lshift+0xbe>
 80053ae:	6920      	ldr	r0, [r4, #16]
 80053b0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80053b4:	f104 0314 	add.w	r3, r4, #20
 80053b8:	f019 091f 	ands.w	r9, r9, #31
 80053bc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80053c0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80053c4:	d02f      	beq.n	8005426 <__lshift+0xc6>
 80053c6:	468a      	mov	sl, r1
 80053c8:	f04f 0c00 	mov.w	ip, #0
 80053cc:	f1c9 0e20 	rsb	lr, r9, #32
 80053d0:	681a      	ldr	r2, [r3, #0]
 80053d2:	fa02 f209 	lsl.w	r2, r2, r9
 80053d6:	ea42 020c 	orr.w	r2, r2, ip
 80053da:	f84a 2b04 	str.w	r2, [sl], #4
 80053de:	f853 2b04 	ldr.w	r2, [r3], #4
 80053e2:	4298      	cmp	r0, r3
 80053e4:	fa22 fc0e 	lsr.w	ip, r2, lr
 80053e8:	d8f2      	bhi.n	80053d0 <__lshift+0x70>
 80053ea:	1b03      	subs	r3, r0, r4
 80053ec:	3b15      	subs	r3, #21
 80053ee:	f023 0303 	bic.w	r3, r3, #3
 80053f2:	3304      	adds	r3, #4
 80053f4:	f104 0215 	add.w	r2, r4, #21
 80053f8:	4290      	cmp	r0, r2
 80053fa:	bf38      	it	cc
 80053fc:	2304      	movcc	r3, #4
 80053fe:	f841 c003 	str.w	ip, [r1, r3]
 8005402:	f1bc 0f00 	cmp.w	ip, #0
 8005406:	d001      	beq.n	800540c <__lshift+0xac>
 8005408:	f108 0602 	add.w	r6, r8, #2
 800540c:	3e01      	subs	r6, #1
 800540e:	4638      	mov	r0, r7
 8005410:	4621      	mov	r1, r4
 8005412:	612e      	str	r6, [r5, #16]
 8005414:	f7ff fd8c 	bl	8004f30 <_Bfree>
 8005418:	4628      	mov	r0, r5
 800541a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800541e:	f842 0f04 	str.w	r0, [r2, #4]!
 8005422:	3301      	adds	r3, #1
 8005424:	e7c1      	b.n	80053aa <__lshift+0x4a>
 8005426:	3904      	subs	r1, #4
 8005428:	f853 2b04 	ldr.w	r2, [r3], #4
 800542c:	4298      	cmp	r0, r3
 800542e:	f841 2f04 	str.w	r2, [r1, #4]!
 8005432:	d8f9      	bhi.n	8005428 <__lshift+0xc8>
 8005434:	e7ea      	b.n	800540c <__lshift+0xac>
 8005436:	bf00      	nop
 8005438:	08006950 	.word	0x08006950
 800543c:	080069f3 	.word	0x080069f3

08005440 <__mcmp>:
 8005440:	4603      	mov	r3, r0
 8005442:	690a      	ldr	r2, [r1, #16]
 8005444:	6900      	ldr	r0, [r0, #16]
 8005446:	b530      	push	{r4, r5, lr}
 8005448:	1a80      	subs	r0, r0, r2
 800544a:	d10d      	bne.n	8005468 <__mcmp+0x28>
 800544c:	3314      	adds	r3, #20
 800544e:	3114      	adds	r1, #20
 8005450:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005454:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005458:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800545c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005460:	4295      	cmp	r5, r2
 8005462:	d002      	beq.n	800546a <__mcmp+0x2a>
 8005464:	d304      	bcc.n	8005470 <__mcmp+0x30>
 8005466:	2001      	movs	r0, #1
 8005468:	bd30      	pop	{r4, r5, pc}
 800546a:	42a3      	cmp	r3, r4
 800546c:	d3f4      	bcc.n	8005458 <__mcmp+0x18>
 800546e:	e7fb      	b.n	8005468 <__mcmp+0x28>
 8005470:	f04f 30ff 	mov.w	r0, #4294967295
 8005474:	e7f8      	b.n	8005468 <__mcmp+0x28>
	...

08005478 <__mdiff>:
 8005478:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800547c:	460d      	mov	r5, r1
 800547e:	4607      	mov	r7, r0
 8005480:	4611      	mov	r1, r2
 8005482:	4628      	mov	r0, r5
 8005484:	4614      	mov	r4, r2
 8005486:	f7ff ffdb 	bl	8005440 <__mcmp>
 800548a:	1e06      	subs	r6, r0, #0
 800548c:	d111      	bne.n	80054b2 <__mdiff+0x3a>
 800548e:	4631      	mov	r1, r6
 8005490:	4638      	mov	r0, r7
 8005492:	f7ff fd0d 	bl	8004eb0 <_Balloc>
 8005496:	4602      	mov	r2, r0
 8005498:	b928      	cbnz	r0, 80054a6 <__mdiff+0x2e>
 800549a:	f240 2132 	movw	r1, #562	; 0x232
 800549e:	4b3a      	ldr	r3, [pc, #232]	; (8005588 <__mdiff+0x110>)
 80054a0:	483a      	ldr	r0, [pc, #232]	; (800558c <__mdiff+0x114>)
 80054a2:	f000 fa89 	bl	80059b8 <__assert_func>
 80054a6:	2301      	movs	r3, #1
 80054a8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80054ac:	4610      	mov	r0, r2
 80054ae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054b2:	bfa4      	itt	ge
 80054b4:	4623      	movge	r3, r4
 80054b6:	462c      	movge	r4, r5
 80054b8:	4638      	mov	r0, r7
 80054ba:	6861      	ldr	r1, [r4, #4]
 80054bc:	bfa6      	itte	ge
 80054be:	461d      	movge	r5, r3
 80054c0:	2600      	movge	r6, #0
 80054c2:	2601      	movlt	r6, #1
 80054c4:	f7ff fcf4 	bl	8004eb0 <_Balloc>
 80054c8:	4602      	mov	r2, r0
 80054ca:	b918      	cbnz	r0, 80054d4 <__mdiff+0x5c>
 80054cc:	f44f 7110 	mov.w	r1, #576	; 0x240
 80054d0:	4b2d      	ldr	r3, [pc, #180]	; (8005588 <__mdiff+0x110>)
 80054d2:	e7e5      	b.n	80054a0 <__mdiff+0x28>
 80054d4:	f102 0814 	add.w	r8, r2, #20
 80054d8:	46c2      	mov	sl, r8
 80054da:	f04f 0c00 	mov.w	ip, #0
 80054de:	6927      	ldr	r7, [r4, #16]
 80054e0:	60c6      	str	r6, [r0, #12]
 80054e2:	692e      	ldr	r6, [r5, #16]
 80054e4:	f104 0014 	add.w	r0, r4, #20
 80054e8:	f105 0914 	add.w	r9, r5, #20
 80054ec:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80054f0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80054f4:	3410      	adds	r4, #16
 80054f6:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80054fa:	f859 3b04 	ldr.w	r3, [r9], #4
 80054fe:	fa1f f18b 	uxth.w	r1, fp
 8005502:	448c      	add	ip, r1
 8005504:	b299      	uxth	r1, r3
 8005506:	0c1b      	lsrs	r3, r3, #16
 8005508:	ebac 0101 	sub.w	r1, ip, r1
 800550c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005510:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8005514:	b289      	uxth	r1, r1
 8005516:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800551a:	454e      	cmp	r6, r9
 800551c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8005520:	f84a 3b04 	str.w	r3, [sl], #4
 8005524:	d8e7      	bhi.n	80054f6 <__mdiff+0x7e>
 8005526:	1b73      	subs	r3, r6, r5
 8005528:	3b15      	subs	r3, #21
 800552a:	f023 0303 	bic.w	r3, r3, #3
 800552e:	3515      	adds	r5, #21
 8005530:	3304      	adds	r3, #4
 8005532:	42ae      	cmp	r6, r5
 8005534:	bf38      	it	cc
 8005536:	2304      	movcc	r3, #4
 8005538:	4418      	add	r0, r3
 800553a:	4443      	add	r3, r8
 800553c:	461e      	mov	r6, r3
 800553e:	4605      	mov	r5, r0
 8005540:	4575      	cmp	r5, lr
 8005542:	d30e      	bcc.n	8005562 <__mdiff+0xea>
 8005544:	f10e 0103 	add.w	r1, lr, #3
 8005548:	1a09      	subs	r1, r1, r0
 800554a:	f021 0103 	bic.w	r1, r1, #3
 800554e:	3803      	subs	r0, #3
 8005550:	4586      	cmp	lr, r0
 8005552:	bf38      	it	cc
 8005554:	2100      	movcc	r1, #0
 8005556:	4419      	add	r1, r3
 8005558:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800555c:	b18b      	cbz	r3, 8005582 <__mdiff+0x10a>
 800555e:	6117      	str	r7, [r2, #16]
 8005560:	e7a4      	b.n	80054ac <__mdiff+0x34>
 8005562:	f855 8b04 	ldr.w	r8, [r5], #4
 8005566:	fa1f f188 	uxth.w	r1, r8
 800556a:	4461      	add	r1, ip
 800556c:	140c      	asrs	r4, r1, #16
 800556e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8005572:	b289      	uxth	r1, r1
 8005574:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8005578:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800557c:	f846 1b04 	str.w	r1, [r6], #4
 8005580:	e7de      	b.n	8005540 <__mdiff+0xc8>
 8005582:	3f01      	subs	r7, #1
 8005584:	e7e8      	b.n	8005558 <__mdiff+0xe0>
 8005586:	bf00      	nop
 8005588:	08006950 	.word	0x08006950
 800558c:	080069f3 	.word	0x080069f3

08005590 <__ulp>:
 8005590:	4b11      	ldr	r3, [pc, #68]	; (80055d8 <__ulp+0x48>)
 8005592:	400b      	ands	r3, r1
 8005594:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8005598:	2b00      	cmp	r3, #0
 800559a:	dd02      	ble.n	80055a2 <__ulp+0x12>
 800559c:	2000      	movs	r0, #0
 800559e:	4619      	mov	r1, r3
 80055a0:	4770      	bx	lr
 80055a2:	425b      	negs	r3, r3
 80055a4:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80055a8:	f04f 0000 	mov.w	r0, #0
 80055ac:	f04f 0100 	mov.w	r1, #0
 80055b0:	ea4f 5223 	mov.w	r2, r3, asr #20
 80055b4:	da04      	bge.n	80055c0 <__ulp+0x30>
 80055b6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80055ba:	fa43 f102 	asr.w	r1, r3, r2
 80055be:	4770      	bx	lr
 80055c0:	f1a2 0314 	sub.w	r3, r2, #20
 80055c4:	2b1e      	cmp	r3, #30
 80055c6:	bfd6      	itet	le
 80055c8:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80055cc:	2301      	movgt	r3, #1
 80055ce:	fa22 f303 	lsrle.w	r3, r2, r3
 80055d2:	4618      	mov	r0, r3
 80055d4:	4770      	bx	lr
 80055d6:	bf00      	nop
 80055d8:	7ff00000 	.word	0x7ff00000

080055dc <__b2d>:
 80055dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80055e0:	6907      	ldr	r7, [r0, #16]
 80055e2:	f100 0914 	add.w	r9, r0, #20
 80055e6:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 80055ea:	f857 6c04 	ldr.w	r6, [r7, #-4]
 80055ee:	f1a7 0804 	sub.w	r8, r7, #4
 80055f2:	4630      	mov	r0, r6
 80055f4:	f7ff fd4e 	bl	8005094 <__hi0bits>
 80055f8:	f1c0 0320 	rsb	r3, r0, #32
 80055fc:	280a      	cmp	r0, #10
 80055fe:	600b      	str	r3, [r1, #0]
 8005600:	491f      	ldr	r1, [pc, #124]	; (8005680 <__b2d+0xa4>)
 8005602:	dc17      	bgt.n	8005634 <__b2d+0x58>
 8005604:	45c1      	cmp	r9, r8
 8005606:	bf28      	it	cs
 8005608:	2200      	movcs	r2, #0
 800560a:	f1c0 0c0b 	rsb	ip, r0, #11
 800560e:	fa26 f30c 	lsr.w	r3, r6, ip
 8005612:	bf38      	it	cc
 8005614:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8005618:	ea43 0501 	orr.w	r5, r3, r1
 800561c:	f100 0315 	add.w	r3, r0, #21
 8005620:	fa06 f303 	lsl.w	r3, r6, r3
 8005624:	fa22 f20c 	lsr.w	r2, r2, ip
 8005628:	ea43 0402 	orr.w	r4, r3, r2
 800562c:	4620      	mov	r0, r4
 800562e:	4629      	mov	r1, r5
 8005630:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005634:	45c1      	cmp	r9, r8
 8005636:	bf2e      	itee	cs
 8005638:	2200      	movcs	r2, #0
 800563a:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800563e:	f1a7 0808 	subcc.w	r8, r7, #8
 8005642:	f1b0 030b 	subs.w	r3, r0, #11
 8005646:	d016      	beq.n	8005676 <__b2d+0x9a>
 8005648:	f1c3 0720 	rsb	r7, r3, #32
 800564c:	fa22 f107 	lsr.w	r1, r2, r7
 8005650:	45c8      	cmp	r8, r9
 8005652:	fa06 f603 	lsl.w	r6, r6, r3
 8005656:	ea46 0601 	orr.w	r6, r6, r1
 800565a:	bf94      	ite	ls
 800565c:	2100      	movls	r1, #0
 800565e:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8005662:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 8005666:	fa02 f003 	lsl.w	r0, r2, r3
 800566a:	40f9      	lsrs	r1, r7
 800566c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8005670:	ea40 0401 	orr.w	r4, r0, r1
 8005674:	e7da      	b.n	800562c <__b2d+0x50>
 8005676:	4614      	mov	r4, r2
 8005678:	ea46 0501 	orr.w	r5, r6, r1
 800567c:	e7d6      	b.n	800562c <__b2d+0x50>
 800567e:	bf00      	nop
 8005680:	3ff00000 	.word	0x3ff00000

08005684 <__d2b>:
 8005684:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005688:	2101      	movs	r1, #1
 800568a:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800568e:	4690      	mov	r8, r2
 8005690:	461d      	mov	r5, r3
 8005692:	f7ff fc0d 	bl	8004eb0 <_Balloc>
 8005696:	4604      	mov	r4, r0
 8005698:	b930      	cbnz	r0, 80056a8 <__d2b+0x24>
 800569a:	4602      	mov	r2, r0
 800569c:	f240 310a 	movw	r1, #778	; 0x30a
 80056a0:	4b24      	ldr	r3, [pc, #144]	; (8005734 <__d2b+0xb0>)
 80056a2:	4825      	ldr	r0, [pc, #148]	; (8005738 <__d2b+0xb4>)
 80056a4:	f000 f988 	bl	80059b8 <__assert_func>
 80056a8:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80056ac:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80056b0:	bb2d      	cbnz	r5, 80056fe <__d2b+0x7a>
 80056b2:	9301      	str	r3, [sp, #4]
 80056b4:	f1b8 0300 	subs.w	r3, r8, #0
 80056b8:	d026      	beq.n	8005708 <__d2b+0x84>
 80056ba:	4668      	mov	r0, sp
 80056bc:	9300      	str	r3, [sp, #0]
 80056be:	f7ff fd09 	bl	80050d4 <__lo0bits>
 80056c2:	9900      	ldr	r1, [sp, #0]
 80056c4:	b1f0      	cbz	r0, 8005704 <__d2b+0x80>
 80056c6:	9a01      	ldr	r2, [sp, #4]
 80056c8:	f1c0 0320 	rsb	r3, r0, #32
 80056cc:	fa02 f303 	lsl.w	r3, r2, r3
 80056d0:	430b      	orrs	r3, r1
 80056d2:	40c2      	lsrs	r2, r0
 80056d4:	6163      	str	r3, [r4, #20]
 80056d6:	9201      	str	r2, [sp, #4]
 80056d8:	9b01      	ldr	r3, [sp, #4]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	bf14      	ite	ne
 80056de:	2102      	movne	r1, #2
 80056e0:	2101      	moveq	r1, #1
 80056e2:	61a3      	str	r3, [r4, #24]
 80056e4:	6121      	str	r1, [r4, #16]
 80056e6:	b1c5      	cbz	r5, 800571a <__d2b+0x96>
 80056e8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80056ec:	4405      	add	r5, r0
 80056ee:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80056f2:	603d      	str	r5, [r7, #0]
 80056f4:	6030      	str	r0, [r6, #0]
 80056f6:	4620      	mov	r0, r4
 80056f8:	b002      	add	sp, #8
 80056fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80056fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005702:	e7d6      	b.n	80056b2 <__d2b+0x2e>
 8005704:	6161      	str	r1, [r4, #20]
 8005706:	e7e7      	b.n	80056d8 <__d2b+0x54>
 8005708:	a801      	add	r0, sp, #4
 800570a:	f7ff fce3 	bl	80050d4 <__lo0bits>
 800570e:	2101      	movs	r1, #1
 8005710:	9b01      	ldr	r3, [sp, #4]
 8005712:	6121      	str	r1, [r4, #16]
 8005714:	6163      	str	r3, [r4, #20]
 8005716:	3020      	adds	r0, #32
 8005718:	e7e5      	b.n	80056e6 <__d2b+0x62>
 800571a:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800571e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005722:	6038      	str	r0, [r7, #0]
 8005724:	6918      	ldr	r0, [r3, #16]
 8005726:	f7ff fcb5 	bl	8005094 <__hi0bits>
 800572a:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800572e:	6031      	str	r1, [r6, #0]
 8005730:	e7e1      	b.n	80056f6 <__d2b+0x72>
 8005732:	bf00      	nop
 8005734:	08006950 	.word	0x08006950
 8005738:	080069f3 	.word	0x080069f3

0800573c <__ratio>:
 800573c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005740:	4688      	mov	r8, r1
 8005742:	4669      	mov	r1, sp
 8005744:	4681      	mov	r9, r0
 8005746:	f7ff ff49 	bl	80055dc <__b2d>
 800574a:	460f      	mov	r7, r1
 800574c:	4604      	mov	r4, r0
 800574e:	460d      	mov	r5, r1
 8005750:	4640      	mov	r0, r8
 8005752:	a901      	add	r1, sp, #4
 8005754:	f7ff ff42 	bl	80055dc <__b2d>
 8005758:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800575c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8005760:	468b      	mov	fp, r1
 8005762:	eba3 0c02 	sub.w	ip, r3, r2
 8005766:	e9dd 3200 	ldrd	r3, r2, [sp]
 800576a:	1a9b      	subs	r3, r3, r2
 800576c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8005770:	2b00      	cmp	r3, #0
 8005772:	bfd5      	itete	le
 8005774:	460a      	movle	r2, r1
 8005776:	462a      	movgt	r2, r5
 8005778:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800577c:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8005780:	bfd8      	it	le
 8005782:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8005786:	465b      	mov	r3, fp
 8005788:	4602      	mov	r2, r0
 800578a:	4639      	mov	r1, r7
 800578c:	4620      	mov	r0, r4
 800578e:	f7fa ffcd 	bl	800072c <__aeabi_ddiv>
 8005792:	b003      	add	sp, #12
 8005794:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005798 <__copybits>:
 8005798:	3901      	subs	r1, #1
 800579a:	b570      	push	{r4, r5, r6, lr}
 800579c:	1149      	asrs	r1, r1, #5
 800579e:	6914      	ldr	r4, [r2, #16]
 80057a0:	3101      	adds	r1, #1
 80057a2:	f102 0314 	add.w	r3, r2, #20
 80057a6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80057aa:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80057ae:	1f05      	subs	r5, r0, #4
 80057b0:	42a3      	cmp	r3, r4
 80057b2:	d30c      	bcc.n	80057ce <__copybits+0x36>
 80057b4:	1aa3      	subs	r3, r4, r2
 80057b6:	3b11      	subs	r3, #17
 80057b8:	f023 0303 	bic.w	r3, r3, #3
 80057bc:	3211      	adds	r2, #17
 80057be:	42a2      	cmp	r2, r4
 80057c0:	bf88      	it	hi
 80057c2:	2300      	movhi	r3, #0
 80057c4:	4418      	add	r0, r3
 80057c6:	2300      	movs	r3, #0
 80057c8:	4288      	cmp	r0, r1
 80057ca:	d305      	bcc.n	80057d8 <__copybits+0x40>
 80057cc:	bd70      	pop	{r4, r5, r6, pc}
 80057ce:	f853 6b04 	ldr.w	r6, [r3], #4
 80057d2:	f845 6f04 	str.w	r6, [r5, #4]!
 80057d6:	e7eb      	b.n	80057b0 <__copybits+0x18>
 80057d8:	f840 3b04 	str.w	r3, [r0], #4
 80057dc:	e7f4      	b.n	80057c8 <__copybits+0x30>

080057de <__any_on>:
 80057de:	f100 0214 	add.w	r2, r0, #20
 80057e2:	6900      	ldr	r0, [r0, #16]
 80057e4:	114b      	asrs	r3, r1, #5
 80057e6:	4298      	cmp	r0, r3
 80057e8:	b510      	push	{r4, lr}
 80057ea:	db11      	blt.n	8005810 <__any_on+0x32>
 80057ec:	dd0a      	ble.n	8005804 <__any_on+0x26>
 80057ee:	f011 011f 	ands.w	r1, r1, #31
 80057f2:	d007      	beq.n	8005804 <__any_on+0x26>
 80057f4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80057f8:	fa24 f001 	lsr.w	r0, r4, r1
 80057fc:	fa00 f101 	lsl.w	r1, r0, r1
 8005800:	428c      	cmp	r4, r1
 8005802:	d10b      	bne.n	800581c <__any_on+0x3e>
 8005804:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005808:	4293      	cmp	r3, r2
 800580a:	d803      	bhi.n	8005814 <__any_on+0x36>
 800580c:	2000      	movs	r0, #0
 800580e:	bd10      	pop	{r4, pc}
 8005810:	4603      	mov	r3, r0
 8005812:	e7f7      	b.n	8005804 <__any_on+0x26>
 8005814:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005818:	2900      	cmp	r1, #0
 800581a:	d0f5      	beq.n	8005808 <__any_on+0x2a>
 800581c:	2001      	movs	r0, #1
 800581e:	e7f6      	b.n	800580e <__any_on+0x30>

08005820 <_calloc_r>:
 8005820:	b570      	push	{r4, r5, r6, lr}
 8005822:	fba1 5402 	umull	r5, r4, r1, r2
 8005826:	b934      	cbnz	r4, 8005836 <_calloc_r+0x16>
 8005828:	4629      	mov	r1, r5
 800582a:	f000 f82d 	bl	8005888 <_malloc_r>
 800582e:	4606      	mov	r6, r0
 8005830:	b928      	cbnz	r0, 800583e <_calloc_r+0x1e>
 8005832:	4630      	mov	r0, r6
 8005834:	bd70      	pop	{r4, r5, r6, pc}
 8005836:	220c      	movs	r2, #12
 8005838:	2600      	movs	r6, #0
 800583a:	6002      	str	r2, [r0, #0]
 800583c:	e7f9      	b.n	8005832 <_calloc_r+0x12>
 800583e:	462a      	mov	r2, r5
 8005840:	4621      	mov	r1, r4
 8005842:	f7fe f989 	bl	8003b58 <memset>
 8005846:	e7f4      	b.n	8005832 <_calloc_r+0x12>

08005848 <sbrk_aligned>:
 8005848:	b570      	push	{r4, r5, r6, lr}
 800584a:	4e0e      	ldr	r6, [pc, #56]	; (8005884 <sbrk_aligned+0x3c>)
 800584c:	460c      	mov	r4, r1
 800584e:	6831      	ldr	r1, [r6, #0]
 8005850:	4605      	mov	r5, r0
 8005852:	b911      	cbnz	r1, 800585a <sbrk_aligned+0x12>
 8005854:	f000 f892 	bl	800597c <_sbrk_r>
 8005858:	6030      	str	r0, [r6, #0]
 800585a:	4621      	mov	r1, r4
 800585c:	4628      	mov	r0, r5
 800585e:	f000 f88d 	bl	800597c <_sbrk_r>
 8005862:	1c43      	adds	r3, r0, #1
 8005864:	d00a      	beq.n	800587c <sbrk_aligned+0x34>
 8005866:	1cc4      	adds	r4, r0, #3
 8005868:	f024 0403 	bic.w	r4, r4, #3
 800586c:	42a0      	cmp	r0, r4
 800586e:	d007      	beq.n	8005880 <sbrk_aligned+0x38>
 8005870:	1a21      	subs	r1, r4, r0
 8005872:	4628      	mov	r0, r5
 8005874:	f000 f882 	bl	800597c <_sbrk_r>
 8005878:	3001      	adds	r0, #1
 800587a:	d101      	bne.n	8005880 <sbrk_aligned+0x38>
 800587c:	f04f 34ff 	mov.w	r4, #4294967295
 8005880:	4620      	mov	r0, r4
 8005882:	bd70      	pop	{r4, r5, r6, pc}
 8005884:	20000414 	.word	0x20000414

08005888 <_malloc_r>:
 8005888:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800588c:	1ccd      	adds	r5, r1, #3
 800588e:	f025 0503 	bic.w	r5, r5, #3
 8005892:	3508      	adds	r5, #8
 8005894:	2d0c      	cmp	r5, #12
 8005896:	bf38      	it	cc
 8005898:	250c      	movcc	r5, #12
 800589a:	2d00      	cmp	r5, #0
 800589c:	4607      	mov	r7, r0
 800589e:	db01      	blt.n	80058a4 <_malloc_r+0x1c>
 80058a0:	42a9      	cmp	r1, r5
 80058a2:	d905      	bls.n	80058b0 <_malloc_r+0x28>
 80058a4:	230c      	movs	r3, #12
 80058a6:	2600      	movs	r6, #0
 80058a8:	603b      	str	r3, [r7, #0]
 80058aa:	4630      	mov	r0, r6
 80058ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80058b0:	4e2e      	ldr	r6, [pc, #184]	; (800596c <_malloc_r+0xe4>)
 80058b2:	f000 f8b9 	bl	8005a28 <__malloc_lock>
 80058b6:	6833      	ldr	r3, [r6, #0]
 80058b8:	461c      	mov	r4, r3
 80058ba:	bb34      	cbnz	r4, 800590a <_malloc_r+0x82>
 80058bc:	4629      	mov	r1, r5
 80058be:	4638      	mov	r0, r7
 80058c0:	f7ff ffc2 	bl	8005848 <sbrk_aligned>
 80058c4:	1c43      	adds	r3, r0, #1
 80058c6:	4604      	mov	r4, r0
 80058c8:	d14d      	bne.n	8005966 <_malloc_r+0xde>
 80058ca:	6834      	ldr	r4, [r6, #0]
 80058cc:	4626      	mov	r6, r4
 80058ce:	2e00      	cmp	r6, #0
 80058d0:	d140      	bne.n	8005954 <_malloc_r+0xcc>
 80058d2:	6823      	ldr	r3, [r4, #0]
 80058d4:	4631      	mov	r1, r6
 80058d6:	4638      	mov	r0, r7
 80058d8:	eb04 0803 	add.w	r8, r4, r3
 80058dc:	f000 f84e 	bl	800597c <_sbrk_r>
 80058e0:	4580      	cmp	r8, r0
 80058e2:	d13a      	bne.n	800595a <_malloc_r+0xd2>
 80058e4:	6821      	ldr	r1, [r4, #0]
 80058e6:	3503      	adds	r5, #3
 80058e8:	1a6d      	subs	r5, r5, r1
 80058ea:	f025 0503 	bic.w	r5, r5, #3
 80058ee:	3508      	adds	r5, #8
 80058f0:	2d0c      	cmp	r5, #12
 80058f2:	bf38      	it	cc
 80058f4:	250c      	movcc	r5, #12
 80058f6:	4638      	mov	r0, r7
 80058f8:	4629      	mov	r1, r5
 80058fa:	f7ff ffa5 	bl	8005848 <sbrk_aligned>
 80058fe:	3001      	adds	r0, #1
 8005900:	d02b      	beq.n	800595a <_malloc_r+0xd2>
 8005902:	6823      	ldr	r3, [r4, #0]
 8005904:	442b      	add	r3, r5
 8005906:	6023      	str	r3, [r4, #0]
 8005908:	e00e      	b.n	8005928 <_malloc_r+0xa0>
 800590a:	6822      	ldr	r2, [r4, #0]
 800590c:	1b52      	subs	r2, r2, r5
 800590e:	d41e      	bmi.n	800594e <_malloc_r+0xc6>
 8005910:	2a0b      	cmp	r2, #11
 8005912:	d916      	bls.n	8005942 <_malloc_r+0xba>
 8005914:	1961      	adds	r1, r4, r5
 8005916:	42a3      	cmp	r3, r4
 8005918:	6025      	str	r5, [r4, #0]
 800591a:	bf18      	it	ne
 800591c:	6059      	strne	r1, [r3, #4]
 800591e:	6863      	ldr	r3, [r4, #4]
 8005920:	bf08      	it	eq
 8005922:	6031      	streq	r1, [r6, #0]
 8005924:	5162      	str	r2, [r4, r5]
 8005926:	604b      	str	r3, [r1, #4]
 8005928:	4638      	mov	r0, r7
 800592a:	f104 060b 	add.w	r6, r4, #11
 800592e:	f000 f881 	bl	8005a34 <__malloc_unlock>
 8005932:	f026 0607 	bic.w	r6, r6, #7
 8005936:	1d23      	adds	r3, r4, #4
 8005938:	1af2      	subs	r2, r6, r3
 800593a:	d0b6      	beq.n	80058aa <_malloc_r+0x22>
 800593c:	1b9b      	subs	r3, r3, r6
 800593e:	50a3      	str	r3, [r4, r2]
 8005940:	e7b3      	b.n	80058aa <_malloc_r+0x22>
 8005942:	6862      	ldr	r2, [r4, #4]
 8005944:	42a3      	cmp	r3, r4
 8005946:	bf0c      	ite	eq
 8005948:	6032      	streq	r2, [r6, #0]
 800594a:	605a      	strne	r2, [r3, #4]
 800594c:	e7ec      	b.n	8005928 <_malloc_r+0xa0>
 800594e:	4623      	mov	r3, r4
 8005950:	6864      	ldr	r4, [r4, #4]
 8005952:	e7b2      	b.n	80058ba <_malloc_r+0x32>
 8005954:	4634      	mov	r4, r6
 8005956:	6876      	ldr	r6, [r6, #4]
 8005958:	e7b9      	b.n	80058ce <_malloc_r+0x46>
 800595a:	230c      	movs	r3, #12
 800595c:	4638      	mov	r0, r7
 800595e:	603b      	str	r3, [r7, #0]
 8005960:	f000 f868 	bl	8005a34 <__malloc_unlock>
 8005964:	e7a1      	b.n	80058aa <_malloc_r+0x22>
 8005966:	6025      	str	r5, [r4, #0]
 8005968:	e7de      	b.n	8005928 <_malloc_r+0xa0>
 800596a:	bf00      	nop
 800596c:	20000410 	.word	0x20000410

08005970 <nan>:
 8005970:	2000      	movs	r0, #0
 8005972:	4901      	ldr	r1, [pc, #4]	; (8005978 <nan+0x8>)
 8005974:	4770      	bx	lr
 8005976:	bf00      	nop
 8005978:	7ff80000 	.word	0x7ff80000

0800597c <_sbrk_r>:
 800597c:	b538      	push	{r3, r4, r5, lr}
 800597e:	2300      	movs	r3, #0
 8005980:	4d05      	ldr	r5, [pc, #20]	; (8005998 <_sbrk_r+0x1c>)
 8005982:	4604      	mov	r4, r0
 8005984:	4608      	mov	r0, r1
 8005986:	602b      	str	r3, [r5, #0]
 8005988:	f7fc f932 	bl	8001bf0 <_sbrk>
 800598c:	1c43      	adds	r3, r0, #1
 800598e:	d102      	bne.n	8005996 <_sbrk_r+0x1a>
 8005990:	682b      	ldr	r3, [r5, #0]
 8005992:	b103      	cbz	r3, 8005996 <_sbrk_r+0x1a>
 8005994:	6023      	str	r3, [r4, #0]
 8005996:	bd38      	pop	{r3, r4, r5, pc}
 8005998:	20000418 	.word	0x20000418

0800599c <__ascii_wctomb>:
 800599c:	4603      	mov	r3, r0
 800599e:	4608      	mov	r0, r1
 80059a0:	b141      	cbz	r1, 80059b4 <__ascii_wctomb+0x18>
 80059a2:	2aff      	cmp	r2, #255	; 0xff
 80059a4:	d904      	bls.n	80059b0 <__ascii_wctomb+0x14>
 80059a6:	228a      	movs	r2, #138	; 0x8a
 80059a8:	f04f 30ff 	mov.w	r0, #4294967295
 80059ac:	601a      	str	r2, [r3, #0]
 80059ae:	4770      	bx	lr
 80059b0:	2001      	movs	r0, #1
 80059b2:	700a      	strb	r2, [r1, #0]
 80059b4:	4770      	bx	lr
	...

080059b8 <__assert_func>:
 80059b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80059ba:	4614      	mov	r4, r2
 80059bc:	461a      	mov	r2, r3
 80059be:	4b09      	ldr	r3, [pc, #36]	; (80059e4 <__assert_func+0x2c>)
 80059c0:	4605      	mov	r5, r0
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	68d8      	ldr	r0, [r3, #12]
 80059c6:	b14c      	cbz	r4, 80059dc <__assert_func+0x24>
 80059c8:	4b07      	ldr	r3, [pc, #28]	; (80059e8 <__assert_func+0x30>)
 80059ca:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80059ce:	9100      	str	r1, [sp, #0]
 80059d0:	462b      	mov	r3, r5
 80059d2:	4906      	ldr	r1, [pc, #24]	; (80059ec <__assert_func+0x34>)
 80059d4:	f000 f80e 	bl	80059f4 <fiprintf>
 80059d8:	f000 fc28 	bl	800622c <abort>
 80059dc:	4b04      	ldr	r3, [pc, #16]	; (80059f0 <__assert_func+0x38>)
 80059de:	461c      	mov	r4, r3
 80059e0:	e7f3      	b.n	80059ca <__assert_func+0x12>
 80059e2:	bf00      	nop
 80059e4:	2000000c 	.word	0x2000000c
 80059e8:	08006b4c 	.word	0x08006b4c
 80059ec:	08006b59 	.word	0x08006b59
 80059f0:	08006b87 	.word	0x08006b87

080059f4 <fiprintf>:
 80059f4:	b40e      	push	{r1, r2, r3}
 80059f6:	b503      	push	{r0, r1, lr}
 80059f8:	4601      	mov	r1, r0
 80059fa:	ab03      	add	r3, sp, #12
 80059fc:	4805      	ldr	r0, [pc, #20]	; (8005a14 <fiprintf+0x20>)
 80059fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a02:	6800      	ldr	r0, [r0, #0]
 8005a04:	9301      	str	r3, [sp, #4]
 8005a06:	f000 f88b 	bl	8005b20 <_vfiprintf_r>
 8005a0a:	b002      	add	sp, #8
 8005a0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005a10:	b003      	add	sp, #12
 8005a12:	4770      	bx	lr
 8005a14:	2000000c 	.word	0x2000000c

08005a18 <malloc>:
 8005a18:	4b02      	ldr	r3, [pc, #8]	; (8005a24 <malloc+0xc>)
 8005a1a:	4601      	mov	r1, r0
 8005a1c:	6818      	ldr	r0, [r3, #0]
 8005a1e:	f7ff bf33 	b.w	8005888 <_malloc_r>
 8005a22:	bf00      	nop
 8005a24:	2000000c 	.word	0x2000000c

08005a28 <__malloc_lock>:
 8005a28:	4801      	ldr	r0, [pc, #4]	; (8005a30 <__malloc_lock+0x8>)
 8005a2a:	f000 bdbb 	b.w	80065a4 <__retarget_lock_acquire_recursive>
 8005a2e:	bf00      	nop
 8005a30:	2000041c 	.word	0x2000041c

08005a34 <__malloc_unlock>:
 8005a34:	4801      	ldr	r0, [pc, #4]	; (8005a3c <__malloc_unlock+0x8>)
 8005a36:	f000 bdb6 	b.w	80065a6 <__retarget_lock_release_recursive>
 8005a3a:	bf00      	nop
 8005a3c:	2000041c 	.word	0x2000041c

08005a40 <_free_r>:
 8005a40:	b538      	push	{r3, r4, r5, lr}
 8005a42:	4605      	mov	r5, r0
 8005a44:	2900      	cmp	r1, #0
 8005a46:	d040      	beq.n	8005aca <_free_r+0x8a>
 8005a48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a4c:	1f0c      	subs	r4, r1, #4
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	bfb8      	it	lt
 8005a52:	18e4      	addlt	r4, r4, r3
 8005a54:	f7ff ffe8 	bl	8005a28 <__malloc_lock>
 8005a58:	4a1c      	ldr	r2, [pc, #112]	; (8005acc <_free_r+0x8c>)
 8005a5a:	6813      	ldr	r3, [r2, #0]
 8005a5c:	b933      	cbnz	r3, 8005a6c <_free_r+0x2c>
 8005a5e:	6063      	str	r3, [r4, #4]
 8005a60:	6014      	str	r4, [r2, #0]
 8005a62:	4628      	mov	r0, r5
 8005a64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005a68:	f7ff bfe4 	b.w	8005a34 <__malloc_unlock>
 8005a6c:	42a3      	cmp	r3, r4
 8005a6e:	d908      	bls.n	8005a82 <_free_r+0x42>
 8005a70:	6820      	ldr	r0, [r4, #0]
 8005a72:	1821      	adds	r1, r4, r0
 8005a74:	428b      	cmp	r3, r1
 8005a76:	bf01      	itttt	eq
 8005a78:	6819      	ldreq	r1, [r3, #0]
 8005a7a:	685b      	ldreq	r3, [r3, #4]
 8005a7c:	1809      	addeq	r1, r1, r0
 8005a7e:	6021      	streq	r1, [r4, #0]
 8005a80:	e7ed      	b.n	8005a5e <_free_r+0x1e>
 8005a82:	461a      	mov	r2, r3
 8005a84:	685b      	ldr	r3, [r3, #4]
 8005a86:	b10b      	cbz	r3, 8005a8c <_free_r+0x4c>
 8005a88:	42a3      	cmp	r3, r4
 8005a8a:	d9fa      	bls.n	8005a82 <_free_r+0x42>
 8005a8c:	6811      	ldr	r1, [r2, #0]
 8005a8e:	1850      	adds	r0, r2, r1
 8005a90:	42a0      	cmp	r0, r4
 8005a92:	d10b      	bne.n	8005aac <_free_r+0x6c>
 8005a94:	6820      	ldr	r0, [r4, #0]
 8005a96:	4401      	add	r1, r0
 8005a98:	1850      	adds	r0, r2, r1
 8005a9a:	4283      	cmp	r3, r0
 8005a9c:	6011      	str	r1, [r2, #0]
 8005a9e:	d1e0      	bne.n	8005a62 <_free_r+0x22>
 8005aa0:	6818      	ldr	r0, [r3, #0]
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	4401      	add	r1, r0
 8005aa6:	6011      	str	r1, [r2, #0]
 8005aa8:	6053      	str	r3, [r2, #4]
 8005aaa:	e7da      	b.n	8005a62 <_free_r+0x22>
 8005aac:	d902      	bls.n	8005ab4 <_free_r+0x74>
 8005aae:	230c      	movs	r3, #12
 8005ab0:	602b      	str	r3, [r5, #0]
 8005ab2:	e7d6      	b.n	8005a62 <_free_r+0x22>
 8005ab4:	6820      	ldr	r0, [r4, #0]
 8005ab6:	1821      	adds	r1, r4, r0
 8005ab8:	428b      	cmp	r3, r1
 8005aba:	bf01      	itttt	eq
 8005abc:	6819      	ldreq	r1, [r3, #0]
 8005abe:	685b      	ldreq	r3, [r3, #4]
 8005ac0:	1809      	addeq	r1, r1, r0
 8005ac2:	6021      	streq	r1, [r4, #0]
 8005ac4:	6063      	str	r3, [r4, #4]
 8005ac6:	6054      	str	r4, [r2, #4]
 8005ac8:	e7cb      	b.n	8005a62 <_free_r+0x22>
 8005aca:	bd38      	pop	{r3, r4, r5, pc}
 8005acc:	20000410 	.word	0x20000410

08005ad0 <__sfputc_r>:
 8005ad0:	6893      	ldr	r3, [r2, #8]
 8005ad2:	b410      	push	{r4}
 8005ad4:	3b01      	subs	r3, #1
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	6093      	str	r3, [r2, #8]
 8005ada:	da07      	bge.n	8005aec <__sfputc_r+0x1c>
 8005adc:	6994      	ldr	r4, [r2, #24]
 8005ade:	42a3      	cmp	r3, r4
 8005ae0:	db01      	blt.n	8005ae6 <__sfputc_r+0x16>
 8005ae2:	290a      	cmp	r1, #10
 8005ae4:	d102      	bne.n	8005aec <__sfputc_r+0x1c>
 8005ae6:	bc10      	pop	{r4}
 8005ae8:	f000 bae0 	b.w	80060ac <__swbuf_r>
 8005aec:	6813      	ldr	r3, [r2, #0]
 8005aee:	1c58      	adds	r0, r3, #1
 8005af0:	6010      	str	r0, [r2, #0]
 8005af2:	7019      	strb	r1, [r3, #0]
 8005af4:	4608      	mov	r0, r1
 8005af6:	bc10      	pop	{r4}
 8005af8:	4770      	bx	lr

08005afa <__sfputs_r>:
 8005afa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005afc:	4606      	mov	r6, r0
 8005afe:	460f      	mov	r7, r1
 8005b00:	4614      	mov	r4, r2
 8005b02:	18d5      	adds	r5, r2, r3
 8005b04:	42ac      	cmp	r4, r5
 8005b06:	d101      	bne.n	8005b0c <__sfputs_r+0x12>
 8005b08:	2000      	movs	r0, #0
 8005b0a:	e007      	b.n	8005b1c <__sfputs_r+0x22>
 8005b0c:	463a      	mov	r2, r7
 8005b0e:	4630      	mov	r0, r6
 8005b10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b14:	f7ff ffdc 	bl	8005ad0 <__sfputc_r>
 8005b18:	1c43      	adds	r3, r0, #1
 8005b1a:	d1f3      	bne.n	8005b04 <__sfputs_r+0xa>
 8005b1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005b20 <_vfiprintf_r>:
 8005b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b24:	460d      	mov	r5, r1
 8005b26:	4614      	mov	r4, r2
 8005b28:	4698      	mov	r8, r3
 8005b2a:	4606      	mov	r6, r0
 8005b2c:	b09d      	sub	sp, #116	; 0x74
 8005b2e:	b118      	cbz	r0, 8005b38 <_vfiprintf_r+0x18>
 8005b30:	6983      	ldr	r3, [r0, #24]
 8005b32:	b90b      	cbnz	r3, 8005b38 <_vfiprintf_r+0x18>
 8005b34:	f000 fc98 	bl	8006468 <__sinit>
 8005b38:	4b89      	ldr	r3, [pc, #548]	; (8005d60 <_vfiprintf_r+0x240>)
 8005b3a:	429d      	cmp	r5, r3
 8005b3c:	d11b      	bne.n	8005b76 <_vfiprintf_r+0x56>
 8005b3e:	6875      	ldr	r5, [r6, #4]
 8005b40:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005b42:	07d9      	lsls	r1, r3, #31
 8005b44:	d405      	bmi.n	8005b52 <_vfiprintf_r+0x32>
 8005b46:	89ab      	ldrh	r3, [r5, #12]
 8005b48:	059a      	lsls	r2, r3, #22
 8005b4a:	d402      	bmi.n	8005b52 <_vfiprintf_r+0x32>
 8005b4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005b4e:	f000 fd29 	bl	80065a4 <__retarget_lock_acquire_recursive>
 8005b52:	89ab      	ldrh	r3, [r5, #12]
 8005b54:	071b      	lsls	r3, r3, #28
 8005b56:	d501      	bpl.n	8005b5c <_vfiprintf_r+0x3c>
 8005b58:	692b      	ldr	r3, [r5, #16]
 8005b5a:	b9eb      	cbnz	r3, 8005b98 <_vfiprintf_r+0x78>
 8005b5c:	4629      	mov	r1, r5
 8005b5e:	4630      	mov	r0, r6
 8005b60:	f000 faf6 	bl	8006150 <__swsetup_r>
 8005b64:	b1c0      	cbz	r0, 8005b98 <_vfiprintf_r+0x78>
 8005b66:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005b68:	07dc      	lsls	r4, r3, #31
 8005b6a:	d50e      	bpl.n	8005b8a <_vfiprintf_r+0x6a>
 8005b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8005b70:	b01d      	add	sp, #116	; 0x74
 8005b72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b76:	4b7b      	ldr	r3, [pc, #492]	; (8005d64 <_vfiprintf_r+0x244>)
 8005b78:	429d      	cmp	r5, r3
 8005b7a:	d101      	bne.n	8005b80 <_vfiprintf_r+0x60>
 8005b7c:	68b5      	ldr	r5, [r6, #8]
 8005b7e:	e7df      	b.n	8005b40 <_vfiprintf_r+0x20>
 8005b80:	4b79      	ldr	r3, [pc, #484]	; (8005d68 <_vfiprintf_r+0x248>)
 8005b82:	429d      	cmp	r5, r3
 8005b84:	bf08      	it	eq
 8005b86:	68f5      	ldreq	r5, [r6, #12]
 8005b88:	e7da      	b.n	8005b40 <_vfiprintf_r+0x20>
 8005b8a:	89ab      	ldrh	r3, [r5, #12]
 8005b8c:	0598      	lsls	r0, r3, #22
 8005b8e:	d4ed      	bmi.n	8005b6c <_vfiprintf_r+0x4c>
 8005b90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005b92:	f000 fd08 	bl	80065a6 <__retarget_lock_release_recursive>
 8005b96:	e7e9      	b.n	8005b6c <_vfiprintf_r+0x4c>
 8005b98:	2300      	movs	r3, #0
 8005b9a:	9309      	str	r3, [sp, #36]	; 0x24
 8005b9c:	2320      	movs	r3, #32
 8005b9e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005ba2:	2330      	movs	r3, #48	; 0x30
 8005ba4:	f04f 0901 	mov.w	r9, #1
 8005ba8:	f8cd 800c 	str.w	r8, [sp, #12]
 8005bac:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8005d6c <_vfiprintf_r+0x24c>
 8005bb0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005bb4:	4623      	mov	r3, r4
 8005bb6:	469a      	mov	sl, r3
 8005bb8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005bbc:	b10a      	cbz	r2, 8005bc2 <_vfiprintf_r+0xa2>
 8005bbe:	2a25      	cmp	r2, #37	; 0x25
 8005bc0:	d1f9      	bne.n	8005bb6 <_vfiprintf_r+0x96>
 8005bc2:	ebba 0b04 	subs.w	fp, sl, r4
 8005bc6:	d00b      	beq.n	8005be0 <_vfiprintf_r+0xc0>
 8005bc8:	465b      	mov	r3, fp
 8005bca:	4622      	mov	r2, r4
 8005bcc:	4629      	mov	r1, r5
 8005bce:	4630      	mov	r0, r6
 8005bd0:	f7ff ff93 	bl	8005afa <__sfputs_r>
 8005bd4:	3001      	adds	r0, #1
 8005bd6:	f000 80aa 	beq.w	8005d2e <_vfiprintf_r+0x20e>
 8005bda:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005bdc:	445a      	add	r2, fp
 8005bde:	9209      	str	r2, [sp, #36]	; 0x24
 8005be0:	f89a 3000 	ldrb.w	r3, [sl]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	f000 80a2 	beq.w	8005d2e <_vfiprintf_r+0x20e>
 8005bea:	2300      	movs	r3, #0
 8005bec:	f04f 32ff 	mov.w	r2, #4294967295
 8005bf0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005bf4:	f10a 0a01 	add.w	sl, sl, #1
 8005bf8:	9304      	str	r3, [sp, #16]
 8005bfa:	9307      	str	r3, [sp, #28]
 8005bfc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005c00:	931a      	str	r3, [sp, #104]	; 0x68
 8005c02:	4654      	mov	r4, sl
 8005c04:	2205      	movs	r2, #5
 8005c06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c0a:	4858      	ldr	r0, [pc, #352]	; (8005d6c <_vfiprintf_r+0x24c>)
 8005c0c:	f000 fd32 	bl	8006674 <memchr>
 8005c10:	9a04      	ldr	r2, [sp, #16]
 8005c12:	b9d8      	cbnz	r0, 8005c4c <_vfiprintf_r+0x12c>
 8005c14:	06d1      	lsls	r1, r2, #27
 8005c16:	bf44      	itt	mi
 8005c18:	2320      	movmi	r3, #32
 8005c1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005c1e:	0713      	lsls	r3, r2, #28
 8005c20:	bf44      	itt	mi
 8005c22:	232b      	movmi	r3, #43	; 0x2b
 8005c24:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005c28:	f89a 3000 	ldrb.w	r3, [sl]
 8005c2c:	2b2a      	cmp	r3, #42	; 0x2a
 8005c2e:	d015      	beq.n	8005c5c <_vfiprintf_r+0x13c>
 8005c30:	4654      	mov	r4, sl
 8005c32:	2000      	movs	r0, #0
 8005c34:	f04f 0c0a 	mov.w	ip, #10
 8005c38:	9a07      	ldr	r2, [sp, #28]
 8005c3a:	4621      	mov	r1, r4
 8005c3c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005c40:	3b30      	subs	r3, #48	; 0x30
 8005c42:	2b09      	cmp	r3, #9
 8005c44:	d94e      	bls.n	8005ce4 <_vfiprintf_r+0x1c4>
 8005c46:	b1b0      	cbz	r0, 8005c76 <_vfiprintf_r+0x156>
 8005c48:	9207      	str	r2, [sp, #28]
 8005c4a:	e014      	b.n	8005c76 <_vfiprintf_r+0x156>
 8005c4c:	eba0 0308 	sub.w	r3, r0, r8
 8005c50:	fa09 f303 	lsl.w	r3, r9, r3
 8005c54:	4313      	orrs	r3, r2
 8005c56:	46a2      	mov	sl, r4
 8005c58:	9304      	str	r3, [sp, #16]
 8005c5a:	e7d2      	b.n	8005c02 <_vfiprintf_r+0xe2>
 8005c5c:	9b03      	ldr	r3, [sp, #12]
 8005c5e:	1d19      	adds	r1, r3, #4
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	9103      	str	r1, [sp, #12]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	bfbb      	ittet	lt
 8005c68:	425b      	neglt	r3, r3
 8005c6a:	f042 0202 	orrlt.w	r2, r2, #2
 8005c6e:	9307      	strge	r3, [sp, #28]
 8005c70:	9307      	strlt	r3, [sp, #28]
 8005c72:	bfb8      	it	lt
 8005c74:	9204      	strlt	r2, [sp, #16]
 8005c76:	7823      	ldrb	r3, [r4, #0]
 8005c78:	2b2e      	cmp	r3, #46	; 0x2e
 8005c7a:	d10c      	bne.n	8005c96 <_vfiprintf_r+0x176>
 8005c7c:	7863      	ldrb	r3, [r4, #1]
 8005c7e:	2b2a      	cmp	r3, #42	; 0x2a
 8005c80:	d135      	bne.n	8005cee <_vfiprintf_r+0x1ce>
 8005c82:	9b03      	ldr	r3, [sp, #12]
 8005c84:	3402      	adds	r4, #2
 8005c86:	1d1a      	adds	r2, r3, #4
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	9203      	str	r2, [sp, #12]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	bfb8      	it	lt
 8005c90:	f04f 33ff 	movlt.w	r3, #4294967295
 8005c94:	9305      	str	r3, [sp, #20]
 8005c96:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8005d70 <_vfiprintf_r+0x250>
 8005c9a:	2203      	movs	r2, #3
 8005c9c:	4650      	mov	r0, sl
 8005c9e:	7821      	ldrb	r1, [r4, #0]
 8005ca0:	f000 fce8 	bl	8006674 <memchr>
 8005ca4:	b140      	cbz	r0, 8005cb8 <_vfiprintf_r+0x198>
 8005ca6:	2340      	movs	r3, #64	; 0x40
 8005ca8:	eba0 000a 	sub.w	r0, r0, sl
 8005cac:	fa03 f000 	lsl.w	r0, r3, r0
 8005cb0:	9b04      	ldr	r3, [sp, #16]
 8005cb2:	3401      	adds	r4, #1
 8005cb4:	4303      	orrs	r3, r0
 8005cb6:	9304      	str	r3, [sp, #16]
 8005cb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005cbc:	2206      	movs	r2, #6
 8005cbe:	482d      	ldr	r0, [pc, #180]	; (8005d74 <_vfiprintf_r+0x254>)
 8005cc0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005cc4:	f000 fcd6 	bl	8006674 <memchr>
 8005cc8:	2800      	cmp	r0, #0
 8005cca:	d03f      	beq.n	8005d4c <_vfiprintf_r+0x22c>
 8005ccc:	4b2a      	ldr	r3, [pc, #168]	; (8005d78 <_vfiprintf_r+0x258>)
 8005cce:	bb1b      	cbnz	r3, 8005d18 <_vfiprintf_r+0x1f8>
 8005cd0:	9b03      	ldr	r3, [sp, #12]
 8005cd2:	3307      	adds	r3, #7
 8005cd4:	f023 0307 	bic.w	r3, r3, #7
 8005cd8:	3308      	adds	r3, #8
 8005cda:	9303      	str	r3, [sp, #12]
 8005cdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005cde:	443b      	add	r3, r7
 8005ce0:	9309      	str	r3, [sp, #36]	; 0x24
 8005ce2:	e767      	b.n	8005bb4 <_vfiprintf_r+0x94>
 8005ce4:	460c      	mov	r4, r1
 8005ce6:	2001      	movs	r0, #1
 8005ce8:	fb0c 3202 	mla	r2, ip, r2, r3
 8005cec:	e7a5      	b.n	8005c3a <_vfiprintf_r+0x11a>
 8005cee:	2300      	movs	r3, #0
 8005cf0:	f04f 0c0a 	mov.w	ip, #10
 8005cf4:	4619      	mov	r1, r3
 8005cf6:	3401      	adds	r4, #1
 8005cf8:	9305      	str	r3, [sp, #20]
 8005cfa:	4620      	mov	r0, r4
 8005cfc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005d00:	3a30      	subs	r2, #48	; 0x30
 8005d02:	2a09      	cmp	r2, #9
 8005d04:	d903      	bls.n	8005d0e <_vfiprintf_r+0x1ee>
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d0c5      	beq.n	8005c96 <_vfiprintf_r+0x176>
 8005d0a:	9105      	str	r1, [sp, #20]
 8005d0c:	e7c3      	b.n	8005c96 <_vfiprintf_r+0x176>
 8005d0e:	4604      	mov	r4, r0
 8005d10:	2301      	movs	r3, #1
 8005d12:	fb0c 2101 	mla	r1, ip, r1, r2
 8005d16:	e7f0      	b.n	8005cfa <_vfiprintf_r+0x1da>
 8005d18:	ab03      	add	r3, sp, #12
 8005d1a:	9300      	str	r3, [sp, #0]
 8005d1c:	462a      	mov	r2, r5
 8005d1e:	4630      	mov	r0, r6
 8005d20:	4b16      	ldr	r3, [pc, #88]	; (8005d7c <_vfiprintf_r+0x25c>)
 8005d22:	a904      	add	r1, sp, #16
 8005d24:	f3af 8000 	nop.w
 8005d28:	4607      	mov	r7, r0
 8005d2a:	1c78      	adds	r0, r7, #1
 8005d2c:	d1d6      	bne.n	8005cdc <_vfiprintf_r+0x1bc>
 8005d2e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005d30:	07d9      	lsls	r1, r3, #31
 8005d32:	d405      	bmi.n	8005d40 <_vfiprintf_r+0x220>
 8005d34:	89ab      	ldrh	r3, [r5, #12]
 8005d36:	059a      	lsls	r2, r3, #22
 8005d38:	d402      	bmi.n	8005d40 <_vfiprintf_r+0x220>
 8005d3a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005d3c:	f000 fc33 	bl	80065a6 <__retarget_lock_release_recursive>
 8005d40:	89ab      	ldrh	r3, [r5, #12]
 8005d42:	065b      	lsls	r3, r3, #25
 8005d44:	f53f af12 	bmi.w	8005b6c <_vfiprintf_r+0x4c>
 8005d48:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005d4a:	e711      	b.n	8005b70 <_vfiprintf_r+0x50>
 8005d4c:	ab03      	add	r3, sp, #12
 8005d4e:	9300      	str	r3, [sp, #0]
 8005d50:	462a      	mov	r2, r5
 8005d52:	4630      	mov	r0, r6
 8005d54:	4b09      	ldr	r3, [pc, #36]	; (8005d7c <_vfiprintf_r+0x25c>)
 8005d56:	a904      	add	r1, sp, #16
 8005d58:	f000 f882 	bl	8005e60 <_printf_i>
 8005d5c:	e7e4      	b.n	8005d28 <_vfiprintf_r+0x208>
 8005d5e:	bf00      	nop
 8005d60:	08006cdc 	.word	0x08006cdc
 8005d64:	08006cfc 	.word	0x08006cfc
 8005d68:	08006cbc 	.word	0x08006cbc
 8005d6c:	08006c89 	.word	0x08006c89
 8005d70:	08006c8f 	.word	0x08006c8f
 8005d74:	08006c93 	.word	0x08006c93
 8005d78:	00000000 	.word	0x00000000
 8005d7c:	08005afb 	.word	0x08005afb

08005d80 <_printf_common>:
 8005d80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d84:	4616      	mov	r6, r2
 8005d86:	4699      	mov	r9, r3
 8005d88:	688a      	ldr	r2, [r1, #8]
 8005d8a:	690b      	ldr	r3, [r1, #16]
 8005d8c:	4607      	mov	r7, r0
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	bfb8      	it	lt
 8005d92:	4613      	movlt	r3, r2
 8005d94:	6033      	str	r3, [r6, #0]
 8005d96:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005d9a:	460c      	mov	r4, r1
 8005d9c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005da0:	b10a      	cbz	r2, 8005da6 <_printf_common+0x26>
 8005da2:	3301      	adds	r3, #1
 8005da4:	6033      	str	r3, [r6, #0]
 8005da6:	6823      	ldr	r3, [r4, #0]
 8005da8:	0699      	lsls	r1, r3, #26
 8005daa:	bf42      	ittt	mi
 8005dac:	6833      	ldrmi	r3, [r6, #0]
 8005dae:	3302      	addmi	r3, #2
 8005db0:	6033      	strmi	r3, [r6, #0]
 8005db2:	6825      	ldr	r5, [r4, #0]
 8005db4:	f015 0506 	ands.w	r5, r5, #6
 8005db8:	d106      	bne.n	8005dc8 <_printf_common+0x48>
 8005dba:	f104 0a19 	add.w	sl, r4, #25
 8005dbe:	68e3      	ldr	r3, [r4, #12]
 8005dc0:	6832      	ldr	r2, [r6, #0]
 8005dc2:	1a9b      	subs	r3, r3, r2
 8005dc4:	42ab      	cmp	r3, r5
 8005dc6:	dc28      	bgt.n	8005e1a <_printf_common+0x9a>
 8005dc8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005dcc:	1e13      	subs	r3, r2, #0
 8005dce:	6822      	ldr	r2, [r4, #0]
 8005dd0:	bf18      	it	ne
 8005dd2:	2301      	movne	r3, #1
 8005dd4:	0692      	lsls	r2, r2, #26
 8005dd6:	d42d      	bmi.n	8005e34 <_printf_common+0xb4>
 8005dd8:	4649      	mov	r1, r9
 8005dda:	4638      	mov	r0, r7
 8005ddc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005de0:	47c0      	blx	r8
 8005de2:	3001      	adds	r0, #1
 8005de4:	d020      	beq.n	8005e28 <_printf_common+0xa8>
 8005de6:	6823      	ldr	r3, [r4, #0]
 8005de8:	68e5      	ldr	r5, [r4, #12]
 8005dea:	f003 0306 	and.w	r3, r3, #6
 8005dee:	2b04      	cmp	r3, #4
 8005df0:	bf18      	it	ne
 8005df2:	2500      	movne	r5, #0
 8005df4:	6832      	ldr	r2, [r6, #0]
 8005df6:	f04f 0600 	mov.w	r6, #0
 8005dfa:	68a3      	ldr	r3, [r4, #8]
 8005dfc:	bf08      	it	eq
 8005dfe:	1aad      	subeq	r5, r5, r2
 8005e00:	6922      	ldr	r2, [r4, #16]
 8005e02:	bf08      	it	eq
 8005e04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	bfc4      	itt	gt
 8005e0c:	1a9b      	subgt	r3, r3, r2
 8005e0e:	18ed      	addgt	r5, r5, r3
 8005e10:	341a      	adds	r4, #26
 8005e12:	42b5      	cmp	r5, r6
 8005e14:	d11a      	bne.n	8005e4c <_printf_common+0xcc>
 8005e16:	2000      	movs	r0, #0
 8005e18:	e008      	b.n	8005e2c <_printf_common+0xac>
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	4652      	mov	r2, sl
 8005e1e:	4649      	mov	r1, r9
 8005e20:	4638      	mov	r0, r7
 8005e22:	47c0      	blx	r8
 8005e24:	3001      	adds	r0, #1
 8005e26:	d103      	bne.n	8005e30 <_printf_common+0xb0>
 8005e28:	f04f 30ff 	mov.w	r0, #4294967295
 8005e2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e30:	3501      	adds	r5, #1
 8005e32:	e7c4      	b.n	8005dbe <_printf_common+0x3e>
 8005e34:	2030      	movs	r0, #48	; 0x30
 8005e36:	18e1      	adds	r1, r4, r3
 8005e38:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005e3c:	1c5a      	adds	r2, r3, #1
 8005e3e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005e42:	4422      	add	r2, r4
 8005e44:	3302      	adds	r3, #2
 8005e46:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005e4a:	e7c5      	b.n	8005dd8 <_printf_common+0x58>
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	4622      	mov	r2, r4
 8005e50:	4649      	mov	r1, r9
 8005e52:	4638      	mov	r0, r7
 8005e54:	47c0      	blx	r8
 8005e56:	3001      	adds	r0, #1
 8005e58:	d0e6      	beq.n	8005e28 <_printf_common+0xa8>
 8005e5a:	3601      	adds	r6, #1
 8005e5c:	e7d9      	b.n	8005e12 <_printf_common+0x92>
	...

08005e60 <_printf_i>:
 8005e60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005e64:	7e0f      	ldrb	r7, [r1, #24]
 8005e66:	4691      	mov	r9, r2
 8005e68:	2f78      	cmp	r7, #120	; 0x78
 8005e6a:	4680      	mov	r8, r0
 8005e6c:	460c      	mov	r4, r1
 8005e6e:	469a      	mov	sl, r3
 8005e70:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005e72:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005e76:	d807      	bhi.n	8005e88 <_printf_i+0x28>
 8005e78:	2f62      	cmp	r7, #98	; 0x62
 8005e7a:	d80a      	bhi.n	8005e92 <_printf_i+0x32>
 8005e7c:	2f00      	cmp	r7, #0
 8005e7e:	f000 80d9 	beq.w	8006034 <_printf_i+0x1d4>
 8005e82:	2f58      	cmp	r7, #88	; 0x58
 8005e84:	f000 80a4 	beq.w	8005fd0 <_printf_i+0x170>
 8005e88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005e8c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005e90:	e03a      	b.n	8005f08 <_printf_i+0xa8>
 8005e92:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005e96:	2b15      	cmp	r3, #21
 8005e98:	d8f6      	bhi.n	8005e88 <_printf_i+0x28>
 8005e9a:	a101      	add	r1, pc, #4	; (adr r1, 8005ea0 <_printf_i+0x40>)
 8005e9c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005ea0:	08005ef9 	.word	0x08005ef9
 8005ea4:	08005f0d 	.word	0x08005f0d
 8005ea8:	08005e89 	.word	0x08005e89
 8005eac:	08005e89 	.word	0x08005e89
 8005eb0:	08005e89 	.word	0x08005e89
 8005eb4:	08005e89 	.word	0x08005e89
 8005eb8:	08005f0d 	.word	0x08005f0d
 8005ebc:	08005e89 	.word	0x08005e89
 8005ec0:	08005e89 	.word	0x08005e89
 8005ec4:	08005e89 	.word	0x08005e89
 8005ec8:	08005e89 	.word	0x08005e89
 8005ecc:	0800601b 	.word	0x0800601b
 8005ed0:	08005f3d 	.word	0x08005f3d
 8005ed4:	08005ffd 	.word	0x08005ffd
 8005ed8:	08005e89 	.word	0x08005e89
 8005edc:	08005e89 	.word	0x08005e89
 8005ee0:	0800603d 	.word	0x0800603d
 8005ee4:	08005e89 	.word	0x08005e89
 8005ee8:	08005f3d 	.word	0x08005f3d
 8005eec:	08005e89 	.word	0x08005e89
 8005ef0:	08005e89 	.word	0x08005e89
 8005ef4:	08006005 	.word	0x08006005
 8005ef8:	682b      	ldr	r3, [r5, #0]
 8005efa:	1d1a      	adds	r2, r3, #4
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	602a      	str	r2, [r5, #0]
 8005f00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f04:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005f08:	2301      	movs	r3, #1
 8005f0a:	e0a4      	b.n	8006056 <_printf_i+0x1f6>
 8005f0c:	6820      	ldr	r0, [r4, #0]
 8005f0e:	6829      	ldr	r1, [r5, #0]
 8005f10:	0606      	lsls	r6, r0, #24
 8005f12:	f101 0304 	add.w	r3, r1, #4
 8005f16:	d50a      	bpl.n	8005f2e <_printf_i+0xce>
 8005f18:	680e      	ldr	r6, [r1, #0]
 8005f1a:	602b      	str	r3, [r5, #0]
 8005f1c:	2e00      	cmp	r6, #0
 8005f1e:	da03      	bge.n	8005f28 <_printf_i+0xc8>
 8005f20:	232d      	movs	r3, #45	; 0x2d
 8005f22:	4276      	negs	r6, r6
 8005f24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f28:	230a      	movs	r3, #10
 8005f2a:	485e      	ldr	r0, [pc, #376]	; (80060a4 <_printf_i+0x244>)
 8005f2c:	e019      	b.n	8005f62 <_printf_i+0x102>
 8005f2e:	680e      	ldr	r6, [r1, #0]
 8005f30:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005f34:	602b      	str	r3, [r5, #0]
 8005f36:	bf18      	it	ne
 8005f38:	b236      	sxthne	r6, r6
 8005f3a:	e7ef      	b.n	8005f1c <_printf_i+0xbc>
 8005f3c:	682b      	ldr	r3, [r5, #0]
 8005f3e:	6820      	ldr	r0, [r4, #0]
 8005f40:	1d19      	adds	r1, r3, #4
 8005f42:	6029      	str	r1, [r5, #0]
 8005f44:	0601      	lsls	r1, r0, #24
 8005f46:	d501      	bpl.n	8005f4c <_printf_i+0xec>
 8005f48:	681e      	ldr	r6, [r3, #0]
 8005f4a:	e002      	b.n	8005f52 <_printf_i+0xf2>
 8005f4c:	0646      	lsls	r6, r0, #25
 8005f4e:	d5fb      	bpl.n	8005f48 <_printf_i+0xe8>
 8005f50:	881e      	ldrh	r6, [r3, #0]
 8005f52:	2f6f      	cmp	r7, #111	; 0x6f
 8005f54:	bf0c      	ite	eq
 8005f56:	2308      	moveq	r3, #8
 8005f58:	230a      	movne	r3, #10
 8005f5a:	4852      	ldr	r0, [pc, #328]	; (80060a4 <_printf_i+0x244>)
 8005f5c:	2100      	movs	r1, #0
 8005f5e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005f62:	6865      	ldr	r5, [r4, #4]
 8005f64:	2d00      	cmp	r5, #0
 8005f66:	bfa8      	it	ge
 8005f68:	6821      	ldrge	r1, [r4, #0]
 8005f6a:	60a5      	str	r5, [r4, #8]
 8005f6c:	bfa4      	itt	ge
 8005f6e:	f021 0104 	bicge.w	r1, r1, #4
 8005f72:	6021      	strge	r1, [r4, #0]
 8005f74:	b90e      	cbnz	r6, 8005f7a <_printf_i+0x11a>
 8005f76:	2d00      	cmp	r5, #0
 8005f78:	d04d      	beq.n	8006016 <_printf_i+0x1b6>
 8005f7a:	4615      	mov	r5, r2
 8005f7c:	fbb6 f1f3 	udiv	r1, r6, r3
 8005f80:	fb03 6711 	mls	r7, r3, r1, r6
 8005f84:	5dc7      	ldrb	r7, [r0, r7]
 8005f86:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005f8a:	4637      	mov	r7, r6
 8005f8c:	42bb      	cmp	r3, r7
 8005f8e:	460e      	mov	r6, r1
 8005f90:	d9f4      	bls.n	8005f7c <_printf_i+0x11c>
 8005f92:	2b08      	cmp	r3, #8
 8005f94:	d10b      	bne.n	8005fae <_printf_i+0x14e>
 8005f96:	6823      	ldr	r3, [r4, #0]
 8005f98:	07de      	lsls	r6, r3, #31
 8005f9a:	d508      	bpl.n	8005fae <_printf_i+0x14e>
 8005f9c:	6923      	ldr	r3, [r4, #16]
 8005f9e:	6861      	ldr	r1, [r4, #4]
 8005fa0:	4299      	cmp	r1, r3
 8005fa2:	bfde      	ittt	le
 8005fa4:	2330      	movle	r3, #48	; 0x30
 8005fa6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005faa:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005fae:	1b52      	subs	r2, r2, r5
 8005fb0:	6122      	str	r2, [r4, #16]
 8005fb2:	464b      	mov	r3, r9
 8005fb4:	4621      	mov	r1, r4
 8005fb6:	4640      	mov	r0, r8
 8005fb8:	f8cd a000 	str.w	sl, [sp]
 8005fbc:	aa03      	add	r2, sp, #12
 8005fbe:	f7ff fedf 	bl	8005d80 <_printf_common>
 8005fc2:	3001      	adds	r0, #1
 8005fc4:	d14c      	bne.n	8006060 <_printf_i+0x200>
 8005fc6:	f04f 30ff 	mov.w	r0, #4294967295
 8005fca:	b004      	add	sp, #16
 8005fcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fd0:	4834      	ldr	r0, [pc, #208]	; (80060a4 <_printf_i+0x244>)
 8005fd2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005fd6:	6829      	ldr	r1, [r5, #0]
 8005fd8:	6823      	ldr	r3, [r4, #0]
 8005fda:	f851 6b04 	ldr.w	r6, [r1], #4
 8005fde:	6029      	str	r1, [r5, #0]
 8005fe0:	061d      	lsls	r5, r3, #24
 8005fe2:	d514      	bpl.n	800600e <_printf_i+0x1ae>
 8005fe4:	07df      	lsls	r7, r3, #31
 8005fe6:	bf44      	itt	mi
 8005fe8:	f043 0320 	orrmi.w	r3, r3, #32
 8005fec:	6023      	strmi	r3, [r4, #0]
 8005fee:	b91e      	cbnz	r6, 8005ff8 <_printf_i+0x198>
 8005ff0:	6823      	ldr	r3, [r4, #0]
 8005ff2:	f023 0320 	bic.w	r3, r3, #32
 8005ff6:	6023      	str	r3, [r4, #0]
 8005ff8:	2310      	movs	r3, #16
 8005ffa:	e7af      	b.n	8005f5c <_printf_i+0xfc>
 8005ffc:	6823      	ldr	r3, [r4, #0]
 8005ffe:	f043 0320 	orr.w	r3, r3, #32
 8006002:	6023      	str	r3, [r4, #0]
 8006004:	2378      	movs	r3, #120	; 0x78
 8006006:	4828      	ldr	r0, [pc, #160]	; (80060a8 <_printf_i+0x248>)
 8006008:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800600c:	e7e3      	b.n	8005fd6 <_printf_i+0x176>
 800600e:	0659      	lsls	r1, r3, #25
 8006010:	bf48      	it	mi
 8006012:	b2b6      	uxthmi	r6, r6
 8006014:	e7e6      	b.n	8005fe4 <_printf_i+0x184>
 8006016:	4615      	mov	r5, r2
 8006018:	e7bb      	b.n	8005f92 <_printf_i+0x132>
 800601a:	682b      	ldr	r3, [r5, #0]
 800601c:	6826      	ldr	r6, [r4, #0]
 800601e:	1d18      	adds	r0, r3, #4
 8006020:	6961      	ldr	r1, [r4, #20]
 8006022:	6028      	str	r0, [r5, #0]
 8006024:	0635      	lsls	r5, r6, #24
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	d501      	bpl.n	800602e <_printf_i+0x1ce>
 800602a:	6019      	str	r1, [r3, #0]
 800602c:	e002      	b.n	8006034 <_printf_i+0x1d4>
 800602e:	0670      	lsls	r0, r6, #25
 8006030:	d5fb      	bpl.n	800602a <_printf_i+0x1ca>
 8006032:	8019      	strh	r1, [r3, #0]
 8006034:	2300      	movs	r3, #0
 8006036:	4615      	mov	r5, r2
 8006038:	6123      	str	r3, [r4, #16]
 800603a:	e7ba      	b.n	8005fb2 <_printf_i+0x152>
 800603c:	682b      	ldr	r3, [r5, #0]
 800603e:	2100      	movs	r1, #0
 8006040:	1d1a      	adds	r2, r3, #4
 8006042:	602a      	str	r2, [r5, #0]
 8006044:	681d      	ldr	r5, [r3, #0]
 8006046:	6862      	ldr	r2, [r4, #4]
 8006048:	4628      	mov	r0, r5
 800604a:	f000 fb13 	bl	8006674 <memchr>
 800604e:	b108      	cbz	r0, 8006054 <_printf_i+0x1f4>
 8006050:	1b40      	subs	r0, r0, r5
 8006052:	6060      	str	r0, [r4, #4]
 8006054:	6863      	ldr	r3, [r4, #4]
 8006056:	6123      	str	r3, [r4, #16]
 8006058:	2300      	movs	r3, #0
 800605a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800605e:	e7a8      	b.n	8005fb2 <_printf_i+0x152>
 8006060:	462a      	mov	r2, r5
 8006062:	4649      	mov	r1, r9
 8006064:	4640      	mov	r0, r8
 8006066:	6923      	ldr	r3, [r4, #16]
 8006068:	47d0      	blx	sl
 800606a:	3001      	adds	r0, #1
 800606c:	d0ab      	beq.n	8005fc6 <_printf_i+0x166>
 800606e:	6823      	ldr	r3, [r4, #0]
 8006070:	079b      	lsls	r3, r3, #30
 8006072:	d413      	bmi.n	800609c <_printf_i+0x23c>
 8006074:	68e0      	ldr	r0, [r4, #12]
 8006076:	9b03      	ldr	r3, [sp, #12]
 8006078:	4298      	cmp	r0, r3
 800607a:	bfb8      	it	lt
 800607c:	4618      	movlt	r0, r3
 800607e:	e7a4      	b.n	8005fca <_printf_i+0x16a>
 8006080:	2301      	movs	r3, #1
 8006082:	4632      	mov	r2, r6
 8006084:	4649      	mov	r1, r9
 8006086:	4640      	mov	r0, r8
 8006088:	47d0      	blx	sl
 800608a:	3001      	adds	r0, #1
 800608c:	d09b      	beq.n	8005fc6 <_printf_i+0x166>
 800608e:	3501      	adds	r5, #1
 8006090:	68e3      	ldr	r3, [r4, #12]
 8006092:	9903      	ldr	r1, [sp, #12]
 8006094:	1a5b      	subs	r3, r3, r1
 8006096:	42ab      	cmp	r3, r5
 8006098:	dcf2      	bgt.n	8006080 <_printf_i+0x220>
 800609a:	e7eb      	b.n	8006074 <_printf_i+0x214>
 800609c:	2500      	movs	r5, #0
 800609e:	f104 0619 	add.w	r6, r4, #25
 80060a2:	e7f5      	b.n	8006090 <_printf_i+0x230>
 80060a4:	08006c9a 	.word	0x08006c9a
 80060a8:	08006cab 	.word	0x08006cab

080060ac <__swbuf_r>:
 80060ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060ae:	460e      	mov	r6, r1
 80060b0:	4614      	mov	r4, r2
 80060b2:	4605      	mov	r5, r0
 80060b4:	b118      	cbz	r0, 80060be <__swbuf_r+0x12>
 80060b6:	6983      	ldr	r3, [r0, #24]
 80060b8:	b90b      	cbnz	r3, 80060be <__swbuf_r+0x12>
 80060ba:	f000 f9d5 	bl	8006468 <__sinit>
 80060be:	4b21      	ldr	r3, [pc, #132]	; (8006144 <__swbuf_r+0x98>)
 80060c0:	429c      	cmp	r4, r3
 80060c2:	d12b      	bne.n	800611c <__swbuf_r+0x70>
 80060c4:	686c      	ldr	r4, [r5, #4]
 80060c6:	69a3      	ldr	r3, [r4, #24]
 80060c8:	60a3      	str	r3, [r4, #8]
 80060ca:	89a3      	ldrh	r3, [r4, #12]
 80060cc:	071a      	lsls	r2, r3, #28
 80060ce:	d52f      	bpl.n	8006130 <__swbuf_r+0x84>
 80060d0:	6923      	ldr	r3, [r4, #16]
 80060d2:	b36b      	cbz	r3, 8006130 <__swbuf_r+0x84>
 80060d4:	6923      	ldr	r3, [r4, #16]
 80060d6:	6820      	ldr	r0, [r4, #0]
 80060d8:	b2f6      	uxtb	r6, r6
 80060da:	1ac0      	subs	r0, r0, r3
 80060dc:	6963      	ldr	r3, [r4, #20]
 80060de:	4637      	mov	r7, r6
 80060e0:	4283      	cmp	r3, r0
 80060e2:	dc04      	bgt.n	80060ee <__swbuf_r+0x42>
 80060e4:	4621      	mov	r1, r4
 80060e6:	4628      	mov	r0, r5
 80060e8:	f000 f92a 	bl	8006340 <_fflush_r>
 80060ec:	bb30      	cbnz	r0, 800613c <__swbuf_r+0x90>
 80060ee:	68a3      	ldr	r3, [r4, #8]
 80060f0:	3001      	adds	r0, #1
 80060f2:	3b01      	subs	r3, #1
 80060f4:	60a3      	str	r3, [r4, #8]
 80060f6:	6823      	ldr	r3, [r4, #0]
 80060f8:	1c5a      	adds	r2, r3, #1
 80060fa:	6022      	str	r2, [r4, #0]
 80060fc:	701e      	strb	r6, [r3, #0]
 80060fe:	6963      	ldr	r3, [r4, #20]
 8006100:	4283      	cmp	r3, r0
 8006102:	d004      	beq.n	800610e <__swbuf_r+0x62>
 8006104:	89a3      	ldrh	r3, [r4, #12]
 8006106:	07db      	lsls	r3, r3, #31
 8006108:	d506      	bpl.n	8006118 <__swbuf_r+0x6c>
 800610a:	2e0a      	cmp	r6, #10
 800610c:	d104      	bne.n	8006118 <__swbuf_r+0x6c>
 800610e:	4621      	mov	r1, r4
 8006110:	4628      	mov	r0, r5
 8006112:	f000 f915 	bl	8006340 <_fflush_r>
 8006116:	b988      	cbnz	r0, 800613c <__swbuf_r+0x90>
 8006118:	4638      	mov	r0, r7
 800611a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800611c:	4b0a      	ldr	r3, [pc, #40]	; (8006148 <__swbuf_r+0x9c>)
 800611e:	429c      	cmp	r4, r3
 8006120:	d101      	bne.n	8006126 <__swbuf_r+0x7a>
 8006122:	68ac      	ldr	r4, [r5, #8]
 8006124:	e7cf      	b.n	80060c6 <__swbuf_r+0x1a>
 8006126:	4b09      	ldr	r3, [pc, #36]	; (800614c <__swbuf_r+0xa0>)
 8006128:	429c      	cmp	r4, r3
 800612a:	bf08      	it	eq
 800612c:	68ec      	ldreq	r4, [r5, #12]
 800612e:	e7ca      	b.n	80060c6 <__swbuf_r+0x1a>
 8006130:	4621      	mov	r1, r4
 8006132:	4628      	mov	r0, r5
 8006134:	f000 f80c 	bl	8006150 <__swsetup_r>
 8006138:	2800      	cmp	r0, #0
 800613a:	d0cb      	beq.n	80060d4 <__swbuf_r+0x28>
 800613c:	f04f 37ff 	mov.w	r7, #4294967295
 8006140:	e7ea      	b.n	8006118 <__swbuf_r+0x6c>
 8006142:	bf00      	nop
 8006144:	08006cdc 	.word	0x08006cdc
 8006148:	08006cfc 	.word	0x08006cfc
 800614c:	08006cbc 	.word	0x08006cbc

08006150 <__swsetup_r>:
 8006150:	4b32      	ldr	r3, [pc, #200]	; (800621c <__swsetup_r+0xcc>)
 8006152:	b570      	push	{r4, r5, r6, lr}
 8006154:	681d      	ldr	r5, [r3, #0]
 8006156:	4606      	mov	r6, r0
 8006158:	460c      	mov	r4, r1
 800615a:	b125      	cbz	r5, 8006166 <__swsetup_r+0x16>
 800615c:	69ab      	ldr	r3, [r5, #24]
 800615e:	b913      	cbnz	r3, 8006166 <__swsetup_r+0x16>
 8006160:	4628      	mov	r0, r5
 8006162:	f000 f981 	bl	8006468 <__sinit>
 8006166:	4b2e      	ldr	r3, [pc, #184]	; (8006220 <__swsetup_r+0xd0>)
 8006168:	429c      	cmp	r4, r3
 800616a:	d10f      	bne.n	800618c <__swsetup_r+0x3c>
 800616c:	686c      	ldr	r4, [r5, #4]
 800616e:	89a3      	ldrh	r3, [r4, #12]
 8006170:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006174:	0719      	lsls	r1, r3, #28
 8006176:	d42c      	bmi.n	80061d2 <__swsetup_r+0x82>
 8006178:	06dd      	lsls	r5, r3, #27
 800617a:	d411      	bmi.n	80061a0 <__swsetup_r+0x50>
 800617c:	2309      	movs	r3, #9
 800617e:	6033      	str	r3, [r6, #0]
 8006180:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006184:	f04f 30ff 	mov.w	r0, #4294967295
 8006188:	81a3      	strh	r3, [r4, #12]
 800618a:	e03e      	b.n	800620a <__swsetup_r+0xba>
 800618c:	4b25      	ldr	r3, [pc, #148]	; (8006224 <__swsetup_r+0xd4>)
 800618e:	429c      	cmp	r4, r3
 8006190:	d101      	bne.n	8006196 <__swsetup_r+0x46>
 8006192:	68ac      	ldr	r4, [r5, #8]
 8006194:	e7eb      	b.n	800616e <__swsetup_r+0x1e>
 8006196:	4b24      	ldr	r3, [pc, #144]	; (8006228 <__swsetup_r+0xd8>)
 8006198:	429c      	cmp	r4, r3
 800619a:	bf08      	it	eq
 800619c:	68ec      	ldreq	r4, [r5, #12]
 800619e:	e7e6      	b.n	800616e <__swsetup_r+0x1e>
 80061a0:	0758      	lsls	r0, r3, #29
 80061a2:	d512      	bpl.n	80061ca <__swsetup_r+0x7a>
 80061a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80061a6:	b141      	cbz	r1, 80061ba <__swsetup_r+0x6a>
 80061a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80061ac:	4299      	cmp	r1, r3
 80061ae:	d002      	beq.n	80061b6 <__swsetup_r+0x66>
 80061b0:	4630      	mov	r0, r6
 80061b2:	f7ff fc45 	bl	8005a40 <_free_r>
 80061b6:	2300      	movs	r3, #0
 80061b8:	6363      	str	r3, [r4, #52]	; 0x34
 80061ba:	89a3      	ldrh	r3, [r4, #12]
 80061bc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80061c0:	81a3      	strh	r3, [r4, #12]
 80061c2:	2300      	movs	r3, #0
 80061c4:	6063      	str	r3, [r4, #4]
 80061c6:	6923      	ldr	r3, [r4, #16]
 80061c8:	6023      	str	r3, [r4, #0]
 80061ca:	89a3      	ldrh	r3, [r4, #12]
 80061cc:	f043 0308 	orr.w	r3, r3, #8
 80061d0:	81a3      	strh	r3, [r4, #12]
 80061d2:	6923      	ldr	r3, [r4, #16]
 80061d4:	b94b      	cbnz	r3, 80061ea <__swsetup_r+0x9a>
 80061d6:	89a3      	ldrh	r3, [r4, #12]
 80061d8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80061dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061e0:	d003      	beq.n	80061ea <__swsetup_r+0x9a>
 80061e2:	4621      	mov	r1, r4
 80061e4:	4630      	mov	r0, r6
 80061e6:	f000 fa05 	bl	80065f4 <__smakebuf_r>
 80061ea:	89a0      	ldrh	r0, [r4, #12]
 80061ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80061f0:	f010 0301 	ands.w	r3, r0, #1
 80061f4:	d00a      	beq.n	800620c <__swsetup_r+0xbc>
 80061f6:	2300      	movs	r3, #0
 80061f8:	60a3      	str	r3, [r4, #8]
 80061fa:	6963      	ldr	r3, [r4, #20]
 80061fc:	425b      	negs	r3, r3
 80061fe:	61a3      	str	r3, [r4, #24]
 8006200:	6923      	ldr	r3, [r4, #16]
 8006202:	b943      	cbnz	r3, 8006216 <__swsetup_r+0xc6>
 8006204:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006208:	d1ba      	bne.n	8006180 <__swsetup_r+0x30>
 800620a:	bd70      	pop	{r4, r5, r6, pc}
 800620c:	0781      	lsls	r1, r0, #30
 800620e:	bf58      	it	pl
 8006210:	6963      	ldrpl	r3, [r4, #20]
 8006212:	60a3      	str	r3, [r4, #8]
 8006214:	e7f4      	b.n	8006200 <__swsetup_r+0xb0>
 8006216:	2000      	movs	r0, #0
 8006218:	e7f7      	b.n	800620a <__swsetup_r+0xba>
 800621a:	bf00      	nop
 800621c:	2000000c 	.word	0x2000000c
 8006220:	08006cdc 	.word	0x08006cdc
 8006224:	08006cfc 	.word	0x08006cfc
 8006228:	08006cbc 	.word	0x08006cbc

0800622c <abort>:
 800622c:	2006      	movs	r0, #6
 800622e:	b508      	push	{r3, lr}
 8006230:	f000 fa56 	bl	80066e0 <raise>
 8006234:	2001      	movs	r0, #1
 8006236:	f7fb fc68 	bl	8001b0a <_exit>
	...

0800623c <__sflush_r>:
 800623c:	898a      	ldrh	r2, [r1, #12]
 800623e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006240:	4605      	mov	r5, r0
 8006242:	0710      	lsls	r0, r2, #28
 8006244:	460c      	mov	r4, r1
 8006246:	d457      	bmi.n	80062f8 <__sflush_r+0xbc>
 8006248:	684b      	ldr	r3, [r1, #4]
 800624a:	2b00      	cmp	r3, #0
 800624c:	dc04      	bgt.n	8006258 <__sflush_r+0x1c>
 800624e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006250:	2b00      	cmp	r3, #0
 8006252:	dc01      	bgt.n	8006258 <__sflush_r+0x1c>
 8006254:	2000      	movs	r0, #0
 8006256:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006258:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800625a:	2e00      	cmp	r6, #0
 800625c:	d0fa      	beq.n	8006254 <__sflush_r+0x18>
 800625e:	2300      	movs	r3, #0
 8006260:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006264:	682f      	ldr	r7, [r5, #0]
 8006266:	602b      	str	r3, [r5, #0]
 8006268:	d032      	beq.n	80062d0 <__sflush_r+0x94>
 800626a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800626c:	89a3      	ldrh	r3, [r4, #12]
 800626e:	075a      	lsls	r2, r3, #29
 8006270:	d505      	bpl.n	800627e <__sflush_r+0x42>
 8006272:	6863      	ldr	r3, [r4, #4]
 8006274:	1ac0      	subs	r0, r0, r3
 8006276:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006278:	b10b      	cbz	r3, 800627e <__sflush_r+0x42>
 800627a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800627c:	1ac0      	subs	r0, r0, r3
 800627e:	2300      	movs	r3, #0
 8006280:	4602      	mov	r2, r0
 8006282:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006284:	4628      	mov	r0, r5
 8006286:	6a21      	ldr	r1, [r4, #32]
 8006288:	47b0      	blx	r6
 800628a:	1c43      	adds	r3, r0, #1
 800628c:	89a3      	ldrh	r3, [r4, #12]
 800628e:	d106      	bne.n	800629e <__sflush_r+0x62>
 8006290:	6829      	ldr	r1, [r5, #0]
 8006292:	291d      	cmp	r1, #29
 8006294:	d82c      	bhi.n	80062f0 <__sflush_r+0xb4>
 8006296:	4a29      	ldr	r2, [pc, #164]	; (800633c <__sflush_r+0x100>)
 8006298:	40ca      	lsrs	r2, r1
 800629a:	07d6      	lsls	r6, r2, #31
 800629c:	d528      	bpl.n	80062f0 <__sflush_r+0xb4>
 800629e:	2200      	movs	r2, #0
 80062a0:	6062      	str	r2, [r4, #4]
 80062a2:	6922      	ldr	r2, [r4, #16]
 80062a4:	04d9      	lsls	r1, r3, #19
 80062a6:	6022      	str	r2, [r4, #0]
 80062a8:	d504      	bpl.n	80062b4 <__sflush_r+0x78>
 80062aa:	1c42      	adds	r2, r0, #1
 80062ac:	d101      	bne.n	80062b2 <__sflush_r+0x76>
 80062ae:	682b      	ldr	r3, [r5, #0]
 80062b0:	b903      	cbnz	r3, 80062b4 <__sflush_r+0x78>
 80062b2:	6560      	str	r0, [r4, #84]	; 0x54
 80062b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80062b6:	602f      	str	r7, [r5, #0]
 80062b8:	2900      	cmp	r1, #0
 80062ba:	d0cb      	beq.n	8006254 <__sflush_r+0x18>
 80062bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80062c0:	4299      	cmp	r1, r3
 80062c2:	d002      	beq.n	80062ca <__sflush_r+0x8e>
 80062c4:	4628      	mov	r0, r5
 80062c6:	f7ff fbbb 	bl	8005a40 <_free_r>
 80062ca:	2000      	movs	r0, #0
 80062cc:	6360      	str	r0, [r4, #52]	; 0x34
 80062ce:	e7c2      	b.n	8006256 <__sflush_r+0x1a>
 80062d0:	6a21      	ldr	r1, [r4, #32]
 80062d2:	2301      	movs	r3, #1
 80062d4:	4628      	mov	r0, r5
 80062d6:	47b0      	blx	r6
 80062d8:	1c41      	adds	r1, r0, #1
 80062da:	d1c7      	bne.n	800626c <__sflush_r+0x30>
 80062dc:	682b      	ldr	r3, [r5, #0]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d0c4      	beq.n	800626c <__sflush_r+0x30>
 80062e2:	2b1d      	cmp	r3, #29
 80062e4:	d001      	beq.n	80062ea <__sflush_r+0xae>
 80062e6:	2b16      	cmp	r3, #22
 80062e8:	d101      	bne.n	80062ee <__sflush_r+0xb2>
 80062ea:	602f      	str	r7, [r5, #0]
 80062ec:	e7b2      	b.n	8006254 <__sflush_r+0x18>
 80062ee:	89a3      	ldrh	r3, [r4, #12]
 80062f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80062f4:	81a3      	strh	r3, [r4, #12]
 80062f6:	e7ae      	b.n	8006256 <__sflush_r+0x1a>
 80062f8:	690f      	ldr	r7, [r1, #16]
 80062fa:	2f00      	cmp	r7, #0
 80062fc:	d0aa      	beq.n	8006254 <__sflush_r+0x18>
 80062fe:	0793      	lsls	r3, r2, #30
 8006300:	bf18      	it	ne
 8006302:	2300      	movne	r3, #0
 8006304:	680e      	ldr	r6, [r1, #0]
 8006306:	bf08      	it	eq
 8006308:	694b      	ldreq	r3, [r1, #20]
 800630a:	1bf6      	subs	r6, r6, r7
 800630c:	600f      	str	r7, [r1, #0]
 800630e:	608b      	str	r3, [r1, #8]
 8006310:	2e00      	cmp	r6, #0
 8006312:	dd9f      	ble.n	8006254 <__sflush_r+0x18>
 8006314:	4633      	mov	r3, r6
 8006316:	463a      	mov	r2, r7
 8006318:	4628      	mov	r0, r5
 800631a:	6a21      	ldr	r1, [r4, #32]
 800631c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8006320:	47e0      	blx	ip
 8006322:	2800      	cmp	r0, #0
 8006324:	dc06      	bgt.n	8006334 <__sflush_r+0xf8>
 8006326:	89a3      	ldrh	r3, [r4, #12]
 8006328:	f04f 30ff 	mov.w	r0, #4294967295
 800632c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006330:	81a3      	strh	r3, [r4, #12]
 8006332:	e790      	b.n	8006256 <__sflush_r+0x1a>
 8006334:	4407      	add	r7, r0
 8006336:	1a36      	subs	r6, r6, r0
 8006338:	e7ea      	b.n	8006310 <__sflush_r+0xd4>
 800633a:	bf00      	nop
 800633c:	20400001 	.word	0x20400001

08006340 <_fflush_r>:
 8006340:	b538      	push	{r3, r4, r5, lr}
 8006342:	690b      	ldr	r3, [r1, #16]
 8006344:	4605      	mov	r5, r0
 8006346:	460c      	mov	r4, r1
 8006348:	b913      	cbnz	r3, 8006350 <_fflush_r+0x10>
 800634a:	2500      	movs	r5, #0
 800634c:	4628      	mov	r0, r5
 800634e:	bd38      	pop	{r3, r4, r5, pc}
 8006350:	b118      	cbz	r0, 800635a <_fflush_r+0x1a>
 8006352:	6983      	ldr	r3, [r0, #24]
 8006354:	b90b      	cbnz	r3, 800635a <_fflush_r+0x1a>
 8006356:	f000 f887 	bl	8006468 <__sinit>
 800635a:	4b14      	ldr	r3, [pc, #80]	; (80063ac <_fflush_r+0x6c>)
 800635c:	429c      	cmp	r4, r3
 800635e:	d11b      	bne.n	8006398 <_fflush_r+0x58>
 8006360:	686c      	ldr	r4, [r5, #4]
 8006362:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d0ef      	beq.n	800634a <_fflush_r+0xa>
 800636a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800636c:	07d0      	lsls	r0, r2, #31
 800636e:	d404      	bmi.n	800637a <_fflush_r+0x3a>
 8006370:	0599      	lsls	r1, r3, #22
 8006372:	d402      	bmi.n	800637a <_fflush_r+0x3a>
 8006374:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006376:	f000 f915 	bl	80065a4 <__retarget_lock_acquire_recursive>
 800637a:	4628      	mov	r0, r5
 800637c:	4621      	mov	r1, r4
 800637e:	f7ff ff5d 	bl	800623c <__sflush_r>
 8006382:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006384:	4605      	mov	r5, r0
 8006386:	07da      	lsls	r2, r3, #31
 8006388:	d4e0      	bmi.n	800634c <_fflush_r+0xc>
 800638a:	89a3      	ldrh	r3, [r4, #12]
 800638c:	059b      	lsls	r3, r3, #22
 800638e:	d4dd      	bmi.n	800634c <_fflush_r+0xc>
 8006390:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006392:	f000 f908 	bl	80065a6 <__retarget_lock_release_recursive>
 8006396:	e7d9      	b.n	800634c <_fflush_r+0xc>
 8006398:	4b05      	ldr	r3, [pc, #20]	; (80063b0 <_fflush_r+0x70>)
 800639a:	429c      	cmp	r4, r3
 800639c:	d101      	bne.n	80063a2 <_fflush_r+0x62>
 800639e:	68ac      	ldr	r4, [r5, #8]
 80063a0:	e7df      	b.n	8006362 <_fflush_r+0x22>
 80063a2:	4b04      	ldr	r3, [pc, #16]	; (80063b4 <_fflush_r+0x74>)
 80063a4:	429c      	cmp	r4, r3
 80063a6:	bf08      	it	eq
 80063a8:	68ec      	ldreq	r4, [r5, #12]
 80063aa:	e7da      	b.n	8006362 <_fflush_r+0x22>
 80063ac:	08006cdc 	.word	0x08006cdc
 80063b0:	08006cfc 	.word	0x08006cfc
 80063b4:	08006cbc 	.word	0x08006cbc

080063b8 <std>:
 80063b8:	2300      	movs	r3, #0
 80063ba:	b510      	push	{r4, lr}
 80063bc:	4604      	mov	r4, r0
 80063be:	e9c0 3300 	strd	r3, r3, [r0]
 80063c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80063c6:	6083      	str	r3, [r0, #8]
 80063c8:	8181      	strh	r1, [r0, #12]
 80063ca:	6643      	str	r3, [r0, #100]	; 0x64
 80063cc:	81c2      	strh	r2, [r0, #14]
 80063ce:	6183      	str	r3, [r0, #24]
 80063d0:	4619      	mov	r1, r3
 80063d2:	2208      	movs	r2, #8
 80063d4:	305c      	adds	r0, #92	; 0x5c
 80063d6:	f7fd fbbf 	bl	8003b58 <memset>
 80063da:	4b05      	ldr	r3, [pc, #20]	; (80063f0 <std+0x38>)
 80063dc:	6224      	str	r4, [r4, #32]
 80063de:	6263      	str	r3, [r4, #36]	; 0x24
 80063e0:	4b04      	ldr	r3, [pc, #16]	; (80063f4 <std+0x3c>)
 80063e2:	62a3      	str	r3, [r4, #40]	; 0x28
 80063e4:	4b04      	ldr	r3, [pc, #16]	; (80063f8 <std+0x40>)
 80063e6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80063e8:	4b04      	ldr	r3, [pc, #16]	; (80063fc <std+0x44>)
 80063ea:	6323      	str	r3, [r4, #48]	; 0x30
 80063ec:	bd10      	pop	{r4, pc}
 80063ee:	bf00      	nop
 80063f0:	08006719 	.word	0x08006719
 80063f4:	0800673b 	.word	0x0800673b
 80063f8:	08006773 	.word	0x08006773
 80063fc:	08006797 	.word	0x08006797

08006400 <_cleanup_r>:
 8006400:	4901      	ldr	r1, [pc, #4]	; (8006408 <_cleanup_r+0x8>)
 8006402:	f000 b8af 	b.w	8006564 <_fwalk_reent>
 8006406:	bf00      	nop
 8006408:	08006341 	.word	0x08006341

0800640c <__sfmoreglue>:
 800640c:	2268      	movs	r2, #104	; 0x68
 800640e:	b570      	push	{r4, r5, r6, lr}
 8006410:	1e4d      	subs	r5, r1, #1
 8006412:	4355      	muls	r5, r2
 8006414:	460e      	mov	r6, r1
 8006416:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800641a:	f7ff fa35 	bl	8005888 <_malloc_r>
 800641e:	4604      	mov	r4, r0
 8006420:	b140      	cbz	r0, 8006434 <__sfmoreglue+0x28>
 8006422:	2100      	movs	r1, #0
 8006424:	e9c0 1600 	strd	r1, r6, [r0]
 8006428:	300c      	adds	r0, #12
 800642a:	60a0      	str	r0, [r4, #8]
 800642c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006430:	f7fd fb92 	bl	8003b58 <memset>
 8006434:	4620      	mov	r0, r4
 8006436:	bd70      	pop	{r4, r5, r6, pc}

08006438 <__sfp_lock_acquire>:
 8006438:	4801      	ldr	r0, [pc, #4]	; (8006440 <__sfp_lock_acquire+0x8>)
 800643a:	f000 b8b3 	b.w	80065a4 <__retarget_lock_acquire_recursive>
 800643e:	bf00      	nop
 8006440:	2000041d 	.word	0x2000041d

08006444 <__sfp_lock_release>:
 8006444:	4801      	ldr	r0, [pc, #4]	; (800644c <__sfp_lock_release+0x8>)
 8006446:	f000 b8ae 	b.w	80065a6 <__retarget_lock_release_recursive>
 800644a:	bf00      	nop
 800644c:	2000041d 	.word	0x2000041d

08006450 <__sinit_lock_acquire>:
 8006450:	4801      	ldr	r0, [pc, #4]	; (8006458 <__sinit_lock_acquire+0x8>)
 8006452:	f000 b8a7 	b.w	80065a4 <__retarget_lock_acquire_recursive>
 8006456:	bf00      	nop
 8006458:	2000041e 	.word	0x2000041e

0800645c <__sinit_lock_release>:
 800645c:	4801      	ldr	r0, [pc, #4]	; (8006464 <__sinit_lock_release+0x8>)
 800645e:	f000 b8a2 	b.w	80065a6 <__retarget_lock_release_recursive>
 8006462:	bf00      	nop
 8006464:	2000041e 	.word	0x2000041e

08006468 <__sinit>:
 8006468:	b510      	push	{r4, lr}
 800646a:	4604      	mov	r4, r0
 800646c:	f7ff fff0 	bl	8006450 <__sinit_lock_acquire>
 8006470:	69a3      	ldr	r3, [r4, #24]
 8006472:	b11b      	cbz	r3, 800647c <__sinit+0x14>
 8006474:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006478:	f7ff bff0 	b.w	800645c <__sinit_lock_release>
 800647c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006480:	6523      	str	r3, [r4, #80]	; 0x50
 8006482:	4b13      	ldr	r3, [pc, #76]	; (80064d0 <__sinit+0x68>)
 8006484:	4a13      	ldr	r2, [pc, #76]	; (80064d4 <__sinit+0x6c>)
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	62a2      	str	r2, [r4, #40]	; 0x28
 800648a:	42a3      	cmp	r3, r4
 800648c:	bf08      	it	eq
 800648e:	2301      	moveq	r3, #1
 8006490:	4620      	mov	r0, r4
 8006492:	bf08      	it	eq
 8006494:	61a3      	streq	r3, [r4, #24]
 8006496:	f000 f81f 	bl	80064d8 <__sfp>
 800649a:	6060      	str	r0, [r4, #4]
 800649c:	4620      	mov	r0, r4
 800649e:	f000 f81b 	bl	80064d8 <__sfp>
 80064a2:	60a0      	str	r0, [r4, #8]
 80064a4:	4620      	mov	r0, r4
 80064a6:	f000 f817 	bl	80064d8 <__sfp>
 80064aa:	2200      	movs	r2, #0
 80064ac:	2104      	movs	r1, #4
 80064ae:	60e0      	str	r0, [r4, #12]
 80064b0:	6860      	ldr	r0, [r4, #4]
 80064b2:	f7ff ff81 	bl	80063b8 <std>
 80064b6:	2201      	movs	r2, #1
 80064b8:	2109      	movs	r1, #9
 80064ba:	68a0      	ldr	r0, [r4, #8]
 80064bc:	f7ff ff7c 	bl	80063b8 <std>
 80064c0:	2202      	movs	r2, #2
 80064c2:	2112      	movs	r1, #18
 80064c4:	68e0      	ldr	r0, [r4, #12]
 80064c6:	f7ff ff77 	bl	80063b8 <std>
 80064ca:	2301      	movs	r3, #1
 80064cc:	61a3      	str	r3, [r4, #24]
 80064ce:	e7d1      	b.n	8006474 <__sinit+0xc>
 80064d0:	080068f0 	.word	0x080068f0
 80064d4:	08006401 	.word	0x08006401

080064d8 <__sfp>:
 80064d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064da:	4607      	mov	r7, r0
 80064dc:	f7ff ffac 	bl	8006438 <__sfp_lock_acquire>
 80064e0:	4b1e      	ldr	r3, [pc, #120]	; (800655c <__sfp+0x84>)
 80064e2:	681e      	ldr	r6, [r3, #0]
 80064e4:	69b3      	ldr	r3, [r6, #24]
 80064e6:	b913      	cbnz	r3, 80064ee <__sfp+0x16>
 80064e8:	4630      	mov	r0, r6
 80064ea:	f7ff ffbd 	bl	8006468 <__sinit>
 80064ee:	3648      	adds	r6, #72	; 0x48
 80064f0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80064f4:	3b01      	subs	r3, #1
 80064f6:	d503      	bpl.n	8006500 <__sfp+0x28>
 80064f8:	6833      	ldr	r3, [r6, #0]
 80064fa:	b30b      	cbz	r3, 8006540 <__sfp+0x68>
 80064fc:	6836      	ldr	r6, [r6, #0]
 80064fe:	e7f7      	b.n	80064f0 <__sfp+0x18>
 8006500:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006504:	b9d5      	cbnz	r5, 800653c <__sfp+0x64>
 8006506:	4b16      	ldr	r3, [pc, #88]	; (8006560 <__sfp+0x88>)
 8006508:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800650c:	60e3      	str	r3, [r4, #12]
 800650e:	6665      	str	r5, [r4, #100]	; 0x64
 8006510:	f000 f847 	bl	80065a2 <__retarget_lock_init_recursive>
 8006514:	f7ff ff96 	bl	8006444 <__sfp_lock_release>
 8006518:	2208      	movs	r2, #8
 800651a:	4629      	mov	r1, r5
 800651c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006520:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006524:	6025      	str	r5, [r4, #0]
 8006526:	61a5      	str	r5, [r4, #24]
 8006528:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800652c:	f7fd fb14 	bl	8003b58 <memset>
 8006530:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006534:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006538:	4620      	mov	r0, r4
 800653a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800653c:	3468      	adds	r4, #104	; 0x68
 800653e:	e7d9      	b.n	80064f4 <__sfp+0x1c>
 8006540:	2104      	movs	r1, #4
 8006542:	4638      	mov	r0, r7
 8006544:	f7ff ff62 	bl	800640c <__sfmoreglue>
 8006548:	4604      	mov	r4, r0
 800654a:	6030      	str	r0, [r6, #0]
 800654c:	2800      	cmp	r0, #0
 800654e:	d1d5      	bne.n	80064fc <__sfp+0x24>
 8006550:	f7ff ff78 	bl	8006444 <__sfp_lock_release>
 8006554:	230c      	movs	r3, #12
 8006556:	603b      	str	r3, [r7, #0]
 8006558:	e7ee      	b.n	8006538 <__sfp+0x60>
 800655a:	bf00      	nop
 800655c:	080068f0 	.word	0x080068f0
 8006560:	ffff0001 	.word	0xffff0001

08006564 <_fwalk_reent>:
 8006564:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006568:	4606      	mov	r6, r0
 800656a:	4688      	mov	r8, r1
 800656c:	2700      	movs	r7, #0
 800656e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006572:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006576:	f1b9 0901 	subs.w	r9, r9, #1
 800657a:	d505      	bpl.n	8006588 <_fwalk_reent+0x24>
 800657c:	6824      	ldr	r4, [r4, #0]
 800657e:	2c00      	cmp	r4, #0
 8006580:	d1f7      	bne.n	8006572 <_fwalk_reent+0xe>
 8006582:	4638      	mov	r0, r7
 8006584:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006588:	89ab      	ldrh	r3, [r5, #12]
 800658a:	2b01      	cmp	r3, #1
 800658c:	d907      	bls.n	800659e <_fwalk_reent+0x3a>
 800658e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006592:	3301      	adds	r3, #1
 8006594:	d003      	beq.n	800659e <_fwalk_reent+0x3a>
 8006596:	4629      	mov	r1, r5
 8006598:	4630      	mov	r0, r6
 800659a:	47c0      	blx	r8
 800659c:	4307      	orrs	r7, r0
 800659e:	3568      	adds	r5, #104	; 0x68
 80065a0:	e7e9      	b.n	8006576 <_fwalk_reent+0x12>

080065a2 <__retarget_lock_init_recursive>:
 80065a2:	4770      	bx	lr

080065a4 <__retarget_lock_acquire_recursive>:
 80065a4:	4770      	bx	lr

080065a6 <__retarget_lock_release_recursive>:
 80065a6:	4770      	bx	lr

080065a8 <__swhatbuf_r>:
 80065a8:	b570      	push	{r4, r5, r6, lr}
 80065aa:	460e      	mov	r6, r1
 80065ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065b0:	4614      	mov	r4, r2
 80065b2:	2900      	cmp	r1, #0
 80065b4:	461d      	mov	r5, r3
 80065b6:	b096      	sub	sp, #88	; 0x58
 80065b8:	da08      	bge.n	80065cc <__swhatbuf_r+0x24>
 80065ba:	2200      	movs	r2, #0
 80065bc:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80065c0:	602a      	str	r2, [r5, #0]
 80065c2:	061a      	lsls	r2, r3, #24
 80065c4:	d410      	bmi.n	80065e8 <__swhatbuf_r+0x40>
 80065c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80065ca:	e00e      	b.n	80065ea <__swhatbuf_r+0x42>
 80065cc:	466a      	mov	r2, sp
 80065ce:	f000 f909 	bl	80067e4 <_fstat_r>
 80065d2:	2800      	cmp	r0, #0
 80065d4:	dbf1      	blt.n	80065ba <__swhatbuf_r+0x12>
 80065d6:	9a01      	ldr	r2, [sp, #4]
 80065d8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80065dc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80065e0:	425a      	negs	r2, r3
 80065e2:	415a      	adcs	r2, r3
 80065e4:	602a      	str	r2, [r5, #0]
 80065e6:	e7ee      	b.n	80065c6 <__swhatbuf_r+0x1e>
 80065e8:	2340      	movs	r3, #64	; 0x40
 80065ea:	2000      	movs	r0, #0
 80065ec:	6023      	str	r3, [r4, #0]
 80065ee:	b016      	add	sp, #88	; 0x58
 80065f0:	bd70      	pop	{r4, r5, r6, pc}
	...

080065f4 <__smakebuf_r>:
 80065f4:	898b      	ldrh	r3, [r1, #12]
 80065f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80065f8:	079d      	lsls	r5, r3, #30
 80065fa:	4606      	mov	r6, r0
 80065fc:	460c      	mov	r4, r1
 80065fe:	d507      	bpl.n	8006610 <__smakebuf_r+0x1c>
 8006600:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006604:	6023      	str	r3, [r4, #0]
 8006606:	6123      	str	r3, [r4, #16]
 8006608:	2301      	movs	r3, #1
 800660a:	6163      	str	r3, [r4, #20]
 800660c:	b002      	add	sp, #8
 800660e:	bd70      	pop	{r4, r5, r6, pc}
 8006610:	466a      	mov	r2, sp
 8006612:	ab01      	add	r3, sp, #4
 8006614:	f7ff ffc8 	bl	80065a8 <__swhatbuf_r>
 8006618:	9900      	ldr	r1, [sp, #0]
 800661a:	4605      	mov	r5, r0
 800661c:	4630      	mov	r0, r6
 800661e:	f7ff f933 	bl	8005888 <_malloc_r>
 8006622:	b948      	cbnz	r0, 8006638 <__smakebuf_r+0x44>
 8006624:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006628:	059a      	lsls	r2, r3, #22
 800662a:	d4ef      	bmi.n	800660c <__smakebuf_r+0x18>
 800662c:	f023 0303 	bic.w	r3, r3, #3
 8006630:	f043 0302 	orr.w	r3, r3, #2
 8006634:	81a3      	strh	r3, [r4, #12]
 8006636:	e7e3      	b.n	8006600 <__smakebuf_r+0xc>
 8006638:	4b0d      	ldr	r3, [pc, #52]	; (8006670 <__smakebuf_r+0x7c>)
 800663a:	62b3      	str	r3, [r6, #40]	; 0x28
 800663c:	89a3      	ldrh	r3, [r4, #12]
 800663e:	6020      	str	r0, [r4, #0]
 8006640:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006644:	81a3      	strh	r3, [r4, #12]
 8006646:	9b00      	ldr	r3, [sp, #0]
 8006648:	6120      	str	r0, [r4, #16]
 800664a:	6163      	str	r3, [r4, #20]
 800664c:	9b01      	ldr	r3, [sp, #4]
 800664e:	b15b      	cbz	r3, 8006668 <__smakebuf_r+0x74>
 8006650:	4630      	mov	r0, r6
 8006652:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006656:	f000 f8d7 	bl	8006808 <_isatty_r>
 800665a:	b128      	cbz	r0, 8006668 <__smakebuf_r+0x74>
 800665c:	89a3      	ldrh	r3, [r4, #12]
 800665e:	f023 0303 	bic.w	r3, r3, #3
 8006662:	f043 0301 	orr.w	r3, r3, #1
 8006666:	81a3      	strh	r3, [r4, #12]
 8006668:	89a0      	ldrh	r0, [r4, #12]
 800666a:	4305      	orrs	r5, r0
 800666c:	81a5      	strh	r5, [r4, #12]
 800666e:	e7cd      	b.n	800660c <__smakebuf_r+0x18>
 8006670:	08006401 	.word	0x08006401

08006674 <memchr>:
 8006674:	4603      	mov	r3, r0
 8006676:	b510      	push	{r4, lr}
 8006678:	b2c9      	uxtb	r1, r1
 800667a:	4402      	add	r2, r0
 800667c:	4293      	cmp	r3, r2
 800667e:	4618      	mov	r0, r3
 8006680:	d101      	bne.n	8006686 <memchr+0x12>
 8006682:	2000      	movs	r0, #0
 8006684:	e003      	b.n	800668e <memchr+0x1a>
 8006686:	7804      	ldrb	r4, [r0, #0]
 8006688:	3301      	adds	r3, #1
 800668a:	428c      	cmp	r4, r1
 800668c:	d1f6      	bne.n	800667c <memchr+0x8>
 800668e:	bd10      	pop	{r4, pc}

08006690 <_raise_r>:
 8006690:	291f      	cmp	r1, #31
 8006692:	b538      	push	{r3, r4, r5, lr}
 8006694:	4604      	mov	r4, r0
 8006696:	460d      	mov	r5, r1
 8006698:	d904      	bls.n	80066a4 <_raise_r+0x14>
 800669a:	2316      	movs	r3, #22
 800669c:	6003      	str	r3, [r0, #0]
 800669e:	f04f 30ff 	mov.w	r0, #4294967295
 80066a2:	bd38      	pop	{r3, r4, r5, pc}
 80066a4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80066a6:	b112      	cbz	r2, 80066ae <_raise_r+0x1e>
 80066a8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80066ac:	b94b      	cbnz	r3, 80066c2 <_raise_r+0x32>
 80066ae:	4620      	mov	r0, r4
 80066b0:	f000 f830 	bl	8006714 <_getpid_r>
 80066b4:	462a      	mov	r2, r5
 80066b6:	4601      	mov	r1, r0
 80066b8:	4620      	mov	r0, r4
 80066ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80066be:	f000 b817 	b.w	80066f0 <_kill_r>
 80066c2:	2b01      	cmp	r3, #1
 80066c4:	d00a      	beq.n	80066dc <_raise_r+0x4c>
 80066c6:	1c59      	adds	r1, r3, #1
 80066c8:	d103      	bne.n	80066d2 <_raise_r+0x42>
 80066ca:	2316      	movs	r3, #22
 80066cc:	6003      	str	r3, [r0, #0]
 80066ce:	2001      	movs	r0, #1
 80066d0:	e7e7      	b.n	80066a2 <_raise_r+0x12>
 80066d2:	2400      	movs	r4, #0
 80066d4:	4628      	mov	r0, r5
 80066d6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80066da:	4798      	blx	r3
 80066dc:	2000      	movs	r0, #0
 80066de:	e7e0      	b.n	80066a2 <_raise_r+0x12>

080066e0 <raise>:
 80066e0:	4b02      	ldr	r3, [pc, #8]	; (80066ec <raise+0xc>)
 80066e2:	4601      	mov	r1, r0
 80066e4:	6818      	ldr	r0, [r3, #0]
 80066e6:	f7ff bfd3 	b.w	8006690 <_raise_r>
 80066ea:	bf00      	nop
 80066ec:	2000000c 	.word	0x2000000c

080066f0 <_kill_r>:
 80066f0:	b538      	push	{r3, r4, r5, lr}
 80066f2:	2300      	movs	r3, #0
 80066f4:	4d06      	ldr	r5, [pc, #24]	; (8006710 <_kill_r+0x20>)
 80066f6:	4604      	mov	r4, r0
 80066f8:	4608      	mov	r0, r1
 80066fa:	4611      	mov	r1, r2
 80066fc:	602b      	str	r3, [r5, #0]
 80066fe:	f7fb f9f4 	bl	8001aea <_kill>
 8006702:	1c43      	adds	r3, r0, #1
 8006704:	d102      	bne.n	800670c <_kill_r+0x1c>
 8006706:	682b      	ldr	r3, [r5, #0]
 8006708:	b103      	cbz	r3, 800670c <_kill_r+0x1c>
 800670a:	6023      	str	r3, [r4, #0]
 800670c:	bd38      	pop	{r3, r4, r5, pc}
 800670e:	bf00      	nop
 8006710:	20000418 	.word	0x20000418

08006714 <_getpid_r>:
 8006714:	f7fb b9e2 	b.w	8001adc <_getpid>

08006718 <__sread>:
 8006718:	b510      	push	{r4, lr}
 800671a:	460c      	mov	r4, r1
 800671c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006720:	f000 f894 	bl	800684c <_read_r>
 8006724:	2800      	cmp	r0, #0
 8006726:	bfab      	itete	ge
 8006728:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800672a:	89a3      	ldrhlt	r3, [r4, #12]
 800672c:	181b      	addge	r3, r3, r0
 800672e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006732:	bfac      	ite	ge
 8006734:	6563      	strge	r3, [r4, #84]	; 0x54
 8006736:	81a3      	strhlt	r3, [r4, #12]
 8006738:	bd10      	pop	{r4, pc}

0800673a <__swrite>:
 800673a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800673e:	461f      	mov	r7, r3
 8006740:	898b      	ldrh	r3, [r1, #12]
 8006742:	4605      	mov	r5, r0
 8006744:	05db      	lsls	r3, r3, #23
 8006746:	460c      	mov	r4, r1
 8006748:	4616      	mov	r6, r2
 800674a:	d505      	bpl.n	8006758 <__swrite+0x1e>
 800674c:	2302      	movs	r3, #2
 800674e:	2200      	movs	r2, #0
 8006750:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006754:	f000 f868 	bl	8006828 <_lseek_r>
 8006758:	89a3      	ldrh	r3, [r4, #12]
 800675a:	4632      	mov	r2, r6
 800675c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006760:	81a3      	strh	r3, [r4, #12]
 8006762:	4628      	mov	r0, r5
 8006764:	463b      	mov	r3, r7
 8006766:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800676a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800676e:	f000 b817 	b.w	80067a0 <_write_r>

08006772 <__sseek>:
 8006772:	b510      	push	{r4, lr}
 8006774:	460c      	mov	r4, r1
 8006776:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800677a:	f000 f855 	bl	8006828 <_lseek_r>
 800677e:	1c43      	adds	r3, r0, #1
 8006780:	89a3      	ldrh	r3, [r4, #12]
 8006782:	bf15      	itete	ne
 8006784:	6560      	strne	r0, [r4, #84]	; 0x54
 8006786:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800678a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800678e:	81a3      	strheq	r3, [r4, #12]
 8006790:	bf18      	it	ne
 8006792:	81a3      	strhne	r3, [r4, #12]
 8006794:	bd10      	pop	{r4, pc}

08006796 <__sclose>:
 8006796:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800679a:	f000 b813 	b.w	80067c4 <_close_r>
	...

080067a0 <_write_r>:
 80067a0:	b538      	push	{r3, r4, r5, lr}
 80067a2:	4604      	mov	r4, r0
 80067a4:	4608      	mov	r0, r1
 80067a6:	4611      	mov	r1, r2
 80067a8:	2200      	movs	r2, #0
 80067aa:	4d05      	ldr	r5, [pc, #20]	; (80067c0 <_write_r+0x20>)
 80067ac:	602a      	str	r2, [r5, #0]
 80067ae:	461a      	mov	r2, r3
 80067b0:	f7fb f9d2 	bl	8001b58 <_write>
 80067b4:	1c43      	adds	r3, r0, #1
 80067b6:	d102      	bne.n	80067be <_write_r+0x1e>
 80067b8:	682b      	ldr	r3, [r5, #0]
 80067ba:	b103      	cbz	r3, 80067be <_write_r+0x1e>
 80067bc:	6023      	str	r3, [r4, #0]
 80067be:	bd38      	pop	{r3, r4, r5, pc}
 80067c0:	20000418 	.word	0x20000418

080067c4 <_close_r>:
 80067c4:	b538      	push	{r3, r4, r5, lr}
 80067c6:	2300      	movs	r3, #0
 80067c8:	4d05      	ldr	r5, [pc, #20]	; (80067e0 <_close_r+0x1c>)
 80067ca:	4604      	mov	r4, r0
 80067cc:	4608      	mov	r0, r1
 80067ce:	602b      	str	r3, [r5, #0]
 80067d0:	f7fb f9de 	bl	8001b90 <_close>
 80067d4:	1c43      	adds	r3, r0, #1
 80067d6:	d102      	bne.n	80067de <_close_r+0x1a>
 80067d8:	682b      	ldr	r3, [r5, #0]
 80067da:	b103      	cbz	r3, 80067de <_close_r+0x1a>
 80067dc:	6023      	str	r3, [r4, #0]
 80067de:	bd38      	pop	{r3, r4, r5, pc}
 80067e0:	20000418 	.word	0x20000418

080067e4 <_fstat_r>:
 80067e4:	b538      	push	{r3, r4, r5, lr}
 80067e6:	2300      	movs	r3, #0
 80067e8:	4d06      	ldr	r5, [pc, #24]	; (8006804 <_fstat_r+0x20>)
 80067ea:	4604      	mov	r4, r0
 80067ec:	4608      	mov	r0, r1
 80067ee:	4611      	mov	r1, r2
 80067f0:	602b      	str	r3, [r5, #0]
 80067f2:	f7fb f9d8 	bl	8001ba6 <_fstat>
 80067f6:	1c43      	adds	r3, r0, #1
 80067f8:	d102      	bne.n	8006800 <_fstat_r+0x1c>
 80067fa:	682b      	ldr	r3, [r5, #0]
 80067fc:	b103      	cbz	r3, 8006800 <_fstat_r+0x1c>
 80067fe:	6023      	str	r3, [r4, #0]
 8006800:	bd38      	pop	{r3, r4, r5, pc}
 8006802:	bf00      	nop
 8006804:	20000418 	.word	0x20000418

08006808 <_isatty_r>:
 8006808:	b538      	push	{r3, r4, r5, lr}
 800680a:	2300      	movs	r3, #0
 800680c:	4d05      	ldr	r5, [pc, #20]	; (8006824 <_isatty_r+0x1c>)
 800680e:	4604      	mov	r4, r0
 8006810:	4608      	mov	r0, r1
 8006812:	602b      	str	r3, [r5, #0]
 8006814:	f7fb f9d6 	bl	8001bc4 <_isatty>
 8006818:	1c43      	adds	r3, r0, #1
 800681a:	d102      	bne.n	8006822 <_isatty_r+0x1a>
 800681c:	682b      	ldr	r3, [r5, #0]
 800681e:	b103      	cbz	r3, 8006822 <_isatty_r+0x1a>
 8006820:	6023      	str	r3, [r4, #0]
 8006822:	bd38      	pop	{r3, r4, r5, pc}
 8006824:	20000418 	.word	0x20000418

08006828 <_lseek_r>:
 8006828:	b538      	push	{r3, r4, r5, lr}
 800682a:	4604      	mov	r4, r0
 800682c:	4608      	mov	r0, r1
 800682e:	4611      	mov	r1, r2
 8006830:	2200      	movs	r2, #0
 8006832:	4d05      	ldr	r5, [pc, #20]	; (8006848 <_lseek_r+0x20>)
 8006834:	602a      	str	r2, [r5, #0]
 8006836:	461a      	mov	r2, r3
 8006838:	f7fb f9ce 	bl	8001bd8 <_lseek>
 800683c:	1c43      	adds	r3, r0, #1
 800683e:	d102      	bne.n	8006846 <_lseek_r+0x1e>
 8006840:	682b      	ldr	r3, [r5, #0]
 8006842:	b103      	cbz	r3, 8006846 <_lseek_r+0x1e>
 8006844:	6023      	str	r3, [r4, #0]
 8006846:	bd38      	pop	{r3, r4, r5, pc}
 8006848:	20000418 	.word	0x20000418

0800684c <_read_r>:
 800684c:	b538      	push	{r3, r4, r5, lr}
 800684e:	4604      	mov	r4, r0
 8006850:	4608      	mov	r0, r1
 8006852:	4611      	mov	r1, r2
 8006854:	2200      	movs	r2, #0
 8006856:	4d05      	ldr	r5, [pc, #20]	; (800686c <_read_r+0x20>)
 8006858:	602a      	str	r2, [r5, #0]
 800685a:	461a      	mov	r2, r3
 800685c:	f7fb f95f 	bl	8001b1e <_read>
 8006860:	1c43      	adds	r3, r0, #1
 8006862:	d102      	bne.n	800686a <_read_r+0x1e>
 8006864:	682b      	ldr	r3, [r5, #0]
 8006866:	b103      	cbz	r3, 800686a <_read_r+0x1e>
 8006868:	6023      	str	r3, [r4, #0]
 800686a:	bd38      	pop	{r3, r4, r5, pc}
 800686c:	20000418 	.word	0x20000418

08006870 <_init>:
 8006870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006872:	bf00      	nop
 8006874:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006876:	bc08      	pop	{r3}
 8006878:	469e      	mov	lr, r3
 800687a:	4770      	bx	lr

0800687c <_fini>:
 800687c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800687e:	bf00      	nop
 8006880:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006882:	bc08      	pop	{r3}
 8006884:	469e      	mov	lr, r3
 8006886:	4770      	bx	lr
